// Generated by CoffeeScript 2.7.0
// OBSERVERA!

// Denna fil är inte korrekt översatt från js till coffee av Christer Nilsson
// Den ger olika resultat beroende på om indata är osorterat, fallande eller stigande
// Originalet (javascript) är konsistent.

// Converted to Coffeescript form JS by Christer Nilsson. Original: https://github.com/mattkrick/EdmondsBlossom
// Converted to JS from Python by Matt Krick. Original: https://jorisvr.nl/files/graphmatching/20130407/mwmatching.py
var range;

range = _.range;

export var Edmonds = (function() {
  var filledArray, getMin, initArrArr, pIndex;

  class Edmonds {
    constructor(edges, maxCardinality = true) {
      this.edges = edges;
      this.maxCardinality = maxCardinality;
      this.nEdge = this.edges.length;
      this.nVertexInit();
      this.maxWeightInit();
      this.endpointInit();
      this.neighbendInit();
      this.mate = filledArray(this.nVertex, -1);
      this.label = filledArray(2 * this.nVertex, 0); //remove?
      this.labelEnd = filledArray(2 * this.nVertex, -1);
      this.inBlossomInit();
      this.blossomParent = filledArray(2 * this.nVertex, -1);
      this.blossomChilds = initArrArr(2 * this.nVertex);
      this.blossomBaseInit();
      this.blossomEndPs = initArrArr(2 * this.nVertex);
      this.bestEdge = filledArray(2 * this.nVertex, -1); //remove?
      this.blossomBestEdges = initArrArr(2 * this.nVertex); //remove?
      this.unusedBlossomsInit();
      this.dualVarInit();
      this.allowEdge = filledArray(this.nEdge, false); //remove?
      this.queue = []; //remove?
    }

    maxWeightMatching() {
      var augmented, b, base, curLabel, d, delta, deltaBlossom, deltaEdge, deltaType, i, i1, ii, j, j1, k, kSlack, l, len1, len10, len2, len3, len4, len5, len6, len7, len8, len9, m, n, o, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, t, u, v, w, wt, z;
      ref = range(this.nVertex);
      for (l = 0, len1 = ref.length; l < len1; l++) {
        t = ref[l];
        this.label = filledArray(2 * this.nVertex, 0);
        this.bestEdge = filledArray(2 * this.nVertex, -1);
        this.blossomBestEdges = initArrArr(2 * this.nVertex);
        this.allowEdge = filledArray(this.nEdge, false);
        this.queue = [];
        ref1 = range(this.nVertex);
        for (m = 0, len2 = ref1.length; m < len2; m++) {
          v = ref1[m];
          if (this.mate[v] === -1 && this.label[this.inBlossom[v]] === 0) {
            this.assignLabel(v, 1, -1);
          }
        }
        augmented = false;
        while (true) {
          while (this.queue.length > 0 && !augmented) {
            v = this.queue.pop();
            ref2 = range(this.neighbend[v].length);
            for (n = 0, len3 = ref2.length; n < len3; n++) {
              ii = ref2[n];
              p = this.neighbend[v][ii];
              k = ~~(p / 2);
              w = this.endpoint[p];
              if (this.inBlossom[v] === this.inBlossom[w]) {
                continue;
              }
              if (!this.allowEdge[k]) {
                kSlack = this.slack(k);
                if (kSlack <= 0) {
                  this.allowEdge[k] = true;
                }
              }
              if (this.allowEdge[k]) {
                if (this.label[this.inBlossom[w]] === 0) {
                  this.assignLabel(w, 2, p ^ 1);
                } else if (this.label[this.inBlossom[w]] === 1) {
                  base = this.scanBlossom(v, w);
                  if (base >= 0) {
                    this.addBlossom(base, k);
                  } else {
                    this.augmentMatching(k);
                    augmented = true;
                    break;
                  }
                } else if (this.label[w] === 0) {
                  this.label[w] = 2;
                  this.labelEnd[w] = p ^ 1;
                }
              } else if (this.label[this.inBlossom[w]] === 1) {
                b = this.inBlossom[v];
                if (this.bestEdge[b] === -1 || kSlack < this.slack(this.bestEdge[b])) {
                  this.bestEdge[b] = k;
                }
              } else if (this.label[w] === 0) {
                if (this.bestEdge[w] === -1 || kSlack < this.slack(this.bestEdge[w])) {
                  this.bestEdge[w] = k;
                }
              }
            }
          }
          if (augmented) {
            break;
          }
          deltaType = -1;
          delta = [];
          deltaEdge = [];
          deltaBlossom = [];
          if (!this.maxCardinality) {
            deltaType = 1;
            delta = getMin(this.dualVar, 0, this.nVertex - 1);
          }
          ref3 = range(this.nVertex);
          for (o = 0, len4 = ref3.length; o < len4; o++) {
            v = ref3[o];
            if (this.label[this.inBlossom[v]] === 0 && this.bestEdge[v] !== -1) {
              d = this.slack(this.bestEdge[v]);
              if (deltaType === -1 || d < delta) {
                delta = d;
                deltaType = 2;
                deltaEdge = this.bestEdge[v];
              }
            }
          }
          ref4 = range(2 * this.nVertex);
          for (q = 0, len5 = ref4.length; q < len5; q++) {
            b = ref4[q];
            if (this.blossomParent[b] === -1 && this.label[b] === 1 && this.bestEdge[b] !== -1) {
              kSlack = this.slack(this.bestEdge[b]);
              d = kSlack / 2;
              if (deltaType === -1 || d < delta) {
                delta = d;
                deltaType = 3;
                deltaEdge = this.bestEdge[b];
              }
            }
          }
          ref5 = range(this.nVertex, this.nVertex * 2);
          for (r = 0, len6 = ref5.length; r < len6; r++) {
            b = ref5[r];
            if (this.blossomBase[b] >= 0 && this.blossomParent[b] === -1 && this.label[b] === 2 && (deltaType === -1 || this.dualVar[b] < delta)) {
              delta = this.dualVar[b];
              deltaType = 4;
              deltaBlossom = b;
            }
          }
          if (deltaType === -1) {
            deltaType = 1;
            delta = Math.max(0, getMin(this.dualVar, 0, this.nVertex - 1));
          }
          ref6 = range(this.nVertex);
          for (u = 0, len7 = ref6.length; u < len7; u++) {
            v = ref6[u];
            curLabel = this.label[this.inBlossom[v]];
            if (curLabel === 1) {
              this.dualVar[v] -= delta;
            } else if (curLabel === 2) {
              this.dualVar[v] += delta;
            }
          }
          ref7 = range(this.nVertex, this.nVertex * 2);
          for (z = 0, len8 = ref7.length; z < len8; z++) {
            b = ref7[z];
            if (this.blossomBase[b] >= 0 && this.blossomParent[b] === -1) {
              if (this.label[b] === 1) {
                this.dualVar[b] += delta;
              } else if (this.label[b] === 2) {
                this.dualVar[b] -= delta;
              }
            }
          }
          if (deltaType === 1) {
            break;
          } else if (deltaType === 2) {
            this.allowEdge[deltaEdge] = true;
            i = this.edges[deltaEdge][0];
            j = this.edges[deltaEdge][1];
            wt = this.edges[deltaEdge][2];
            if (this.label[this.inBlossom[i]] === 0) {
              i = i ^ j;
              j = j ^ i;
              i = i ^ j;
            }
            this.queue.push(i);
          } else if (deltaType === 3) {
            this.allowEdge[deltaEdge] = true;
            i = this.edges[deltaEdge][0];
            j = this.edges[deltaEdge][1];
            wt = this.edges[deltaEdge][2];
            this.queue.push(i);
          } else if (deltaType === 4) {
            this.expandBlossom(deltaBlossom, false);
          }
        }
        if (!augmented) {
          break;
        }
        ref8 = range(this.nVertex, this.nVertex * 2);
        for (i1 = 0, len9 = ref8.length; i1 < len9; i1++) {
          b = ref8[i1];
          if (this.blossomParent[b] === -1 && this.blossomBase[b] >= 0 && this.label[b] === 1 && this.dualVar[b] === 0) {
            this.expandBlossom(b, true);
          }
        }
      }
      ref9 = range(this.nVertex);
      for (j1 = 0, len10 = ref9.length; j1 < len10; j1++) {
        v = ref9[j1];
        if (this.mate[v] >= 0) {
          this.mate[v] = this.endpoint[this.mate[v]];
        }
      }
      return this.mate;
    }

    slack(k) {
      var i, j, wt;
      i = this.edges[k][0];
      j = this.edges[k][1];
      wt = this.edges[k][2];
      return this.dualVar[i] + this.dualVar[j] - 2 * wt;
    }

    blossomLeaves(b) {
      var childList, l, leafList, leaves, len1, len2, m, ref, ref1, t, v;
      if (b < this.nVertex) {
        return [b];
      }
      leaves = [];
      childList = this.blossomChilds[b];
      ref = range(childList.length);
      for (l = 0, len1 = ref.length; l < len1; l++) {
        t = ref[l];
        if (childList[t] <= this.nVertex) {
          leaves.push(childList[t]);
        } else {
          leafList = this.blossomLeaves(childList[t]);
          ref1 = range(leafList.length);
          for (m = 0, len2 = ref1.length; m < len2; m++) {
            v = ref1[m];
            leaves.push(leafList[v]);
          }
        }
      }
      return leaves;
    }

    assignLabel(w, t, p) {
      var b, base;
      b = this.inBlossom[w];
      this.label[w] = this.label[b] = t;
      this.labelEnd[w] = this.labelEnd[b] = p;
      this.bestEdge[w] = this.bestEdge[b] = -1;
      if (t === 1) {
        return this.queue.push.apply(this.queue, this.blossomLeaves(b));
      } else if (t === 2) {
        base = this.blossomBase[b];
        return this.assignLabel(this.endpoint[this.mate[base]], 1, this.mate[base] ^ 1);
      }
    }

    scanBlossom(v, w) {
      var b, base, ii, l, len1, path, ref;
      path = [];
      base = -1;
      while (v !== -1 || w !== -1) {
        b = this.inBlossom[v];
        if (this.label[b] & 4) {
          base = this.blossomBase[b];
          break;
        }
        path.push(b);
        this.label[b] = 5;
        if (this.labelEnd[b] === -1) {
          v = -1;
        } else {
          v = this.endpoint[this.labelEnd[b]];
          b = this.inBlossom[v];
          v = this.endpoint[this.labelEnd[b]];
        }
        if (w !== -1) {
          v = v ^ w;
          w = w ^ v;
          v = v ^ w;
        }
      }
      ref = range(path.length);
      for (l = 0, len1 = ref.length; l < len1; l++) {
        ii = ref[l];
        b = path[ii];
        this.label[b] = 1;
      }
      return base;
    }

    addBlossom(base, k) {
      var b, bb, be, bestEdgeTo, bj, bv, bw, endPs, i, ii, j, l, leaves, len1, len2, len3, len4, len5, len6, len7, len8, m, n, nbList, nbLists, o, p, path, q, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, results, u, v, w, wt, x, y, z;
      v = this.edges[k][0];
      w = this.edges[k][1];
      wt = this.edges[k][2];
      bb = this.inBlossom[base];
      bv = this.inBlossom[v];
      bw = this.inBlossom[w];
      b = this.unusedBlossoms.pop();
      this.blossomBase[b] = base;
      this.blossomParent[b] = -1;
      this.blossomParent[bb] = b;
      path = this.blossomChilds[b] = [];
      endPs = this.blossomEndPs[b] = [];
      while (bv !== bb) {
        this.blossomParent[bv] = b;
        path.push(bv);
        endPs.push(this.labelEnd[bv]);
        v = this.endpoint[this.labelEnd[bv]];
        bv = this.inBlossom[v];
      }
      path.push(bb);
      path.reverse();
      endPs.reverse();
      endPs.push(2 * k);
      while (bw !== bb) {
        this.blossomParent[bw] = b;
        path.push(bw);
        endPs.push(this.labelEnd[bw] ^ 1);
        w = this.endpoint[this.labelEnd[bw]];
        bw = this.inBlossom[w];
      }
      this.label[b] = 1;
      this.labelEnd[b] = this.labelEnd[bb];
      this.dualVar[b] = 0;
      leaves = this.blossomLeaves(b);
      ref = range(leaves.length);
      for (l = 0, len1 = ref.length; l < len1; l++) {
        ii = ref[l];
        v = leaves[ii];
        if (this.label[this.inBlossom[v]] === 2) {
          this.queue.push(v);
        }
        this.inBlossom[v] = b;
      }
      bestEdgeTo = filledArray(2 * this.nVertex, -1);
      ref1 = range(path.length);
      for (m = 0, len2 = ref1.length; m < len2; m++) {
        ii = ref1[m];
        bv = path[ii];
        if (this.blossomBestEdges[bv].length === 0) {
          nbLists = [];
          leaves = this.blossomLeaves(bv);
          ref2 = range(leaves.length);
          for (n = 0, len3 = ref2.length; n < len3; n++) {
            x = ref2[n];
            v = leaves[x];
            nbLists[x] = [];
            ref3 = range(this.neighbend[v].length);
            for (o = 0, len4 = ref3.length; o < len4; o++) {
              y = ref3[o];
              p = this.neighbend[v][y];
              nbLists[x].push(~~(p / 2));
            }
          }
        } else {
          nbLists = [this.blossomBestEdges[bv]];
        }
        ref4 = range(nbLists.length);
        for (q = 0, len5 = ref4.length; q < len5; q++) {
          x = ref4[q];
          nbList = nbLists[x];
          ref5 = range(nbList.length);
          for (r = 0, len6 = ref5.length; r < len6; r++) {
            y = ref5[r];
            k = nbList[y];
            i = this.edges[k][0];
            j = this.edges[k][1];
            wt = this.edges[k][2];
            if (this.inBlossom[j] === b) {
              i = i ^ j;
              j = j ^ i;
              i = i ^ j;
            }
            bj = this.inBlossom[j];
            if (bj !== b && this.label[bj] === 1 && (bestEdgeTo[bj] === -1 || this.slack(k) < this.slack(bestEdgeTo[bj]))) {
              bestEdgeTo[bj] = k;
            }
          }
        }
        this.blossomBestEdges[bv] = [];
        this.bestEdge[bv] = -1;
      }
      be = [];
      ref6 = range(bestEdgeTo.length);
      for (u = 0, len7 = ref6.length; u < len7; u++) {
        ii = ref6[u];
        k = bestEdgeTo[ii];
        if (k !== -1) {
          be.push(k);
        }
      }
      this.blossomBestEdges[b] = be;
      this.bestEdge[b] = -1;
      ref7 = this.blossomBestEdges[b].length;
      results = [];
      for (z = 0, len8 = ref7.length; z < len8; z++) {
        ii = ref7[z];
        k = this.blossomBestEdges[b][ii];
        if (this.bestEdge[b] === -1 || this.slack(k) < this.slack(this.bestEdge[b])) {
          results.push(this.bestEdge[b] = k);
        } else {
          results.push(void 0);
        }
      }
      return results;
    }

    expandBlossom(b, endStage) {
      var bv, endpTrick, entryChild, ii, j, jStep, jj, l, leaves, len1, len2, len3, m, n, p, ref, ref1, ref2, s, v;
      ref = range(this.blossomChilds[b].length);
      for (l = 0, len1 = ref.length; l < len1; l++) {
        ii = ref[l];
        s = this.blossomChilds[b][ii];
        this.blossomParent[s] = -1;
        if (s < this.nVertex) {
          this.inBlossom[s] = s;
        } else if (endStage && this.dualVar[s] === 0) {
          this.expandBlossom(s, endStage);
        } else {
          leaves = this.blossomLeaves(s);
          ref1 = range(leaves.length);
          for (m = 0, len2 = ref1.length; m < len2; m++) {
            jj = ref1[m];
            v = leaves[jj];
            this.inBlossom[v] = s;
          }
        }
      }
      if (!endStage && this.label[b] === 2) {
        entryChild = this.inBlossom[this.endpoint[this.labelEnd[b] ^ 1]];
        j = this.blossomChilds[b].indexOf(entryChild);
        if (j & 1) {
          j -= this.blossomChilds[b].length;
          jStep = 1;
          endpTrick = 0;
        } else {
          jStep = -1;
          endpTrick = 1;
        }
        p = this.labelEnd[b];
        while (j !== 0) {
          this.label[this.endpoint[p ^ 1]] = 0;
          this.label[this.endpoint[pIndex(this.blossomEndPs[b], j - endpTrick) ^ endpTrick ^ 1]] = 0;
          this.assignLabel(this.endpoint[p ^ 1], 2, p);
          this.allowEdge[~~(pIndex(this.blossomEndPs[b], j - endpTrick) / 2)] = true;
          j += jStep;
          p = pIndex(this.blossomEndPs[b], j - endpTrick) ^ endpTrick;
          this.allowEdge[~~(p / 2)] = true;
          j += jStep;
        }
        bv = pIndex(this.blossomChilds[b], j);
        this.label[this.endpoint[p ^ 1]] = this.label[bv] = 2;
        this.labelEnd[this.endpoint[p ^ 1]] = this.labelEnd[bv] = p;
        this.bestEdge[bv] = -1;
        j += jStep;
        while (pIndex(this.blossomChilds[b], j) !== entryChild) {
          bv = pIndex(this.blossomChilds[b], j);
          if (this.label[bv] === 1) {
            j += jStep;
            continue;
          }
          leaves = this.blossomLeaves(bv);
          ref2 = range(leaves.length);
          for (n = 0, len3 = ref2.length; n < len3; n++) {
            ii = ref2[n];
            v = leaves[ii];
            if (this.label[v] !== 0) {
              break;
            }
          }
          if (this.label[v] !== 0) {
            this.label[v] = 0;
            this.label[this.endpoint[this.mate[this.blossomBase[bv]]]] = 0;
            this.assignLabel(v, 2, this.labelEnd[v]);
          }
          j += jStep;
        }
      }
      this.label[b] = this.labelEnd[b] = -1;
      this.blossomEndPs[b] = this.blossomChilds[b] = [];
      this.blossomBase[b] = -1;
      this.blossomBestEdges[b] = [];
      this.bestEdge[b] = -1;
      return this.unusedBlossoms.push(b);
    }

    augmentBlossom(b, v) {
      var endpTrick, i, j, jStep, p, t;
      t = v;
      while (this.blossomParent[t] !== b) {
        t = this.blossomParent[t];
      }
      if (t > this.nVertex) {
        this.augmentBlossom(t, v);
      }
      i = j = this.blossomChilds[b].indexOf(t);
      if (i & 1) {
        j -= this.blossomChilds[b].length;
        jStep = 1;
        endpTrick = 0;
      } else {
        jStep = -1;
        endpTrick = 1;
      }
      while (j !== 0) {
        j += jStep;
        t = pIndex(this.blossomChilds[b], j);
        p = pIndex(this.blossomEndPs[b], j - endpTrick) ^ endpTrick;
        if (t >= this.nVertex) {
          this.augmentBlossom(t, this.endpoint[p]);
        }
        j += jStep;
        t = pIndex(this.blossomChilds[b], j);
        if (t >= this.nVertex) {
          this.augmentBlossom(t, this.endpoint[p ^ 1]);
        }
        this.mate[this.endpoint[p]] = p ^ 1;
        this.mate[this.endpoint[p ^ 1]] = p;
      }
      this.blossomChilds[b] = this.blossomChilds[b].slice(i).concat(this.blossomChilds[b].slice(0, i));
      this.blossomEndPs[b] = this.blossomEndPs[b].slice(i).concat(this.blossomEndPs[b].slice(0, i));
      return this.blossomBase[b] = this.blossomBase[this.blossomChilds[b][0]];
    }

    augmentMatching(k) {
      var bs, bt, ii, j, l, len1, p, ref, results, s, t, v, w;
      v = this.edges[k][0];
      w = this.edges[k][1];
      ref = range(2);
      results = [];
      for (l = 0, len1 = ref.length; l < len1; l++) {
        ii = ref[l];
        if (ii === 0) {
          s = v;
          p = 2 * k + 1;
        } else {
          s = w;
          p = 2 * k;
        }
        results.push((function() {
          var results1;
          results1 = [];
          while (true) {
            bs = this.inBlossom[s];
            if (bs >= this.nVertex) {
              this.augmentBlossom(bs, s);
            }
            this.mate[s] = p;
            if (this.labelEnd[bs] === -1) {
              break;
            }
            t = this.endpoint[this.labelEnd[bs]];
            bt = this.inBlossom[t];
            s = this.endpoint[this.labelEnd[bt]];
            j = this.endpoint[this.labelEnd[bt] ^ 1];
            if (bt >= this.nVertex) {
              this.augmentBlossom(bt, j);
            }
            this.mate[j] = this.labelEnd[bt];
            results1.push(p = this.labelEnd[bt] ^ 1);
          }
          return results1;
        }).call(this));
      }
      return results;
    }

    blossomBaseInit() {
      var base, i, l, len1, negs, ref;
      base = [];
      ref = range(this.nVertex);
      for (l = 0, len1 = ref.length; l < len1; l++) {
        i = ref[l];
        base[i] = i;
      }
      negs = filledArray(this.nVertex, -1);
      return this.blossomBase = base.concat(negs);
    }

    dualVarInit() {
      var mw, zeros;
      mw = filledArray(this.nVertex, this.maxWeight);
      zeros = filledArray(this.nVertex, 0);
      return this.dualVar = mw.concat(zeros);
    }

    unusedBlossomsInit() {
      var i, l, len1, ref, unusedBlossoms;
      unusedBlossoms = [];
      ref = range(this.nVertex, 2 * this.nVertex);
      for (l = 0, len1 = ref.length; l < len1; l++) {
        i = ref[l];
        unusedBlossoms.push(i);
      }
      return this.unusedBlossoms = unusedBlossoms;
    }

    inBlossomInit() {
      var i, inBlossom, l, len1, ref;
      inBlossom = [];
      ref = range(this.nVertex);
      for (l = 0, len1 = ref.length; l < len1; l++) {
        i = ref[l];
        inBlossom[i] = i;
      }
      return this.inBlossom = inBlossom;
    }

    neighbendInit() {
      var i, j, k, l, len1, neighbend, ref;
      neighbend = initArrArr(this.nVertex);
      ref = range(this.nEdge);
      for (l = 0, len1 = ref.length; l < len1; l++) {
        k = ref[l];
        i = this.edges[k][0];
        j = this.edges[k][1];
        neighbend[i].push(2 * k + 1);
        neighbend[j].push(2 * k);
      }
      return this.neighbend = neighbend;
    }

    endpointInit() {
      var endpoint, l, len1, p, ref;
      endpoint = [];
      ref = range(2 * this.nEdge);
      for (l = 0, len1 = ref.length; l < len1; l++) {
        p = ref[l];
        endpoint[p] = this.edges[~~(p / 2)][p % 2];
      }
      return this.endpoint = endpoint;
    }

    nVertexInit() {
      var i, j, k, l, len1, nVertex, ref;
      nVertex = 0;
      ref = range(this.nEdge);
      for (l = 0, len1 = ref.length; l < len1; l++) {
        k = ref[l];
        i = this.edges[k][0];
        j = this.edges[k][1];
        if (i >= nVertex) {
          nVertex = i + 1;
        }
        if (j >= nVertex) {
          nVertex = j + 1;
        }
      }
      return this.nVertex = nVertex;
    }

    maxWeightInit() {
      var k, l, len1, maxWeight, ref, weight;
      maxWeight = 0;
      ref = range(this.nEdge);
      for (l = 0, len1 = ref.length; l < len1; l++) {
        k = ref[l];
        weight = this.edges[k][2];
        if (weight > maxWeight) {
          maxWeight = weight;
        }
      }
      return this.maxWeight = maxWeight;
    }

  };

  
  // HELPERS #
  filledArray = function(len, fill) {
    var i, l, len1, newArray, ref;
    newArray = [];
    ref = range(len);
    for (l = 0, len1 = ref.length; l < len1; l++) {
      i = ref[l];
      newArray[i] = fill;
    }
    return newArray;
  };

  initArrArr = function(len) {
    var arr, i, l, len1, ref;
    arr = [];
    ref = range(len);
    for (l = 0, len1 = ref.length; l < len1; l++) {
      i = ref[l];
      arr[i] = [];
    }
    return arr;
  };

  getMin = function(arr, start, end) {
    var i, l, len1, min, ref;
    min = 2e308;
    ref = range(start, end + 1);
    for (l = 0, len1 = ref.length; l < len1; l++) {
      i = ref[l];
      if (arr[i] < min) {
        min = arr[i];
      }
    }
    return min;
  };

  pIndex = function(arr, idx) {
    if (idx < 0) {
      return arr[arr.length + idx];
    } else {
      return arr[idx];
    }
  };

  return Edmonds;

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\ELO-Pairings\coffee\mattkrick.coffee