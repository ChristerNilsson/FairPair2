// Generated by CoffeeScript 2.7.0
// ½ •
var PPR, Player, add, app, b, echo, i, input, j, len, matrix, para, player, players, random, range, ref, seed, show, table, td, th, tr;

PPR = 2; // Partier Per Rond och spelare

table = function(s, attrs = "") {
  return `<table ${attrs}>\n${s}</table>`;
};

tr = function(s, attrs = "") {
  return `<tr ${attrs}>${s}</tr>\n`;
};

td = function(s, attrs = "") {
  return `<td ${attrs}>${s}</td>`;
};

th = function(s, attrs = "") {
  return `<th ${attrs}>${s}</th>`;
};

input = function(s, attrs = "") {
  return `<input ${attrs}>${s}</input>`;
};

b = function(s, attrs = "") {
  return `<b>${s}</b>`;
};

seed = 0;

random = function() {
  return (((Math.sin(seed++) / 2 + 0.5) * 10000) % 100) / 100;
};

players = [];

Player = class Player {
  constructor(elo1, name1, opp1, col1, res1) {
    this.elo = elo1;
    this.name = name1;
    this.opp = opp1;
    this.col = col1;
    this.res = res1;
  }

  // @opp är en array med heltal
  // @col är en sträng med w eller b.
  // @res håller ihop partierna i en sträng per rond och spelare
  // Detta för att hantera dubbelrond
  // Enkelrond:  ["2","0"]   => 1.0 pp
  // Dubbelrond: ["22","01"] => 2.5 pp
  score() {
    var ch, j, k, len, len1, ref, res, summa;
    summa = 0;
    ref = this.res;
    for (j = 0, len = ref.length; j < len; j++) {
      res = ref[j];
      for (k = 0, len1 = res.length; k < len1; k++) {
        ch = res[k];
        summa += parseInt(ch);
      }
    }
    return (summa / 2).toFixed(1);
  }

  prettyRes(r) {
    var ch;
    return ((function() {
      var j, len, ref, results;
      ref = this.res[r];
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        ch = ref[j];
        results.push("0½1"[ch]);
      }
      return results;
    }).call(this)).join(""); // "12" => "½1"
  }

  result(r) {
    if (this.res[r]) {
      return `${this.opp[r] + 1}${"bw"[this.col[r]]} ${this.prettyRes(r)}`;
    } else {
      return `${this.opp[r] + 1}${b("bw"[this.col[r]])} `;
    }
  }

};

matrix = function(i) {
  var j, len, pi, r, ref, res;
  res = Array(players.length).fill('•');
  res[i] = '*';
  if (i === 0) {
    res[0] = 'H';
  }
  if (i === players.length - 1) {
    res[i] = 'L';
  }
  pi = players[i];
  ref = range(pi.opp.length);
  for (j = 0, len = ref.length; j < len; j++) {
    r = ref[j];
    res[pi.opp[r]] = (r + 1) % 10;
  }
  return res.join(" ");
};

add = function(elo, name) {
  var col, opp, res;
  opp = [];
  col = [];
  res = [];
  return players.push(new Player(elo, name, opp, col, res));
};

range = _.range;

echo = console.log;

show = function(players) {
  var R, center, game, h, i, j, k, l, len, len1, len2, p, r, ref, ref1, ref2, right, s, t;
  R = players[0].opp.length;
  t = "";
  right = 'style="text-align:right"';
  center = 'style="text-align:center"';
  ref = range(players.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    p = players[i];
    s = "";
    s += td(i + 1, center);
    s += td(p.id + 1, center);
    ref1 = range(R);
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      r = ref1[k];
      game = p.result(r);
      if (r === R - 1) {
        if (PPR === 2) {
          s += td(game + input("", 'type="text" maxlength="2" style="width:16px" oninput="moveToNext(this)"'), right);
        }
        if (PPR === 1) {
          s += td(game + input("", 'type="text" maxlength="1" style="width:8px" oninput="moveToNext(this)"'), right);
        }
      } else {
        s += td(game, right);
      }
    }
    s += td(p.score(), right);
    s += td(p.elo);
    s += td(p.name);
    s += td(b(p.table), center);
    s += td(matrix(i));
    t += tr(s);
  }
  h = "";
  h += th("pos");
  h += th("#");
  ref2 = range(R);
  for (l = 0, len2 = ref2.length; l < len2; l++) {
    i = ref2[l];
    h += th(i + 1);
  }
  h += th("pp");
  h += th("elo");
  h += th("namn");
  h += th("bord");
  h += th("1 2 3 4 5 6 7 8 9 0 1 2 3 4"); // matris
  t = tr(h) + t;
  t = table(t, 'style="border:1px solid black"');
  echo(t);
  return t;
};

para = function(pairs, flag) {
  var a, bord, i, j, k, len, len1, ppr, ref, ref1, results, sa, si, z;
  bord = 0;
  ref = range(pairs.length);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    a = pairs[i];
    if (i < a) {
      bord += 1;
      players[i].opp.push(a);
      players[a].opp.push(i);
      players[i].table = bord;
      players[a].table = bord;
      if (random() < 0.5) {
        players[i].col.push(0);
        players[a].col.push(1);
      } else {
        players[i].col.push(1);
        players[a].col.push(0);
      }
      if (flag) {
        si = "";
        sa = "";
        ref1 = range(PPR);
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          ppr = ref1[k];
          z = random();
          if (z < 0.4) {
            si += "2";
            sa += "0";
          } else if (z > 0.6) {
            si += "0";
            sa += "2";
          } else {
            si += "1";
            sa += "1";
          }
        }
        players[i].res.push(si);
        results.push(players[a].res.push(sa));
      } else {
        results.push(void 0);
      }
    } else {
      results.push(void 0);
    }
  }
  return results;
};

add(1598, "AIKIO Onni");

add(1539, "ANDERSSON Lars Owe");

add(1532, "ANTONSSON Görgen");

add(1697, "BJÖRKDAHL Göran");

add(1598, "ISRAEL Dan");

add(1825, "JOHANSSON Lennart");

add(1559, "LEHVONEN Jouko");

add(1561, "LILJESTRÖM Tor");

add(1583, "PERSSON Kjell");

add(1644, "PETTERSSON Lars-Åke");

add(1684, "SILINS Peteris");

add(1681, "STOLOV Leonid");

add(1400, "STRÖMBÄCK Henrik");

add(1535, "ÅBERG Lars-Erik");

players.sort(function(a, b) {
  return b.elo - a.elo;
});

ref = range(players.length);
for (j = 0, len = ref.length; j < len; j++) {
  i = ref[j];
  player = players[i];
  player.id = i; // zero based internally
}

echo(players);


//      0  1  2  3  4  5  6  7  8  9  0  1  2  3
para([1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12], true);

para([13, 12, 11, 10, 7, 8, 9, 4, 5, 6, 3, 2, 1, 0], true);

para([2, 3, 0, 1, 6, 7, 4, 5, 10, 13, 8, 12, 11, 9], false);

app = document.getElementById('app');

app.innerHTML = show(players);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\FairPair2\coffee\sketch.coffee