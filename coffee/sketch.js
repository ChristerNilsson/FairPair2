// Generated by CoffeeScript 2.7.0
  // ½ •
var BYE, KEYWORDS, PAUSE, Player, Tournament, add, antal, app, arr, check, control, current, data, echo, g, i, info, inverse, k, l, len, len1, makePairs, matrix, moveFocus, playersByELO, playersByID, playersByScore, pr, random, range, ref, ref1, seed, solution, span, sum, sumNumbers, table, td, th, tournament, tr, xs,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf;

import {
  Edmonds
} from './blossom.js';

range = _.range;

echo = console.log;

current = 0;

BYE = -1;

PAUSE = -2;

KEYWORDS = {};

KEYWORDS.TITLE = 'text';

KEYWORDS.DATE = 'text';

KEYWORDS.ROUND = 'integer';

KEYWORDS.PAUSED = '!-separated integers';

KEYWORDS.TPP = 'integer (Tables Per Page, default: 30)';

KEYWORDS.PPP = 'integer (Players Per Page, default: 60)';

g = {};

// Dessa tre arrayer pekar alla på samma data. De är dock olika sorterade
playersByELO = [];

playersByID = [];

playersByScore = [];

span = function(s, attrs = "") {
  return `<span ${attrs}>${s}</span>`;
};

table = function(s, attrs = "") {
  return `<table ${attrs}>\n${s}</table>`;
};

tr = function(s, attrs = "") {
  return `<tr ${attrs}>${s}</tr>\n`;
};

td = function(s, attrs = "") {
  return `<td ${attrs}>${s}</td>`;
};

th = function(s, attrs = "") {
  return `<th ${attrs}>${s}</th>`;
};

seed = 0;

random = function() {
  return (((Math.sin(seed++) / 2 + 0.5) * 10000) % 100) / 100;
};

app = document.getElementById('app');

info = document.getElementById('info');

export var handleFile = function(filename, data) {
  echo('handleFile', filename, data);
  return tournament.fetchData(filename, data);
};

sum = function(s) {
  var item, k, len, res;
  res = 0;
  for (k = 0, len = s.length; k < len; k++) {
    item = s[k];
    res += parseFloat(item);
  }
  return res;
};

sumNumbers = function(arr) {
  var item, k, len, res;
  res = 0;
  for (k = 0, len = arr.length; k < len; k++) {
    item = arr[k];
    res += item;
  }
  return res;
};

playersByELO = [];

moveFocus = function(next) {
  var focusable, focusableArray, newIndex;
  focusable = document.querySelectorAll('[tabindex]');
  focusableArray = Array.from(focusable);
  newIndex = modulo(next, focusableArray.length);
  current = newIndex;
  focusableArray[newIndex].focus();
  return info.innerHTML = tournament.info();
};

inverse = function(s) {
  var ch, k, len, res;
  res = [];
  for (k = 0, len = s.length; k < len; k++) {
    ch = s[k];
    res.push("210"[parseInt(ch)]);
  }
  return res;
};

console.assert(["2", "2"], inverse(["0", "0"]));

console.assert(["1", "1"], inverse(["1", "1"]));

console.assert(["0", "0"], inverse(["2", "2"]));

// Kontrollerar att de båda resultaten matchar. Dvs 0-2 1-1 eller 2-0
check = function(p, q) {
  var r;
  echo('check', p.res, q.res);
  r = p.opp.length - 1;
  if (p.res[r] === void 0) {
    p.res[r] = "";
  }
  if (q.res[r] === void 0) {
    q.res[r] = "";
  }
  
  //echo p.res[r].length, q.res[r].length, p.res[r], q.res[r], inverse p.res[r]

  //	p.error = p.res[r].length == 2 and q.res[r].length == 2 and p.res[r] != inverse q.res[r]
  //	p.error = p.res[r] != inverse q.res[r]
  p.error = p.res[r] !== inverse(q.res[r]);
  if (p.error) {
    return echo("error", p.name, q.name);
  }
};

export var handleKeyDown = function(event) { // Enkelrond
  var cell, dir, i, index, ix, k, key, len, n, p, q, r, ref, ref1, results, trans;
  trans = {
    "0": "0",
    ' ': "1",
    "1": "2"
  };
  if (event === void 0) {
    return;
  }
  index = event.target.tabIndex; // - 1
  p = playersByScore[index];
  r = p.opp.length - 1;
  cell = event.target.children[3 + r];
  // echo 'c o f f e e', event.key, cell #.target.tabIndex
  q = playersByELO[p.opp[r]];
  if (event.key === 'Delete') {
    p.res[r] = "";
    cell.innerHTML = p.result(r, index - 1);
    moveFocus(index + 1);
  }
  if (event.key === 'ArrowDown') {
    moveFocus(index + 1);
  }
  if (event.key === 'ArrowUp') {
    moveFocus(index - 1);
  }
  if (event.key === 'Home') {
    moveFocus(0);
  }
  if (event.key === 'End') {
    moveFocus(playersByELO.length - 1);
  }
  if (ref = event.key, indexOf.call("0 1", ref) >= 0) {
    p.res[r] = trans[event.key];
    // check p, q
    cell.innerHTML = p.result(r, index - 1);
    //echo p.result r,index-1
    moveFocus(index + 1);
  }
  key = event.key.toUpperCase();
  if (key === event.key) {
    dir = -1;
  } else {
    dir = 1;
  }
  if (indexOf.call("ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ", key) >= 0) {
    index = event.target.tabIndex; // - 1
    //echo index
    n = playersByScore.length;
    ref1 = range(n);
    results = [];
    for (k = 0, len = ref1.length; k < len; k++) {
      i = ref1[k];
      if (dir === 1) {
        ix = (index + i + 1) % n;
      } else {
        ix = modulo(index - i - 1, n);
      }
      p = playersByScore[ix];
      if (p.name.startsWith(key)) {
        moveFocus(ix);
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  }
};

xs = function(ratings, own_rating) {
  var rating;
  return sumNumbers((function() {
    var k, len, results;
    results = [];
    for (k = 0, len = ratings.length; k < len; k++) {
      rating = ratings[k];
      results.push(1 / (1 + 10 ** ((rating - own_rating) / 400)));
    }
    return results;
  })());
};

pr = function(rs, s, lo = 0, hi = 4000, r = (lo + hi) / 2) {
  if (hi - lo < 0.001) {
    return r;
  } else if (s > xs(rs, r)) {
    return pr(rs, s, r, hi);
  } else {
    return pr(rs, s, lo, r);
  }
};

// echo 'pr', pr [1900,2100], 1
Player = class Player {
  constructor(elo1, name1, opp1 = [], col1 = [], res1 = []) {
    this.elo = elo1;
    this.name = name1;
    this.opp = opp1;
    this.col = col1;
    this.res = res1;
    this.active = true;
    this.error = false;
  }

  // @opp är en lista med heltal
  // @col är en lista med -1 och 1
  // @res håller ihop partierna i en sträng per rond och spelare
  // ["2","0"]   => 1.0 pp
  balans() {
    return sum(this.col);
  }

  read(player) {
    var arr, col, k, len, ocr, ocrs, results;
    this.elo = parseInt(player[0]);
    this.name = player[1];
    this.opp = [];
    this.col = [];
    this.res = [];
    if (player.length < 3) {
      return;
    }
    ocrs = player.slice(2);
    results = [];
    for (k = 0, len = ocrs.length; k < len; k++) {
      ocr = ocrs[k];
      if (indexOf.call(ocr, 'w') >= 0) {
        col = 'w';
      }
      if (indexOf.call(ocr, 'b') >= 0) {
        col = 'b';
      }
      // if '_' in ocr then col='_'
      arr = ocr.split(col);
      this.opp.push(parseInt(arr[0]));
      this.col.push({
        w: 1,
        b: -1
      }[col]);
      if (arr.length === 2 && arr[1].length === 1) {
        results.push(this.res.push(arr[1]));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  write() { // 1234!Christer!12w0!23b1!14w2   Elo:1234 Name:Christer opponent:23 color:b result:1
    var i, ocr, r, res;
    res = [];
    res.push(this.elo);
    res.push(this.name);
    r = this.opp.length;
    if (r === 0) {
      return res.join(SEPARATOR);
    }
    ocr = (function() {
      var k, len, ref, results;
      ref = range(r);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        results.push(`${this.opp[i]}${this.col[i]}${i < r ? this.res[i] : ''}`);
      }
      return results;
    }).call(this);
    res.push(ocr.join(SEPARATOR));
    return res.join(SEPARATOR);
  }

  score() {
    var ch, i, k, l, len, len1, ref, ref1, summa;
    summa = 0;
    if (this.opp.length === 0) {
      return 0;
    }
    ref = range(this.opp.length - 1);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = this.res[i];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        ch = ref1[l];
        summa += parseInt(ch);
      }
    }
    return summa / 2;
  }

  prettyScore() {
    return this.score().toFixed(1).replace('.5', '½').replace('.0', '&nbsp;').replace("0½", "½&nbsp;");
  }

  performance_rating(ratings, score) {
    var hi, lo, rating;
    lo = 0;
    hi = 4000;
    while (hi - lo > 0.001) {
      rating = (lo + hi) / 2;
      if (score > xs(ratings, rating)) {
        lo = rating;
      } else {
        hi = rating;
      }
    }
    return rating;
  }

  // Använd två extremvärden då man har 0% eller 100%
  extrapolate(a0, b0, elos) {
    var a, b;
    a = this.performance_rating(elos, a0);
    b = this.performance_rating(elos, b0);
    return b + b - a;
  }

  performance() {
    var elos, k, len, n, pp, r, ref;
    pp = this.score();
    elos = [];
    if (this.opp.length === 0) {
      return 0;
    }
    ref = range(this.opp.length - 1);
    for (k = 0, len = ref.length; k < len; k++) {
      r = ref[k];
      // if @opp[r] == BYE then continue
      // if @opp[r] == PAUSE then continue
      elos.push(playersByELO[this.opp[r]].elo);
    }
    n = elos.length;
    if (n === 1) {
      if (pp === 0) {
        return this.extrapolate(0.50, 0.25, elos);
      }
      if (pp === n) {
        return this.extrapolate(0.50, 0.75, elos);
      }
    } else {
      if (pp === 0) {
        return this.extrapolate(1, 0.5, elos);
      }
      if (pp === n) {
        return this.extrapolate(n - 1, n - 0.5, elos);
      }
    }
    return this.performance_rating(elos, pp);
  }

  prettyRes(r) {
    var ch;
    if (this.res[r] === void 0) {
      return "";
    }
    return ((function() {
      var k, len, ref, results;
      ref = this.res[r];
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        ch = ref[k];
        results.push("0½1"[ch]);
      }
      return results;
    }).call(this)).join(""); // "12" => "½1"
  }

  prettyCol(r) {
    if (this.col[r] === 1) {
      return "ul";
    } else {
      return "ur"; // 1 => "black"
    }
  }

  prettyCol2(r) {
    if (this.col[r] === 1) {
      return "lr";
    } else {
      return "ll"; // 1 => "white"
    }
  }

  result(r, index) {
    var s, t;
    s = span(this.opp[r] + 1, "class=" + this.prettyCol(r));
    t = span(this.prettyRes(r), "class=" + this.prettyCol2(r));
    return td(s + t);
  }

  info() {
    var i, k, len, ref, res;
    return 'no info';
    res = [];
    ref = range(this.opp.length - 1);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      res.push(playersByELO[this.opp[i]].elo.toString());
    }
    res.push(this.score().toFixed(1));
    res.push("=>");
    res.push(this.performance().toFixed(3));
    return res.join(" ");
  }

};

matrix = function(i) {
  var k, len, pi, r, ref, res;
  res = Array(playersByELO.length).fill('•');
  res[i] = '*';
  if (i === 0) {
    res[0] = 'H';
  }
  if (i === playersByELO.length - 1) {
    res[i] = 'L';
  }
  pi = playersByELO[i];
  ref = range(pi.opp.length);
  for (k = 0, len = ref.length; k < len; k++) {
    r = ref[k];
    res[pi.opp[r]] = "123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[r];
  }
  return res.join(" ");
};

add = function(elo, name) {
  var col, opp, res;
  opp = [];
  col = [];
  res = [];
  return playersByELO.push(new Player(elo, name, opp, col, res));
};

Tournament = class Tournament {
  constructor(filename, data) {
    this.fetchData(filename, data);
    playersByScore = _.clone(playersByID);
    echo('playersByScore', playersByScore);
  }

  fetchData(filename, data) {
    var a, arr, b, hash, helpText, i, id, item, k, key, keyword, l, len, len1, len2, len3, len4, len5, len6, line, m, nr, o, p, pa, pb, player, players, ref, ref1, ref2, ref3, ref4, ref5, u, v, value, w;
    // randomSeed 99
    this.filename = filename.replaceAll(".txt", "");
    data = data.split('\n');
    hash = {};
    // default values
    hash.PLAYERS = [];
    hash.TITLE = '';
    hash.DATE = '';
    hash.ROUND = 0;
    hash.TPP = 30;
    hash.PPP = 60;
    hash.PAUSED = "";
    for (nr = k = 0, len = data.length; k < len; nr = ++k) {
      line = data[nr];
      line = line.trim();
      if (line.length === 0) {
        continue;
      }
      arr = line.split('=');
      if (arr.length === 2) {
        if (!(arr[0] in KEYWORDS)) {
          helpText = ((function() {
            var results;
            results = [];
            for (key in KEYWORDS) {
              value = KEYWORDS[key];
              results.push(`    ${key}: ${value}`);
            }
            return results;
          })()).join('\n');
          keyword = `\"${arr[0]}\"`;
          alert(`${keyword} in line ${nr + 1} is not one of\n${helpText}`);
          return;
        }
        hash[arr[0]] = arr[1];
      } else {
        if (indexOf.call(line, '!') < 0) {
          alert(`${line}\n in line ${nr + 1}\n must look like\n    2882!CARLSEN Magnus or\n    1601!NILSSON Christer!2w0`);
          return;
        }
        arr = line.split('!');
        if (!/^\d{4}$/.test(arr[0])) {
          alert(`${arr[0]}\n in line ${nr + 1}\n must have four digits`);
          return;
        }
        ref = range(2, arr.length);
        for (l = 0, len1 = ref.length; l < len1; l++) {
          i = ref[l];
          item = arr[i];
          if (!/^-?\d+(w|_|b)[0-2]$/.test(item)) {
            alert(`${item}\n in line ${nr + 1}\n must follow the format <number> <color> <result>\n  where color is one of w,b or _\n  and result is one of 0, 1 or 2`);
            return;
          }
        }
        hash.PLAYERS.push(arr);
      }
    }
    this.players = [];
    this.title = hash.TITLE;
    this.datum = hash.DATE;
    this.round = parseInt(hash.ROUND);
    this.tpp = parseInt(hash.TPP); // Tables Per Page
    this.ppp = parseInt(hash.PPP); // Players Per Page
    this.paused = hash.PAUSED; // list of zero based ids
    players = hash.PLAYERS;
    g.N = players.length;
    if (!((4 <= (ref1 = g.N) && ref1 < 1000))) {
      alert("Number of players must be between 4 and 999!");
      return;
    }
    playersByID = [];
    ref2 = range(g.N);
    for (m = 0, len2 = ref2.length; m < len2; m++) {
      i = ref2[m];
      player = new Player(i);
      player.read(players[i]);
      playersByID.push(player);
    }
    if (this.paused === "") {
      this.paused = [];
    } else {
      this.paused = this.paused.split('!');
      ref3 = this.paused;
      for (o = 0, len3 = ref3.length; o < len3; o++) {
        id = ref3[o];
        if (id !== "") {
          playersByID[id].active = false;
        }
      }
    }
    g.average = 0;
    ref4 = range(g.N);
    for (u = 0, len4 = ref4.length; u < len4; u++) {
      i = ref4[u];
      playersByID[i].elo = parseInt(playersByID[i].elo);
      g.average += playersByID[i].elo;
    }
    g.average /= g.N;
    // console.log 'average',g.average
    playersByID.sort(function(a, b) {
      if (a.elo !== b.elo) {
        return b.elo - a.elo;
      }
      if (a.name > b.name) {
        return 1;
      } else {
        return -1;
      }
    });
    ref5 = range(g.N);
    for (v = 0, len5 = ref5.length; v < len5; v++) {
      i = ref5[v];
      playersByID[i].id = i;
    }
    playersByELO = _.clone(playersByID);
    echo('playersByELO', playersByELO);
    echo('playersByID', playersByID);
    
    // @playersByName = _.sortBy @playersByID, (player) -> player.name
    // echo 'playersByName', @playersByName

    // extract @pairs from the last round
    this.pairs = [];
    for (w = 0, len6 = playersByID.length; w < len6; w++) {
      p = playersByID[w];
      a = p.id;
      b = _.last(p.opp);
      if (a < b) {
        pa = playersByID[a];
        pb = playersByID[b];
        this.pairs.push(1 === _.last(p.col) ? (pa.chair = 2 * this.pairs.length, pb.chair = 2 * this.pairs.length + 1, [a, b]) : (pa.chair = 2 * this.pairs.length + 1, pb.chair = 2 * this.pairs.length, [b, a])); // w
      }
    }
    echo('@pairs', this.pairs);
    // @dump 'fetch'
    return this.virgin = true;
  }

  // g.pages = [new Tables, new Standings]

    // g.pages[g.ACTIVE].setLista()
  // g.pages[g.NAMES].setLista()
  // g.pages[g.TABLES].setLista()
  // g.pages[g.STANDINGS].setLista()

    // g.state = g.TABLES
  ok(a, b) {
    var ref;
    return a.id !== b.id && (ref = a.id, indexOf.call(b.opp, ref) < 0) && Math.abs(a.balans() + b.balans()) <= 2;
  }

  makeEdges(iBye) { // iBye är ett id eller -1
    var a, arr, b, cost, diff, k, l, len, len1, pa, pb;
    arr = [];
    for (k = 0, len = playersByScore.length; k < len; k++) {
      pa = playersByScore[k];
      a = pa.id;
      if (!pa.active || a === iBye) {
        continue;
      }
      for (l = 0, len1 = playersByScore.length; l < len1; l++) {
        pb = playersByScore[l];
        b = pb.id;
        if (a === b) {
          continue;
        }
        if (!pb.active || b === iBye) {
          continue;
        }
        diff = Math.abs(pa.elo - pb.elo);
        cost = 9999 - diff ** 1.01;
        if (a < b) {
          continue;
        }
        if (this.ok(pa, pb)) {
          arr.push([a, b, cost]);
        }
      }
    }
    arr.sort(function(a, b) {
      return b[2] - a[2];
    });
    return arr;
  }

  findSolution(edges) {
    var edmonds;
    edmonds = new Edmonds(edges);
    return edmonds.maxWeightMatching(edges);
  }

  sort() {
    return playersByScore.sort(function(a, b) {
      return b.performance() - a.performance();
    });
  }

  info() {
    return playersByScore[current].info();
  }

  headers(R) {
    var h, i, k, len, ref;
    h = "";
    //h += th "pos",'style="border:none"'
    h += th("id", 'style="border:none"');
    h += th("namn", 'style="border:none"');
    h += th("elo", 'style="border:none"');
    ref = range(R);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      h += th(i + 1, 'style="border:none"');
    }
    h += th("pr", 'style="border:none"');
    h += th("pp", 'style="border:none"');
    h += th("", 'style="border:none"');
    h += th("bf", 'style="border:none"');
    h += th("diff", 'style="border:none"');
    h += th("id:bf", 'style="border:none"');
    return h;
  }

  makeHTML() {
    var R, bf, i, k, l, len, len1, p, q, r, ref, ref1, s, t, ta_center, ta_center_strong, ta_left, ta_right;
    R = playersByScore[0].opp.length;
    echo('makeHTML', R);
    t = "";
    ta_left = "style='text-align:left'";
    ta_right = "style='text-align:right'";
    ta_center = "style='text-align:center'";
    ta_center_strong = "style='text-align:center; font-weight: bold;'";
    ref = range(playersByScore.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      p = playersByScore[i];
      //if i==0 then current = p.id
      s = "";
      //s += td i+1,ta_right # pos
      s += td(p.id + 1, ta_right); // id
      s += td(p.name, ta_left); // namn
      s += td(p.elo); // elo
      ref1 = range(R);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        r = ref1[l];
        s += p.result(r, i); // ronder
      }
      
      // pr
      pr = p.performance();
      s += td(pr.toFixed(1)); //,ta_right
      s += td(p.prettyScore(), ta_right); // pp
      s += td("", 'style="width:5px;border-top:none; border-bottom:none"'); // empty
      
      // s += td p.table + p.prettyCol(R-1)[0] + p.prettyCol2(R-1)[0],ta_center
      // bf
      if (p.table) {
        bf = p.table + {
          l: 'B',
          r: 'W'
        }[p.prettyCol(R - 1)[1]];
      } else {
        bf = "";
      }
      s += td(bf, ta_center_strong);
      // diff
      if (R >= 1) {
        s += td(playersByELO[p.opp[R - 1]].elo - p.elo, ta_right);
      } else {
        s += td("");
      }
      // id:bd
      q = playersByELO[i];
      if (R >= 1) {
        s += td(`${i + 1}:${q.table + {
          l: 'B',
          r: 'W'
        }[q.prettyCol(R - 1)[1]]}`, ta_right);
      } else {
        s += td("");
      }
      // s += td matrix i
      t += tr(s, `tabindex=${i}`);
    }
    t = tr(this.headers(R)) + t;
    return table(t, 'style="border:none"');
  }

  handleCol(pi, pa) {
    var foundDiff, j, k, len, ref;
    if (pi.col.length === 0) {
      pi.col.push(-1);
      return pa.col.push(1);
    } else {
      if (pi.balans() > pa.balans()) {
        pi.col.push(-1);
        return pa.col.push(1);
      } else if (pi.balans() < pa.balans()) {
        pi.col.push(1);
        return pa.col.push(-1); // samma balans
      } else {
        foundDiff = false;
        ref = range(pi.col.length - 1, -1, -1);
        for (k = 0, len = ref.length; k < len; k++) {
          j = ref[k];
          if (pi.col[j] !== pa.col[j]) {
            foundDiff = true;
            pi.col.push(-pi.col[j]);
            pa.col.push(-pa.col[j]);
            break;
          }
        }
        if (!foundDiff) {
          pi.col.push(-1);
          return pa.col.push(1);
        }
      }
    }
  }

  handleRes(pi, pa) {
    var remi, sa, si, z;
    si = "";
    sa = "";
    remi = 0.05;
    // for ppr in range PPR
    z = random();
    if (z < 0.5 - remi) {
      si = "2"; // 2
      sa = "0"; // 0
    } else if (z > 0.5 + remi) {
      si = "0"; // 0 
      sa = "2"; // 2
    } else {
      si = "1"; // 1
      sa = "1"; // 1
    }
    pi.res.push(si);
    return pa.res.push(sa);
  }

  makeOppColRes(pairs, flag) {
    var a, b, bord, k, len, pa, pair, pb, results;
    bord = 0;
    results = [];
    for (k = 0, len = pairs.length; k < len; k++) {
      pair = pairs[k];
      a = pair[0];
      b = pair[1];
      pa = playersByScore[a];
      pb = playersByScore[b];
      bord += 1;
      pa.table = bord;
      pb.table = bord;
      pa.opp.push(b);
      pb.opp.push(a);
      this.handleCol(pa, pb);
      if (flag) {
        results.push(this.handleRes(pa, pb));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};


// add 1598,"AIKIO Onni"
// add 1539,"ANDERSSON Lars Owe"
// add 1532,"ANTONSSON Görgen"
// add 1697,"BJÖRKDAHL Göran"
// add 1598,"ISRAEL Dan"
// add 1825,"JOHANSSON Lennart"
// add 1559,"LEHVONEN Jouko"
// add 1561,"LILJESTRÖM Tor"
// add 1583,"PERSSON Kjell"
// add 1644,"PETTERSSON Lars-Åke"
// add 1684,"SILINS Peteris"
// add 1681,"STOLOV Leonid"
// add 1400,"STRÖMBÄCK Henrik"
// add 1535,"ÅBERG Lars-Erik"
data = `TITLE=Senior Stockholm
DATE=2025-01-19
ROUND=0
TPP=30
PPP=60
PAUSED=

1825!JOHANSSON Lennart
1697!BJÖRKDAHL Göran
1684!SILINS Peteris
1681!STOLOV Leonid
1644!PETTERSSON Lars-Åke
1598!ISRAEL Dan
1598!AIKIO Onni
1583!PERSSON Kjell
1561!LILJESTRÖM Tor
1559!LEHVONEN Jouko
1539!ANDERSSON Lars Owe
1535!ÅBERG Lars-Erik
1532!ANTONSSON Görgen
1400!STRÖMBÄCK Henrik`;

// playersByELO.sort (a,b)-> b.elo - a.elo

// for i in range playersByELO.length
// 	player = playersByELO[i]
// 	player.id = i # zero based internally

// echo playersByELO
tournament = new Tournament("demo", data); // playersByELO

makePairs = function(solution) {
  var j, k, len, ref, res;
  res = [];
  ref = range(solution.length);
  for (k = 0, len = ref.length; k < len; k++) {
    j = ref[k];
    if (j < solution[j]) {
      res.push([j, solution[j]]);
    }
  }
  return res;
};

antal = 4;

ref = range(antal);
for (k = 0, len = ref.length; k < len; k++) {
  i = ref[k];
  solution = tournament.findSolution(tournament.makeEdges(-1));
  arr = makePairs(solution);
  // paret med högst elo sitter på bord 1
  arr.sort(function(a, b) {
    var a0, a1, b0, b1;
    a0 = playersByELO[a[0]].elo;
    a1 = playersByELO[a[1]].elo;
    b0 = playersByELO[b[0]].elo;
    b1 = playersByELO[b[1]].elo;
    return b0 + b1 - a0 - a1;
  });
  tournament.makeOppColRes(arr, i < antal - 1);
}

tournament.sort();

app.innerHTML = tournament.makeHTML();

info.innerHTML = tournament.info();

ref1 = document.querySelectorAll('[tabindex]');
for (l = 0, len1 = ref1.length; l < len1; l++) {
  control = ref1[l];
  control.onkeydown = handleKeyDown;
}

moveFocus(0);

echo(app.innerHTML);

document.addEventListener('DOMContentLoaded', function() {
  // app = document.getElementById 'app'
  return app.onwheel = function(event) {
    var n;
    event.preventDefault();
    n = playersByELO.length - 1;
    if (event.deltaY < 0) {
      if (current > 0) {
        return moveFocus(current - 1);
      }
    } else {
      if (current < n) {
        return moveFocus(current + 1);
      }
    }
  };
});

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\FairPair2\coffee\sketch.coffee