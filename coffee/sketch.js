// Generated by CoffeeScript 2.7.0
  // ½ •
var BYE, FAIRPAIR, KEYWORDS, PAUSE, Page, PageStandings, PageTables, Player, SWISS, Tournament, currentPage, data, echo, findNumberOfDecimals, g, header, inverse, makePairs, matrix, pageStandings, pageTables, playersByID, playersByScore, pr, random, range, seed, span, sum, sumNumbers, table, td, th, tournament, tr, xs,
  indexOf = [].indexOf,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

import {
  Edmonds
} from './blossom.js';

range = _.range;

echo = console.log;

FAIRPAIR = false;

SWISS = true;

BYE = -1;

PAUSE = -2;

KEYWORDS = {};

KEYWORDS.TITLE = 'text';

KEYWORDS.DATE = 'text';

KEYWORDS.ROUND = 'integer';

KEYWORDS.PAUSED = '!-separated integers';

KEYWORDS.TPP = 'integer (Tables Per Page, default: 30)';

KEYWORDS.PPP = 'integer (Players Per Page, default: 60)';

g = {};

// Dessa två listor pekar båda på samma data. De är dock olika sorterade
playersByID = []; // ELO

playersByScore = []; // Performance

tournament = null;

currentPage = null;

span = function(s, attrs = "") {
  return `<span ${attrs}>${s}</span>`;
};

table = function(s, attrs = "") {
  return `<table ${attrs}>\n${s}</table>`;
};

tr = function(s, attrs = "") {
  return `<tr ${attrs}>${s}</tr>\n`;
};

td = function(s, attrs = "") {
  return `<td ${attrs}>${s}</td>`;
};

th = function(s, attrs = "") {
  return `<th ${attrs}>${s}</th>`;
};

seed = 0;

random = function() {
  return (((Math.sin(seed++) / 2 + 0.5) * 10000) % 100) / 100;
};

header = document.getElementById('header');

makePairs = function(solution) {
  var j, k, len, ref, res;
  res = [];
  ref = range(solution.length);
  for (k = 0, len = ref.length; k < len; k++) {
    j = ref[k];
    if (j < solution[j]) {
      res.push([j, solution[j]]);
    }
  }
  return res;
};

findNumberOfDecimals = function(lst) {
  var best, i, ibest, item, k, len, ref, unik;
  best = 0;
  ref = range(6);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    unik = _.uniq((function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = lst.length; l < len1; l++) {
        item = lst[l];
        results.push(item.toFixed(i));
      }
      return results;
    })());
    if (unik.length > best) {
      [best, ibest] = [unik.length, i];
    }
  }
  return ibest;
};

console.assert(0 === findNumberOfDecimals([1234, 1235]));

console.assert(0 === findNumberOfDecimals([1234.146, 1234.146]));

console.assert(0 === findNumberOfDecimals([1235.123, 1236.123]));

console.assert(1 === findNumberOfDecimals([1234, 1234.4]));

console.assert(3 === findNumberOfDecimals([1234.146, 1234.147]));

export var handleFile = function(filename, data) {
  echo('handleFile', filename, data);
  tournament = new Tournament(filename, data);
  return pageStandings.makeHTML();
};

sum = function(s) {
  var item, k, len, res;
  res = 0;
  for (k = 0, len = s.length; k < len; k++) {
    item = s[k];
    res += parseFloat(item);
  }
  return res;
};

sumNumbers = function(arr) {
  var item, k, len, res;
  res = 0;
  for (k = 0, len = arr.length; k < len; k++) {
    item = arr[k];
    res += item;
  }
  return res;
};

inverse = function(s) {
  var ch, k, len, res;
  res = [];
  for (k = 0, len = s.length; k < len; k++) {
    ch = s[k];
    res.push("210"[parseInt(ch)]);
  }
  return res;
};

console.assert(["2", "2"], inverse(["0", "0"]));

console.assert(["1", "1"], inverse(["1", "1"]));

console.assert(["0", "0"], inverse(["2", "2"]));

xs = function(ratings, own_rating) {
  var rating;
  return sumNumbers((function() {
    var k, len, results;
    results = [];
    for (k = 0, len = ratings.length; k < len; k++) {
      rating = ratings[k];
      results.push(1 / (1 + 10 ** ((rating - own_rating) / 400)));
    }
    return results;
  })());
};

pr = function(rs, s, lo = 0, hi = 4000, r = (lo + hi) / 2) {
  if (hi - lo < 0.001) {
    return r;
  } else if (s > xs(rs, r)) {
    return pr(rs, s, r, hi);
  } else {
    return pr(rs, s, lo, r);
  }
};

// echo 'pr', pr [1900,2100], 1
Player = class Player {
  constructor(elo, name, opp1 = [], col1 = [], res1 = []) {
    this.elo = elo;
    this.name = name;
    this.opp = opp1;
    this.col = col1;
    this.res = res1;
    this.active = true;
    this.error = false;
  }

  // @opp är en lista med heltal
  // @col är en lista med -1 och 1
  // @res är en lista med strängar "0", "1" eller "2"
  // ["2","0"]   => 1.0 pp
  check() { // Kontrollerar att resultaten är konsistenta
    var a, b, q, r;
    return true;
    r = this.opp.length - 1;
    if (r === -1) {
      return true;
    }
    q = playersByID[this.opp[r]];
    if (this.res.length - 1 < r) {
      echo(`Resultat saknas för ${this.name}`);
      return false;
    }
    if (q.res.length - 1 < r) {
      echo(`Resultat saknas för ${q.name}`);
      return false;
    }
    a = this.res[r] / 2;
    b = q.res[r] / 2;
    if (a + b === 1) {
      return true;
    }
    echo(`Felaktigt resultat för ${this.name} mot ${q.name}: ${a} - ${b}`);
    return false;
  }

  balans() {
    return sum(this.col);
  }

  read(player) {
    var arr, col, k, len, ocr, ocrs, results;
    this.elo = parseInt(player[0]);
    this.name = player[1];
    this.opp = [];
    this.col = [];
    this.res = [];
    if (player.length < 3) {
      return;
    }
    ocrs = player.slice(2);
    results = [];
    for (k = 0, len = ocrs.length; k < len; k++) {
      ocr = ocrs[k];
      if (indexOf.call(ocr, 'w') >= 0) {
        col = 'w';
      }
      if (indexOf.call(ocr, 'b') >= 0) {
        col = 'b';
      }
      // if '_' in ocr then col='_'
      arr = ocr.split(col);
      this.opp.push(parseInt(arr[0]));
      this.col.push({
        w: 1,
        b: -1
      }[col]);
      if (arr.length === 2 && arr[1].length === 1) {
        results.push(this.res.push(arr[1]));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  write() { // 1234!Christer!12w0!23b1!14w2   Elo:1234 Name:Christer opponent:23 color:b result:1
    var i, ocr, r, res;
    res = [];
    res.push(this.elo);
    res.push(this.name);
    r = this.opp.length;
    if (r === 0) {
      return res.join(SEPARATOR);
    }
    ocr = (function() {
      var k, len, ref, results;
      ref = range(r);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        results.push(`${this.opp[i]}${this.col[i]}${i < r ? this.res[i] : ''}`);
      }
      return results;
    }).call(this);
    res.push(ocr.join(SEPARATOR));
    return res.join(SEPARATOR);
  }

  score() {
    var ch, i, k, l, len, len1, ref, ref1, summa;
    summa = 0;
    if (this.opp.length === 0) {
      return 0;
    }
    ref = range(this.res.length);
    // - 1
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = this.res[i];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        ch = ref1[l];
        summa += parseInt(ch);
      }
    }
    return summa / 2;
  }

  average() {
    var i, k, len, n, opp, p, ref, summa;
    summa = 0;
    n = this.opp.length - 1;
    if (n === -1) {
      return 0;
    }
    ref = range(n);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      opp = this.opp[i];
      p = playersByID[opp];
      summa += p.elo;
    }
    if (n === 0) {
      return 0;
    } else {
      return summa / n;
    }
  }

  prettyScore() {
    return this.score().toFixed(1).replace('.5', '½').replace('.0', '&nbsp;').replace("0½", "½&nbsp;");
  }

  performance_rating(ratings, score) {
    var hi, lo, rating;
    lo = 0;
    hi = 4000;
    while (hi - lo > 0.0000001) {
      rating = (lo + hi) / 2;
      if (score > xs(ratings, rating)) {
        lo = rating;
      } else {
        hi = rating;
      }
    }
    return rating;
  }

  // Använd två extremvärden då man har 0% eller 100%
  extrapolate(a0, b0, elos) {
    var a, b;
    a = this.performance_rating(elos, a0);
    b = this.performance_rating(elos, b0);
    return b + b - a;
  }

  performance() {
    var elos, k, len, n, pp, r, ref;
    pp = this.score();
    elos = [];
    if (this.opp.length === 0) {
      return 0;
    }
    ref = range(this.opp.length - 1);
    for (k = 0, len = ref.length; k < len; k++) {
      r = ref[k];
      // if @opp[r] == BYE then continue
      // if @opp[r] == PAUSE then continue
      elos.push(playersByID[this.opp[r]].elo);
    }
    n = elos.length;
    if (n === 1) {
      if (pp === 0) {
        return this.extrapolate(0.50, 0.25, elos);
      }
      if (pp === n) {
        return this.extrapolate(0.50, 0.75, elos);
      }
    } else {
      if (pp === 0) {
        return this.extrapolate(1, 0.5, elos);
      }
      if (pp === n) {
        return this.extrapolate(n - 1, n - 0.5, elos);
      }
    }
    return this.performance_rating(elos, pp);
  }

  prettyRes(r) {
    var ch;
    if (this.res[r] === void 0) {
      return "";
    }
    return ((function() {
      var k, len, ref, results;
      ref = this.res[r];
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        ch = ref[k];
        results.push("0½1"[ch]);
      }
      return results;
    }).call(this)).join(""); // "12" => "½1"
  }

  prettyCol(r) {
    if (this.col[r] === 1) {
      return "ul";
    } else {
      return "ur"; // 1 => "black"
    }
  }

  prettyCol2(r) {
    if (this.col[r] === 1) {
      return "lr";
    } else {
      return "ll"; // 1 => "white"
    }
  }

  result(r, index) {
    var s, t;
    s = span(this.opp[r] + 1, "class=" + this.prettyCol(r));
    t = span(this.prettyRes(r), "class=" + this.prettyCol2(r));
    return td(s + t);
  }

};

matrix = function(i) {
  var k, len, pi, r, ref, res;
  res = Array(playersByID.length).fill('•');
  res[i] = '*';
  if (i === 0) {
    res[0] = 'H';
  }
  if (i === playersByID.length - 1) {
    res[i] = 'L';
  }
  pi = playersByID[i];
  ref = range(pi.opp.length);
  for (k = 0, len = ref.length; k < len; k++) {
    r = ref[k];
    res[pi.opp[r]] = "123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[r];
  }
  return res.join("   ");
};

Page = class Page {
  constructor() {}

  makeHeader() {
    var isoDate, s;
    isoDate = new Date().toLocaleString('sv-se', {
      hour12: false
    }).replace(',', '');
    s = "";
    s += td(`Rond ${tournament.round}`, 'style="border:none; width:33%; text-align:left"');
    s += td(tournament.title, 'style="border:none; width:33%; text-align:center"');
    s += td(isoDate, 'style="border:none; width:33%; text-align:right"');
    header = document.getElementById('header');
    return header.innerHTML = table(tr(s), 'style="width: 100%; font-weight: bold"');
  }

  moveFocus(next) {
    var focusableArray, n;
    this.current = next;
    focusableArray = document.querySelectorAll('[tabindex]');
    n = focusableArray.length;
    if (this.current <= -1) {
      this.current = 0;
    }
    if (this.current >= n) {
      this.current = n - 1;
    }
    return focusableArray[this.current].focus();
  }

};

PageTables = class PageTables extends Page {
  constructor() {
    super();
    this.app = document.getElementById('app');
    this.klass = 'PageTables';
    this.current = 0;
  }

  headers() {
    var h;
    h = "";
    h += th("b", 'style="border:none"');
    h += th("vit", 'style="border:none"');
    h += th("elo", 'style="border:none"');
    h += th("result", 'style="border:none"');
    h += th("elo", 'style="border:none"');
    h += th("svart", 'style="border:none"');
    h += th("diff", 'style="border:none"');
    return h;
  }

  makeHTML() {
    var R, a, b, i, k, len, p, q, ref, s, t, ta_left, ta_right, totalDiff;
    R = tournament.round; // playersByScore[0].opp.length
    // echo 'PageTables.makeHTML',R
    ta_left = "style='text-align:left'";
    ta_right = "style='text-align:right'";
    t = "";
    totalDiff = 0;
    ref = range(tournament.tables.length);
    // playersByScore.length
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      [a, b] = tournament.tables[i];
      p = playersByID[a];
      q = playersByID[b];
      s = "";
      s += td(i + 1); // id
      s += td(p.name, ta_left); // namn
      s += td(p.elo); // elo
      
      // fyll i senaste resultaten om de finns!
      s += td("&nbsp; - &nbsp;"); // res
      s += td(q.elo); // elo
      s += td(q.name, ta_left); // namn
      s += td(p.elo - q.elo, ta_right); // diff
      totalDiff += Math.abs(p.elo - q.elo);
      t += tr(s, `tabindex=${i}`);
    }
    // for i in range playersByID.length
    // 	echo matrix i

    // echo 'totalDiff',totalDiff
    t = tr(this.headers(R)) + t;
    return this.app.innerHTML = table(t, 'style="border:none"');
  }

  handleKeyDown(event) {
    var cell, index, p, q, r, ref, ref1, ref2, snart, tbl, trans;
    // echo 'handleKeyDown Tables',event.key
    if ((ref = event.key) === 'ArrowLeft' || ref === 'ArrowRight') {
      currentPage = pageStandings;
      currentPage.makeHTML();
      currentPage.moveFocus(currentPage.current);
      return;
    }
    index = event.target.tabIndex;
    if (event.key === 'ArrowDown') {
      currentPage.moveFocus(index + 1);
    }
    if (event.key === 'ArrowUp') {
      currentPage.moveFocus(index - 1);
    }
    if (event.key === 'Home') {
      currentPage.moveFocus(0);
    }
    if (event.key === 'End') {
      currentPage.moveFocus(tournament.tables.length - 1);
    }
    if (event.key === 'Enter') {
      echo('Pair');
      if (tournament.pair()) {
        pageTables.makeHTML();
      }
    }
    if ((ref1 = event.key) === 'Delete' || ref1 === '0' || ref1 === ' ' || ref1 === '1') {
      tbl = tournament.tables[index];
      p = playersByID[tbl[0]];
      q = playersByID[tbl[1]];
      r = p.opp.length - 1;
      cell = event.target.children[3];
      if (event.key === 'Delete') {
        p.res[r] = "";
        q.res[r] = "";
        cell.innerHTML = "&nbsp; - &nbsp;"; // p.result r,index-1
        currentPage.moveFocus(index + 1);
      }
      if (ref2 = event.key, indexOf.call("0 1", ref2) >= 0) {
        trans = {
          "0": "0",
          ' ': "1",
          "1": "2"
        };
        snart = {
          "0": "2",
          ' ': "1",
          "1": "0"
        };
        p.res[r] = trans[event.key];
        q.res[r] = snart[event.key];
        cell.innerHTML = {
          "0": "0 - 1",
          ' ': "½ - ½",
          "1": "1 - 0"
        }[event.key];
        return currentPage.moveFocus(index + 1);
      }
    }
  }

};

PageStandings = class PageStandings extends Page {
  constructor() {
    super();
    this.app = document.getElementById('app');
    this.klass = 'PageStandings';
    this.current = 0;
  }

  headers(R) {
    var h, i, k, len, ref;
    h = "";
    //h += th "pos",'style="border:none"'
    h += th("id", 'style="border:none"');
    h += th("namn", 'style="border:none"');
    h += th("elo", 'style="border:none"');
    ref = range(R);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      h += th(i + 1, 'style="border:none"');
    }
    h += th("pr", 'style="border:none"');
    h += th("pp", 'style="border:none"');
    h += th("bf", 'style="border:none"');
    h += th("*", 'style="border:none"');
    h += th("avg", 'style="border:none"');
    return h;
  }

  makeHTML() {
    var R, bf, decimals, i, k, l, len, len1, p, prs, r, ref, ref1, s, t, ta_center, ta_center_strong, ta_left, ta_right;
    R = tournament.round; // playersByScore[0].opp.length
    // echo 'PageStandings.makeHTML',R
    ta_left = "style='text-align:left'";
    ta_right = "style='text-align:right'";
    ta_center = "style='text-align:center'";
    ta_center_strong = "style='text-align:center; font-weight: bold;'";
    prs = (function() {
      var k, len, results;
      results = [];
      for (k = 0, len = playersByID.length; k < len; k++) {
        p = playersByID[k];
        results.push(p.performance());
      }
      return results;
    })();
    decimals = findNumberOfDecimals(prs);
    t = "";
    ref = range(playersByScore.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      p = playersByScore[i];
      //if i==0 then current = p.id
      s = "";
      //s += td i+1,ta_right # pos
      s += td(p.id + 1, ta_right); // id
      s += td(p.name, ta_left); // namn
      s += td(p.elo); // elo
      ref1 = range(R);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        r = ref1[l];
        s += p.result(r, i); // ronder
      }
      
      // pr
      pr = p.performance();
      if (pr < 3999) {
        s += td(pr.toFixed(decimals)); //,ta_right
      } else {
        s += td("");
      }
      s += td(p.prettyScore(), ta_right); // pp
      
      // s += td "",'style="width:5px;border-top:none; border-bottom:none"' # empty

      // s += td p.table + p.prettyCol(R-1)[0] + p.prettyCol2(R-1)[0],ta_center
      // bf
      if (p.table) {
        bf = p.table + {
          l: 'B',
          r: 'W'
        }[p.prettyCol(R - 1)[1]];
      } else {
        bf = "";
      }
      s += td(bf, ta_center_strong);
      // diff
      // if R >= 1 then s += td playersByID[p.opp[R-1]].elo - p.elo, ta_right else s += td "",ta_right

      // id:bf
      // q = playersByID[i]
      // if R >= 1 then s += td "#{i+1}:#{q.table + {l:'B',r:'W'}[q.prettyCol(R-1)[1]]}" , ta_right else s += td "",ta_right

      // s += td matrix i
      // echo matrix i
      s += td(""); // * (pause)
      s += td(p.average().toFixed(1));
      t += tr(s, `tabindex=${i}`);
    }
    t = tr(this.headers(R)) + t;
    return this.app.innerHTML = table(t, 'style="border:none"');
  }

  handleKeyDown(event) { // Enkelrond
    var cell, dir, i, index, ix, k, key, len, n, p, r, ref, ref1, ref2, results;
    if ((ref = event.key) === ' ' || ref === 'ArrowDown' || ref === 'ArrowUp') {
      event.preventDefault();
    }
    if ((ref1 = event.key) === 'ArrowLeft' || ref1 === 'ArrowRight') {
      currentPage = pageTables;
      currentPage.makeHTML();
      currentPage.moveFocus(currentPage.current);
      return;
    }
    
    // echo 'handleKeyDown Standings',event.key
    if (event === void 0) {
      return;
    }
    index = event.target.tabIndex; // - 1
    p = playersByScore[index];
    r = p.opp.length - 1;
    cell = event.target.children[3 + r];
    if (event.key === 'Enter') {
      if (tournament.pair()) {
        currentPage = pageTables;
        pageTables.makeHTML();
      }
    }
    if (event.key === 'ArrowDown') {
      currentPage.moveFocus(index + 1);
    }
    if (event.key === 'ArrowUp') {
      currentPage.moveFocus(index - 1);
    }
    if (event.key === 'Home') {
      currentPage.moveFocus(0);
    }
    if (event.key === 'End') {
      currentPage.moveFocus(playersByID.length - 1);
    }
    // Sökning
    key = event.key.toUpperCase();
    if (key === event.key) {
      dir = -1;
    } else {
      dir = 1;
    }
    if (indexOf.call("ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ", key) >= 0) {
      index = event.target.tabIndex; // - 1
      n = playersByScore.length;
      ref2 = range(n);
      results = [];
      for (k = 0, len = ref2.length; k < len; k++) {
        i = ref2[k];
        if (dir === 1) {
          ix = (index + i + 1) % n;
        } else {
          ix = modulo(index - i - 1, n);
        }
        p = playersByScore[ix];
        if (p.name.startsWith(key)) {
          currentPage.moveFocus(ix);
          break;
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  }

};

Tournament = class Tournament {
  constructor(filename, data) {
    this.fetchData(filename, data);
    playersByScore = _.clone(playersByID);
    this.tables = [];
    this.round = 0;
    echo('playersByScore', playersByScore);
  }

  pair() {
    var i, k, l, len, len1, p, ref, solution;
    for (k = 0, len = playersByID.length; k < len; k++) {
      p = playersByID[k];
      if (!p.check()) {
        return false;
      }
    }
    solution = this.findSolution(this.makeEdges(-1));
    this.tables = makePairs(solution);
    this.round += 1;
    currentPage.makeHeader();
    echo('tables', this.tables);
    // paret med högst elo sitter på bord 1
    if (FAIRPAIR) {
      this.tables.sort(function(a, b) {
        var a0, a1, b0, b1;
        a0 = playersByID[a[0]].elo;
        a1 = playersByID[a[1]].elo;
        b0 = playersByID[b[0]].elo;
        b1 = playersByID[b[1]].elo;
        return b0 + b1 - a0 - a1;
      });
    }
    if (SWISS) {
      this.tables.sort(function(a, b) {
        var a0, a1, b0, b1;
        a0 = playersByID[a[0]].score();
        a1 = playersByID[a[1]].score();
        b0 = playersByID[b[0]].score();
        b1 = playersByID[b[1]].score();
        return b0 + b1 - a0 - a1;
      });
    }
    this.tables = this.makeOppColRes(this.tables);
    this.sort();
    echo('playersByID', playersByID);
    ref = range(playersByID.length);
    for (l = 0, len1 = ref.length; l < len1; l++) {
      i = ref[l];
      echo(matrix(i));
    }
    currentPage.makeHTML();
    return true;
  }

  fetchData(filename, data) {
    var a, arr, b, hash, helpText, i, id, item, k, key, keyword, l, len, len1, len2, len3, len4, len5, len6, line, m, nr, o, p, pa, pb, player, players, ref, ref1, ref2, ref3, ref4, ref5, u, v, value, w;
    // randomSeed 99
    this.filename = filename.replaceAll(".txt", "");
    data = data.split('\n');
    hash = {};
    // default values
    hash.PLAYERS = [];
    hash.TITLE = '';
    hash.DATE = '';
    hash.ROUND = 0;
    hash.TPP = 30;
    hash.PPP = 60;
    hash.PAUSED = "";
    for (nr = k = 0, len = data.length; k < len; nr = ++k) {
      line = data[nr];
      line = line.trim();
      if (line.length === 0) {
        continue;
      }
      arr = line.split('=');
      if (arr.length === 2) {
        if (!(arr[0] in KEYWORDS)) {
          helpText = ((function() {
            var results;
            results = [];
            for (key in KEYWORDS) {
              value = KEYWORDS[key];
              results.push(`    ${key}: ${value}`);
            }
            return results;
          })()).join('\n');
          keyword = `\"${arr[0]}\"`;
          alert(`${keyword} in line ${nr + 1} is not one of\n${helpText}`);
          return;
        }
        hash[arr[0]] = arr[1];
      } else {
        if (indexOf.call(line, '!') < 0) {
          alert(`${line}\n in line ${nr + 1}\n must look like\n    2882!CARLSEN Magnus or\n    1601!NILSSON Christer!2w0`);
          return;
        }
        arr = line.split('!');
        if (!/^\d{4}$/.test(arr[0])) {
          alert(`${arr[0]}\n in line ${nr + 1}\n must have four digits`);
          return;
        }
        ref = range(2, arr.length);
        for (l = 0, len1 = ref.length; l < len1; l++) {
          i = ref[l];
          item = arr[i];
          if (!/^-?\d+(w|_|b)[0-2]$/.test(item)) {
            alert(`${item}\n in line ${nr + 1}\n must follow the format <number> <color> <result>\n  where color is one of w,b or _\n  and result is one of 0, 1 or 2`);
            return;
          }
        }
        hash.PLAYERS.push(arr);
      }
    }
    this.players = [];
    this.title = hash.TITLE;
    this.datum = hash.DATE;
    this.round = parseInt(hash.ROUND);
    this.tpp = parseInt(hash.TPP); // Tables Per Page
    this.ppp = parseInt(hash.PPP); // Players Per Page
    this.paused = hash.PAUSED; // list of zero based ids
    players = hash.PLAYERS;
    g.N = players.length;
    if (!((4 <= (ref1 = g.N) && ref1 < 100))) {
      alert("Number of players must be between 4 and 99!");
      return;
    }
    playersByID = [];
    ref2 = range(g.N);
    for (m = 0, len2 = ref2.length; m < len2; m++) {
      i = ref2[m];
      player = new Player(i);
      player.read(players[i]);
      playersByID.push(player);
    }
    if (this.paused === "") {
      this.paused = [];
    } else {
      this.paused = this.paused.split('!');
      ref3 = this.paused;
      for (o = 0, len3 = ref3.length; o < len3; o++) {
        id = ref3[o];
        if (id !== "") {
          playersByID[id].active = false;
        }
      }
    }
    g.average = 0;
    ref4 = range(g.N);
    for (u = 0, len4 = ref4.length; u < len4; u++) {
      i = ref4[u];
      playersByID[i].elo = parseInt(playersByID[i].elo);
      g.average += playersByID[i].elo;
    }
    g.average /= g.N;
    playersByID.sort(function(a, b) {
      if (a.elo !== b.elo) {
        return b.elo - a.elo;
      }
      if (a.name > b.name) {
        return 1;
      } else {
        return -1;
      }
    });
    ref5 = range(g.N);
    for (v = 0, len5 = ref5.length; v < len5; v++) {
      i = ref5[v];
      playersByID[i].id = i;
    }
    echo('playersByID', playersByID);
    
    // extract @pairs from the last round
    this.pairs = [];
    for (w = 0, len6 = playersByID.length; w < len6; w++) {
      p = playersByID[w];
      a = p.id;
      b = _.last(p.opp);
      if (a < b) {
        pa = playersByID[a];
        pb = playersByID[b];
        this.pairs.push(1 === _.last(p.col) ? (pa.chair = 2 * this.pairs.length, pb.chair = 2 * this.pairs.length + 1, [a, b]) : (pa.chair = 2 * this.pairs.length + 1, pb.chair = 2 * this.pairs.length, [b, a])); // w
      }
    }
    echo('@pairs', this.pairs);
    // @dump 'fetch'
    return this.virgin = true;
  }

  ok(a, b) {
    var ref;
    return a.id !== b.id && (ref = a.id, indexOf.call(b.opp, ref) < 0) && Math.abs(a.balans() + b.balans()) <= 2;
  }

  makeEdges_FAIRPAIR(iBye) { // iBye är ett id eller -1
    var a, arr, b, cost, diff, k, l, len, len1, pa, pb;
    arr = [];
    for (k = 0, len = playersByScore.length; k < len; k++) {
      pa = playersByScore[k];
      a = pa.id;
      if (!pa.active || a === iBye) {
        continue;
      }
      for (l = 0, len1 = playersByScore.length; l < len1; l++) {
        pb = playersByScore[l];
        b = pb.id;
        if (a === b) {
          continue;
        }
        if (!pb.active || b === iBye) {
          continue;
        }
        diff = Math.abs(pa.elo - pb.elo);
        cost = 9999 - diff ** 1.01;
        if (a < b) {
          continue;
        }
        if (this.ok(pa, pb)) {
          arr.push([a, b, cost]);
        }
      }
    }
    arr.sort(function(a, b) {
      return b[2] - a[2];
    });
    echo('edges', arr);
    return arr;
  }

  makeEdges_SWISS(iBye) { // iBye är ett id eller -1
    var a, arr, b, cost, d0, d1, d2, diff, hashx, i, k, l, len, len1, len2, len3, m, o, p, pa, pb, ref;
    this.sort();
    echo('makeEdges', playersByScore);
    hashx = {};
    ref = range(playersByScore.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      p = playersByScore[i];
      p.rank = i;
      p.group = p.score().toFixed(1);
      if (!(p.group in hashx)) {
        hashx[p.group] = 0;
      }
      hashx[p.group] += 1;
    }
    echo('hashx', hashx);
    for (l = 0, len1 = playersByID.length; l < len1; l++) {
      p = playersByID[l];
      p.groupSize = hashx[p.group];
    }
    echo('playersByScore', playersByScore);
    echo('playersByID', playersByID);
    arr = [];
    for (m = 0, len2 = playersByID.length; m < len2; m++) {
      pa = playersByID[m];
      a = pa.id;
      if (!pa.active || a === iBye) {
        continue;
      }
      for (o = 0, len3 = playersByID.length; o < len3; o++) {
        pb = playersByID[o];
        b = pb.id;
        if (b <= a) {
          continue;
        }
        if (!pb.active || b === iBye) {
          continue;
        }
        if (!this.ok(pa, pb)) {
          continue;
        }
        d0 = Math.abs(pa.score() - pb.score());
        d1 = Math.abs(pa.balans() + pb.balans());
        if (pa.group === pb.group) {
          d2 = Math.abs(pa.groupSize / 2 - Math.abs(pa.rank - pb.rank));
        } else {
          d2 = Math.abs(pa.rank - pb.rank);
        }
        diff = 10000 * d0 + 100 * d1 + d2 ** 1.01;
        echo(`diff för ${a} ${b}: pag=${pa.group} pbg=${pb.group} pags=${pa.groupSize} pbgs=${pb.groupSize}  par=${pa.rank} pbr=${pb.rank} d0=${d0} d1=${d1} d2=${d2} diff=${diff} ${pa.name} vs ${pb.name}`);
        cost = 99999 - diff;
        arr.push([a, b, cost]);
      }
    }
    echo('edges', arr);
    return arr;
  }

  makeEdges(iBye) { // iBye är ett id eller -1
    if (SWISS) {
      return makeEdges_SWISS(iBye);
    }
    if (FAIRPAIR) {
      return makeEdges_FAIRPAIR(iBye);
    }
  }

  findSolution(edges) {
    var edmonds;
    edmonds = new Edmonds(edges);
    return edmonds.maxWeightMatching(edges);
  }

  sort() {
    return playersByScore.sort(function(a, b) {
      if (SWISS) {
        return b.score() - a.score();
      }
      if (FAIRPAIR) {
        return b.performance() - a.performance();
      }
    });
  }

  handleCol(pi, pa, flag) {
    var foundDiff, j, k, len, ref;
    if (pi.col.length === 0) {
      if (flag) {
        pi.col.push(-1);
        return pa.col.push(1);
      } else {
        pi.col.push(1);
        return pa.col.push(-1);
      }
    } else {
      if (pi.balans() > pa.balans()) {
        pi.col.push(-1);
        return pa.col.push(1);
      } else if (pi.balans() < pa.balans()) {
        pi.col.push(1);
        return pa.col.push(-1); // samma balans
      } else {
        foundDiff = false;
        ref = range(pi.col.length - 1, -1, -1);
        for (k = 0, len = ref.length; k < len; k++) {
          j = ref[k];
          if (pi.col[j] !== pa.col[j]) {
            foundDiff = true;
            pi.col.push(-pi.col[j]);
            pa.col.push(-pa.col[j]);
            break;
          }
        }
        if (!foundDiff) {
          if (flag) {
            pi.col.push(-1);
            return pa.col.push(1);
          } else {
            pi.col.push(1);
            return pa.col.push(-1);
          }
        }
      }
    }
  }

  handleRes(pi, pa) {
    var sa, si, z;
    z = random();
    [si, sa] = [1, 1];
    if (z < 0.45) {
      [si, sa] = [2, 0];
    }
    if (z > 0.55) {
      [si, sa] = [0, 2];
    }
    pi.res.push(si.toString());
    return pa.res.push(sa.toString());
  }

  // uppdaterar opp och col
  makeOppColRes(pairs, flag = false) {
    var a, b, bord, k, len, n, pa, pair, pb, res;
    bord = 0;
    res = [];
    for (k = 0, len = pairs.length; k < len; k++) {
      pair = pairs[k];
      a = pair[0];
      b = pair[1];
      pa = playersByID[a];
      pb = playersByID[b];
      bord += 1;
      pa.table = bord;
      pb.table = bord;
      pa.opp.push(b);
      pb.opp.push(a);
      this.handleCol(pa, pb, bord % 2 === 0);
      // vid lika färgvärden, alternera
      n = pa.col.length;
      if (pa.col[n - 1] === 1) {
        res.push([a, b]);
      } else {
        res.push([b, a]);
      }
    }
    return res;
  }

};

data = `TITLE=Senior Stockholm
DATE=2025-01-19
ROUND=0
TPP=30
PPP=60
PAUSED=

1825!JOHANSSON Lennart
1697!BJÖRKDAHL Göran
1684!SILINS Peteris
1681!STOLOV Leonid
1644!PETTERSSON Lars-Åke
1598!ISRAEL Dan
1598!AIKIO Onni
1583!PERSSON Kjell
1561!LILJESTRÖM Tor
1559!LEHVONEN Jouko
1539!ANDERSSON Lars Owe
1535!ÅBERG Lars-Erik
1532!ANTONSSON Görgen
1400!STRÖMBÄCK Henrik`;

pageStandings = new PageStandings();

pageTables = new PageTables();

tournament = new Tournament("demo", data);

currentPage = pageStandings;

currentPage.makeHeader();

currentPage.makeHTML();

currentPage.moveFocus(0);

window.addEventListener('keydown', function(event) {
  // echo 'keydown',currentPage.klass
  return currentPage.handleKeyDown(event);
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uXFwiLCJzb3VyY2VzIjpbImNvZmZlZVxcc2tldGNoLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUs7QUFBQSxJQUFBLEdBQUEsRUFBQSxRQUFBLEVBQUEsUUFBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsYUFBQSxFQUFBLFVBQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLFVBQUEsRUFBQSxXQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxvQkFBQSxFQUFBLENBQUEsRUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBLFNBQUEsRUFBQSxNQUFBLEVBQUEsYUFBQSxFQUFBLFVBQUEsRUFBQSxXQUFBLEVBQUEsY0FBQSxFQUFBLEVBQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLFVBQUEsRUFBQSxLQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxVQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUE7RUFBQTs7O0FBRUwsT0FBQTtFQUFTLE9BQVQ7Q0FBQSxNQUFBOztBQUVBLEtBQUEsR0FBUSxDQUFDLENBQUM7O0FBQ1YsSUFBQSxHQUFPLE9BQU8sQ0FBQzs7QUFFZixRQUFBLEdBQVc7O0FBQ1gsS0FBQSxHQUFROztBQUVSLEdBQUEsR0FBTSxDQUFDOztBQUNQLEtBQUEsR0FBUSxDQUFDOztBQUVULFFBQUEsR0FBVyxDQUFBOztBQUNYLFFBQVEsQ0FBQyxLQUFULEdBQWlCOztBQUNqQixRQUFRLENBQUMsSUFBVCxHQUFnQjs7QUFDaEIsUUFBUSxDQUFDLEtBQVQsR0FBaUI7O0FBQ2pCLFFBQVEsQ0FBQyxNQUFULEdBQWtCOztBQUNsQixRQUFRLENBQUMsR0FBVCxHQUFlOztBQUNmLFFBQVEsQ0FBQyxHQUFULEdBQWU7O0FBRWYsQ0FBQSxHQUFJLENBQUEsRUFyQkM7OztBQXdCTCxXQUFBLEdBQWMsR0F4QlQ7O0FBeUJMLGNBQUEsR0FBaUIs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QUFELEVBQUcsQ0FBSCxDQUFULEVBSEQ7O0lBbEJEO1dBc0JBO0VBekJlOztBQS9RakI7O0FBMFNBLElBQUEsR0FBTyxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxQkFBQTs7QUF3QlAsYUFBQSxHQUFnQixJQUFJLGFBQUosQ0FBQTs7QUFDaEIsVUFBQSxHQUFhLElBQUksVUFBSixDQUFBOztBQUViLFVBQUEsR0FBYSxJQUFJLFVBQUosQ0FBZSxNQUFmLEVBQXVCLElBQXZCOztBQUNiLFdBQUEsR0FBYzs7QUFDZCxXQUFXLENBQUMsVUFBWixDQUFBOztBQUNBLFdBQVcsQ0FBQyxRQUFaLENBQUE7O0FBRUEsV0FBVyxDQUFDLFNBQVosQ0FBc0IsQ0FBdEI7O0FBRUEsTUFBTSxDQUFDLGdCQUFQLENBQXdCLFNBQXhCLEVBQW1DLFFBQUEsQ0FBQyxLQUFELENBQUEsRUFBQTs7U0FFbEMsV0FBVyxDQUFDLGFBQVosQ0FBMEIsS0FBMUI7QUFGa0MsQ0FBbkMiLCJzb3VyY2VzQ29udGVudCI6WyIjIMK9IOKAolxyXG5cclxuaW1wb3J0IHsgRWRtb25kcyB9IGZyb20gJy4vYmxvc3NvbS5qcycgXHJcblxyXG5yYW5nZSA9IF8ucmFuZ2VcclxuZWNobyA9IGNvbnNvbGUubG9nXHJcblxyXG5GQUlSUEFJUiA9IGZhbHNlXHJcblNXSVNTID0gdHJ1ZVxyXG5cclxuQllFID0gLTFcclxuUEFVU0UgPSAtMlxyXG5cclxuS0VZV09SRFMgPSB7fVxyXG5LRVlXT1JEUy5USVRMRSA9ICd0ZXh0J1xyXG5LRVlXT1JEUy5EQVRFID0gJ3RleHQnXHJcbktFWVdPUkRTLlJPVU5EID0gJ2ludGVnZXInXHJcbktFWVdPUkRTLlBBVVNFRCA9ICchLXNlcGFyYXRlZCBpbnRlZ2VycydcclxuS0VZV09SRFMuVFBQID0gJ2ludGVnZXIgKFRhYmxlcyBQZXIgUGFnZSwgZGVmYXVsdDogMzApJ1xyXG5LRVlXT1JEUy5QUFAgPSAnaW50ZWdlciAoUGxheWVycyBQZXIgUGFnZSwgZGVmYXVsdDogNjApJ1xyXG5cclxuZyA9IHt9XHJcblxyXG4jIERlc3NhIHR2w6UgbGlzdG9yIHBla2FyIGLDpWRhIHDDpSBzYW1tYSBkYXRhLiBEZSDDpHIgZG9jayBvbGlrYSBzb3J0ZXJhZGVcclxucGxheWVyc0J5SUQgPSBbXSAgICAjIEVMT1xyXG5wbGF5ZXJzQnlTY29yZSA9IFtdICMgUGVyZm9ybWFuY2VcclxuXHJcbnRvdXJuYW1lbnQgPSBudWxsXHJcblxyXG5jdXJyZW50UGFnZSA9IG51bGxcclxuXHJcbnNwYW4gID0gKHMsYXR0cnM9XCJcIikgLT4gXCI8c3BhbiAje2F0dHJzfT4je3N9PC9zcGFuPlwiXHJcbnRhYmxlID0gKHMsYXR0cnM9XCJcIikgLT4gXCI8dGFibGUgI3thdHRyc30+XFxuI3tzfTwvdGFibGU+XCJcclxudHIgICAgPSAocyxhdHRycz1cIlwiKSAtPiBcIjx0ciAje2F0dHJzfT4je3N9PC90cj5cXG5cIlxyXG50ZCAgICA9IChzLGF0dHJzPVwiXCIpIC0+IFwiPHRkICN7YXR0cnN9PiN7c308L3RkPlwiXHJcbnRoICAgID0gKHMsYXR0cnM9XCJcIikgLT4gXCI8dGggI3thdHRyc30+I3tzfTwvdGg+XCJcclxuXHJcbnNlZWQgPSAwXHJcbnJhbmRvbSA9IC0+ICgoKE1hdGguc2luKHNlZWQrKykvMiswLjUpKjEwMDAwKSUxMDApLzEwMFxyXG5cclxuaGVhZGVyICAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQgJ2hlYWRlcidcclxuXHJcbm1ha2VQYWlycyA9IChzb2x1dGlvbikgLT5cclxuXHRyZXMgPSBbXVxyXG5cdGZvciBqIGluIHJhbmdlIHNvbHV0aW9uLmxlbmd0aFxyXG5cdFx0aWYgaiA8IHNvbHV0aW9uW2pdIHRoZW4gcmVzLnB1c2ggW2osc29sdXRpb25bal1dXHJcblx0cmVzXHJcblxyXG5maW5kTnVtYmVyT2ZEZWNpbWFscyA9IChsc3QpIC0+XHJcblx0YmVzdCA9IDBcclxuXHRmb3IgaSBpbiByYW5nZSA2XHJcblx0XHR1bmlrID0gXy51bmlxIChpdGVtLnRvRml4ZWQoaSkgZm9yIGl0ZW0gaW4gbHN0KVxyXG5cdFx0aWYgdW5pay5sZW5ndGggPiBiZXN0IHRoZW4gW2Jlc3QsaWJlc3RdID0gW3VuaWsubGVuZ3RoLGldXHJcblx0aWJlc3RcclxuY29uc29sZS5hc3NlcnQgMCA9PSBmaW5kTnVtYmVyT2ZEZWNpbWFscyBbMTIzNCwxMjM1XVxyXG5jb25zb2xlLmFzc2VydCAwID09IGZpbmROdW1iZXJPZkRlY2ltYWxzIFsxMjM0LjE0NiwxMjM0LjE0Nl1cclxuY29uc29sZS5hc3NlcnQgMCA9PSBmaW5kTnVtYmVyT2ZEZWNpbWFscyBbMTIzNS4xMjMsMTIzNi4xMjNdXHJcbmNvbnNvbGUuYXNzZXJ0IDEgPT0gZmluZE51bWJlck9mRGVjaW1hbHMgWzEyMzQsMTIzNC40XVxyXG5jb25zb2xlLmFzc2VydCAzID09IGZpbmROdW1iZXJPZkRlY2ltYWxzIFsxMjM0LjE0NiwxMjM0LjE0N11cclxuXHJcbmV4cG9ydCBoYW5kbGVGaWxlID0gKGZpbGVuYW1lLGRhdGEpIC0+XHJcblx0ZWNobyAnaGFuZGxlRmlsZScsZmlsZW5hbWUsZGF0YVxyXG5cdHRvdXJuYW1lbnQgPSBuZXcgVG91cm5hbWVudCBmaWxlbmFtZSxkYXRhXHJcblx0cGFnZVN0YW5kaW5ncy5tYWtlSFRNTCgpXHJcblxyXG5zdW0gPSAocykgLT5cclxuXHRyZXMgPSAwXHJcblx0Zm9yIGl0ZW0gaW4gc1xyXG5cdFx0cmVzICs9IHBhcnNlRmxvYXQgaXRlbVxyXG5cdHJlc1xyXG5cclxuc3VtTnVtYmVycyA9IChhcnIpIC0+XHJcblx0cmVzID0gMFxyXG5cdGZvciBpdGVtIGluIGFyclxyXG5cdFx0cmVzICs9IGl0ZW1cclxuXHRyZXNcclxuXHJcbmludmVyc2UgPSAocykgLT4gXHJcblx0cmVzID0gW11cclxuXHRmb3IgY2ggaW4gc1xyXG5cdFx0cmVzLnB1c2ggXCIyMTBcIltwYXJzZUludCBjaF1cclxuXHRyZXNcclxuY29uc29sZS5hc3NlcnQgW1wiMlwiLFwiMlwiXSwgaW52ZXJzZSBbXCIwXCIsXCIwXCJdXHJcbmNvbnNvbGUuYXNzZXJ0IFtcIjFcIixcIjFcIl0sIGludmVyc2UgW1wiMVwiLFwiMVwiXVxyXG5jb25zb2xlLmFzc2VydCBbXCIwXCIsXCIwXCJdLCBpbnZlcnNlIFtcIjJcIixcIjJcIl1cclxuXHJcbnhzID0gKHJhdGluZ3MsIG93bl9yYXRpbmcpIC0+IHN1bU51bWJlcnMoMSAvICgxICsgMTAqKigocmF0aW5nIC0gb3duX3JhdGluZykgLyA0MDApKSBmb3IgcmF0aW5nIGluIHJhdGluZ3MpXHJcblxyXG5wciA9IChycywgcywgbG89MCwgaGk9NDAwMCwgcj0obG8raGkpLzIpIC0+IGlmIGhpIC0gbG8gPCAwLjAwMSB0aGVuIHIgZWxzZSBpZiBzID4geHMgcnMsIHIgdGhlbiBwciBycywgcywgciwgaGkgZWxzZSBwciBycywgcywgbG8sIHJcclxuIyBlY2hvICdwcicsIHByIFsxOTAwLDIxMDBdLCAxXHJcblxyXG5jbGFzcyBQbGF5ZXJcclxuXHRjb25zdHJ1Y3RvciA6IChAZWxvLCBAbmFtZSwgQG9wcD1bXSwgQGNvbD1bXSwgQHJlcz1bXSkgLT5cclxuXHRcdEBhY3RpdmUgPSB0cnVlXHJcblx0XHRAZXJyb3IgPSBmYWxzZVxyXG5cdFx0IyBAb3BwIMOkciBlbiBsaXN0YSBtZWQgaGVsdGFsXHJcblx0XHQjIEBjb2wgw6RyIGVuIGxpc3RhIG1lZCAtMSBvY2ggMVxyXG5cdFx0IyBAcmVzIMOkciBlbiBsaXN0YSBtZWQgc3Ryw6RuZ2FyIFwiMFwiLCBcIjFcIiBlbGxlciBcIjJcIlxyXG5cdFx0IyBbXCIyXCIsXCIwXCJdICAgPT4gMS4wIHBwXHJcblxyXG5cdGNoZWNrIDogLT4gIyBLb250cm9sbGVyYXIgYXR0IHJlc3VsdGF0ZW4gw6RyIGtvbnNpc3RlbnRhXHJcblx0XHRyZXR1cm4gdHJ1ZVxyXG5cdFx0ciA9IEBvcHAubGVuZ3RoIC0gMVxyXG5cdFx0aWYgciA9PSAtMSB0aGVuIHJldHVybiB0cnVlXHJcblx0XHRxID0gcGxheWVyc0J5SURbQG9wcFtyXV1cclxuXHRcdGlmIEByZXMubGVuZ3RoLTEgPCByIFxyXG5cdFx0XHRlY2hvIFwiUmVzdWx0YXQgc2FrbmFzIGbDtnIgI3tAbmFtZX1cIlxyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHRcdGlmIHEucmVzLmxlbmd0aC0xIDwgciBcclxuXHRcdFx0ZWNobyBcIlJlc3VsdGF0IHNha25hcyBmw7ZyICN7cS5uYW1lfVwiXHJcblx0XHRcdHJldHVybiBmYWxzZVxyXG5cdFx0YSA9IEByZXNbcl0gLyAyXHJcblx0XHRiID0gcS5yZXNbcl0gLyAyXHJcblx0XHRpZiBhICsgYiA9PSAxIHRoZW4gcmV0dXJuIHRydWVcclxuXHRcdGVjaG8gXCJGZWxha3RpZ3QgcmVzdWx0YXQgZsO2ciAje0BuYW1lfSBtb3QgI3txLm5hbWV9OiAje2F9IC0gI3tifVwiXHJcblx0XHRmYWxzZVxyXG5cclxuXHRiYWxhbnMgOiAtPiBzdW0gQGNvbFxyXG5cclxuXHRyZWFkIDogKHBsYXllcikgLT5cclxuXHRcdEBlbG8gPSBwYXJzZUludCBwbGF5ZXJbMF1cclxuXHRcdEBuYW1lID0gcGxheWVyWzFdXHJcblx0XHRAb3BwID0gW11cclxuXHRcdEBjb2wgPSBbXVxyXG5cdFx0QHJlcyA9IFtdXHJcblx0XHRpZiBwbGF5ZXIubGVuZ3RoIDwgMyB0aGVuIHJldHVyblxyXG5cdFx0b2NycyA9IHBsYXllci5zbGljZSAyXHJcblx0XHRmb3Igb2NyIGluIG9jcnNcclxuXHRcdFx0aWYgJ3cnIGluIG9jciB0aGVuIGNvbD0ndydcclxuXHRcdFx0aWYgJ2InIGluIG9jciB0aGVuIGNvbD0nYidcclxuXHRcdFx0IyBpZiAnXycgaW4gb2NyIHRoZW4gY29sPSdfJ1xyXG5cdFx0XHRhcnIgPSBvY3Iuc3BsaXQgY29sXHJcblx0XHRcdEBvcHAucHVzaCBwYXJzZUludCBhcnJbMF1cclxuXHRcdFx0QGNvbC5wdXNoIHt3OjEsIGI6LTF9W2NvbF1cclxuXHRcdFx0aWYgYXJyLmxlbmd0aCA9PSAyIGFuZCBhcnJbMV0ubGVuZ3RoID09IDEgdGhlbiBAcmVzLnB1c2ggYXJyWzFdXHJcblxyXG5cdHdyaXRlIDogLT4gIyAxMjM0IUNocmlzdGVyITEydzAhMjNiMSExNHcyICAgRWxvOjEyMzQgTmFtZTpDaHJpc3RlciBvcHBvbmVudDoyMyBjb2xvcjpiIHJlc3VsdDoxXHJcblx0XHRyZXMgPSBbXVxyXG5cdFx0cmVzLnB1c2ggQGVsb1xyXG5cdFx0cmVzLnB1c2ggQG5hbWVcclxuXHRcdHIgPSBAb3BwLmxlbmd0aFxyXG5cdFx0aWYgciA9PSAwIHRoZW4gcmV0dXJuIHJlcy5qb2luIFNFUEFSQVRPUlxyXG5cdFx0b2NyID0gKFwiI3tAb3BwW2ldfSN7QGNvbFtpXX0je2lmIGkgPCByIHRoZW4gQHJlc1tpXSBlbHNlICcnfVwiIGZvciBpIGluIHJhbmdlIHIpXHJcblx0XHRyZXMucHVzaCBvY3Iuam9pbiBTRVBBUkFUT1JcclxuXHRcdHJlcy5qb2luIFNFUEFSQVRPUlxyXG5cclxuXHRzY29yZSA6IC0+XHJcblx0XHRzdW1tYSA9IDBcclxuXHRcdGlmIEBvcHAubGVuZ3RoID09IDAgdGhlbiByZXR1cm4gMFxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgQHJlcy5sZW5ndGggIyAtIDFcclxuXHRcdFx0Zm9yIGNoIGluIEByZXNbaV1cclxuXHRcdFx0XHRzdW1tYSArPSBwYXJzZUludCBjaFxyXG5cdFx0c3VtbWEvMlxyXG5cclxuXHRhdmVyYWdlIDogLT5cclxuXHRcdHN1bW1hID0gMFxyXG5cdFx0biA9IEBvcHAubGVuZ3RoIC0gMVxyXG5cdFx0aWYgbiA9PSAtMSB0aGVuIHJldHVybiAwXHJcblx0XHRmb3IgaSBpbiByYW5nZSBuXHJcblx0XHRcdG9wcCA9IEBvcHBbaV1cclxuXHRcdFx0cCA9IHBsYXllcnNCeUlEW29wcF1cclxuXHRcdFx0c3VtbWEgKz0gcC5lbG9cclxuXHRcdGlmIG49PTAgdGhlbiAwIGVsc2Ugc3VtbWEvblxyXG5cclxuXHRwcmV0dHlTY29yZSA6IC0+XHJcblx0XHRAc2NvcmUoKS50b0ZpeGVkKDEpLnJlcGxhY2UoJy41Jywnwr0nKS5yZXBsYWNlKCcuMCcsJyZuYnNwOycpLnJlcGxhY2UoXCIwwr1cIixcIsK9Jm5ic3A7XCIpXHJcblxyXG5cdHBlcmZvcm1hbmNlX3JhdGluZyA6IChyYXRpbmdzLCBzY29yZSkgLT5cclxuXHRcdGxvID0gMFxyXG5cdFx0aGkgPSA0MDAwXHJcblx0XHR3aGlsZSBoaSAtIGxvID4gMC4wMDAwMDAxXHJcblx0XHRcdHJhdGluZyA9IChsbyArIGhpKSAvIDJcclxuXHRcdFx0aWYgc2NvcmUgPiB4cyByYXRpbmdzLCByYXRpbmdcclxuXHRcdFx0XHRsbyA9IHJhdGluZ1xyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0aGkgPSByYXRpbmdcclxuXHRcdHJhdGluZ1xyXG5cclxuXHQjIEFudsOkbmQgdHbDpSBleHRyZW12w6RyZGVuIGTDpSBtYW4gaGFyIDAlIGVsbGVyIDEwMCVcclxuXHRleHRyYXBvbGF0ZSA6IChhMCwgYjAsIGVsb3MpIC0+XHJcblx0XHRhID0gQHBlcmZvcm1hbmNlX3JhdGluZyBlbG9zLGEwXHJcblx0XHRiID0gQHBlcmZvcm1hbmNlX3JhdGluZyBlbG9zLGIwXHJcblx0XHRiICsgYiAtIGFcclxuXHJcblx0cGVyZm9ybWFuY2UgOiAtPlxyXG5cdFx0cHAgPSBAc2NvcmUoKVxyXG5cdFx0ZWxvcyA9IFtdXHJcblx0XHRpZiBAb3BwLmxlbmd0aCA9PSAwIHRoZW4gcmV0dXJuIDBcclxuXHRcdGZvciByIGluIHJhbmdlIEBvcHAubGVuZ3RoIC0gMVxyXG5cdFx0XHQjIGlmIEBvcHBbcl0gPT0gQllFIHRoZW4gY29udGludWVcclxuXHRcdFx0IyBpZiBAb3BwW3JdID09IFBBVVNFIHRoZW4gY29udGludWVcclxuXHRcdFx0ZWxvcy5wdXNoIHBsYXllcnNCeUlEW0BvcHBbcl1dLmVsb1xyXG5cclxuXHRcdG4gPSBlbG9zLmxlbmd0aFxyXG5cdFx0aWYgbiA9PSAxXHJcblx0XHRcdGlmIHBwID09IDAgdGhlbiByZXR1cm4gQGV4dHJhcG9sYXRlIDAuNTAsMC4yNSxlbG9zXHJcblx0XHRcdGlmIHBwID09IG4gdGhlbiByZXR1cm4gQGV4dHJhcG9sYXRlIDAuNTAsMC43NSxlbG9zXHJcblx0XHRlbHNlXHJcblx0XHRcdGlmIHBwID09IDAgdGhlbiByZXR1cm4gQGV4dHJhcG9sYXRlICAgMSwgIDAuNSxlbG9zXHJcblx0XHRcdGlmIHBwID09IG4gdGhlbiByZXR1cm4gQGV4dHJhcG9sYXRlIG4tMSxuLTAuNSxlbG9zXHJcblxyXG5cdFx0QHBlcmZvcm1hbmNlX3JhdGluZyBlbG9zLHBwXHJcblxyXG5cdHByZXR0eVJlcyA6IChyKSAtPiBcclxuXHRcdGlmIEByZXNbcl0gaXMgdW5kZWZpbmVkIHRoZW4gcmV0dXJuIFwiXCJcclxuXHRcdChcIjDCvTFcIltjaF0gZm9yIGNoIGluIEByZXNbcl0pLmpvaW4gXCJcIiAjIFwiMTJcIiA9PiBcIsK9MVwiXHJcblxyXG5cdHByZXR0eUNvbCA6IChyKSAtPiBpZiBAY29sW3JdPT0xIHRoZW4gXCJ1bFwiIGVsc2UgXCJ1clwiICAjIDEgPT4gXCJibGFja1wiXHJcblx0cHJldHR5Q29sMjogKHIpIC0+IGlmIEBjb2xbcl09PTEgdGhlbiBcImxyXCIgZWxzZSBcImxsXCIgICMgMSA9PiBcIndoaXRlXCJcclxuXHJcblx0cmVzdWx0OiAocixpbmRleCkgLT5cclxuXHRcdHMgPSBzcGFuIEBvcHBbcl0rMSwgXCJjbGFzcz1cIiArIEBwcmV0dHlDb2wgclxyXG5cdFx0dCA9IHNwYW4gQHByZXR0eVJlcyhyKSwgXCJjbGFzcz1cIiArIEBwcmV0dHlDb2wyIHJcclxuXHRcdHRkIHMgKyB0XHJcblxyXG5tYXRyaXggPSAoaSkgLT5cclxuXHRyZXMgPSBBcnJheShwbGF5ZXJzQnlJRC5sZW5ndGgpLmZpbGwoJ+KAoicpIFxyXG5cdHJlc1tpXSA9ICcqJ1xyXG5cdGlmIGkgPT0gMCB0aGVuIHJlc1swXT0nSCdcclxuXHRpZiBpID09IHBsYXllcnNCeUlELmxlbmd0aC0xIHRoZW4gcmVzW2ldPSdMJ1xyXG5cdHBpID0gcGxheWVyc0J5SURbaV1cclxuXHRmb3IgciBpbiByYW5nZSBwaS5vcHAubGVuZ3RoXHJcblx0XHRyZXNbcGkub3BwW3JdXSA9IFwiMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpcIltyXVxyXG5cdHJlcy5qb2luIFwiICAgXCJcclxuXHJcbmNsYXNzIFBhZ2UgXHJcblx0Y29uc3RydWN0b3IgOiAtPlxyXG5cdG1ha2VIZWFkZXIgOiAtPlxyXG5cdFx0aXNvRGF0ZSA9IG5ldyBEYXRlKCkudG9Mb2NhbGVTdHJpbmcoJ3N2LXNlJyx7aG91cjEyOmZhbHNlfSkucmVwbGFjZSgnLCcsJycpXHJcblx0XHRzID0gXCJcIlxyXG5cdFx0cyArPSB0ZCBcIlJvbmQgI3t0b3VybmFtZW50LnJvdW5kfVwiLCAnc3R5bGU9XCJib3JkZXI6bm9uZTsgd2lkdGg6MzMlOyB0ZXh0LWFsaWduOmxlZnRcIidcclxuXHRcdHMgKz0gdGQgdG91cm5hbWVudC50aXRsZSwgICAgICAgICAgICdzdHlsZT1cImJvcmRlcjpub25lOyB3aWR0aDozMyU7IHRleHQtYWxpZ246Y2VudGVyXCInXHJcblx0XHRzICs9IHRkIGlzb0RhdGUsICAgICAgICAgICAgICAgICAgICAnc3R5bGU9XCJib3JkZXI6bm9uZTsgd2lkdGg6MzMlOyB0ZXh0LWFsaWduOnJpZ2h0XCInXHJcblx0XHRoZWFkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCAnaGVhZGVyJ1xyXG5cdFx0aGVhZGVyLmlubmVySFRNTCA9IHRhYmxlIHRyKHMpLCAnc3R5bGU9XCJ3aWR0aDogMTAwJTsgZm9udC13ZWlnaHQ6IGJvbGRcIidcclxuXHRtb3ZlRm9jdXMgOiAobmV4dCkgLT5cclxuXHRcdEBjdXJyZW50ID0gbmV4dFxyXG5cdFx0Zm9jdXNhYmxlQXJyYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbdGFiaW5kZXhdJylcclxuXHRcdG4gPSBmb2N1c2FibGVBcnJheS5sZW5ndGhcclxuXHRcdGlmIEBjdXJyZW50IDw9IC0xIHRoZW4gQGN1cnJlbnQgPSAwXHJcblx0XHRpZiBAY3VycmVudCA+PSBuIHRoZW4gQGN1cnJlbnQgPSBuIC0gMVxyXG5cdFx0Zm9jdXNhYmxlQXJyYXlbQGN1cnJlbnRdLmZvY3VzKClcclxuXHJcbmNsYXNzIFBhZ2VUYWJsZXMgZXh0ZW5kcyBQYWdlXHJcblx0Y29uc3RydWN0b3IgOiAtPiBcclxuXHRcdHN1cGVyKClcclxuXHRcdEBhcHAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCAnYXBwJ1xyXG5cdFx0QGtsYXNzID0gJ1BhZ2VUYWJsZXMnXHJcblx0XHRAY3VycmVudCA9IDAgXHJcblxyXG5cdGhlYWRlcnMgOiAtPlxyXG5cdFx0aCA9IFwiXCJcclxuXHRcdGggKz0gdGggXCJiXCIsICAgICdzdHlsZT1cImJvcmRlcjpub25lXCInXHJcblx0XHRoICs9IHRoIFwidml0XCIsICAnc3R5bGU9XCJib3JkZXI6bm9uZVwiJ1xyXG5cdFx0aCArPSB0aCBcImVsb1wiLCAgJ3N0eWxlPVwiYm9yZGVyOm5vbmVcIidcclxuXHRcdGggKz0gdGggXCJyZXN1bHRcIiwnc3R5bGU9XCJib3JkZXI6bm9uZVwiJ1xyXG5cdFx0aCArPSB0aCBcImVsb1wiLCAgJ3N0eWxlPVwiYm9yZGVyOm5vbmVcIidcclxuXHRcdGggKz0gdGggXCJzdmFydFwiLCdzdHlsZT1cImJvcmRlcjpub25lXCInXHJcblx0XHRoICs9IHRoIFwiZGlmZlwiLCAnc3R5bGU9XCJib3JkZXI6bm9uZVwiJ1xyXG5cdFx0aFxyXG5cclxuXHRtYWtlSFRNTCA6IC0+XHJcblx0XHRSID0gdG91cm5hbWVudC5yb3VuZCAjIHBsYXllcnNCeVNjb3JlWzBdLm9wcC5sZW5ndGhcclxuXHRcdCMgZWNobyAnUGFnZVRhYmxlcy5tYWtlSFRNTCcsUlxyXG5cdFx0dGFfbGVmdCAgID0gXCJzdHlsZT0ndGV4dC1hbGlnbjpsZWZ0J1wiXHJcblx0XHR0YV9yaWdodCAgPSBcInN0eWxlPSd0ZXh0LWFsaWduOnJpZ2h0J1wiXHJcblx0XHR0ID0gXCJcIlxyXG5cclxuXHRcdHRvdGFsRGlmZiA9IDBcclxuXHJcblx0XHRmb3IgaSBpbiByYW5nZSB0b3VybmFtZW50LnRhYmxlcy5sZW5ndGggIyBwbGF5ZXJzQnlTY29yZS5sZW5ndGhcclxuXHRcdFx0W2EsYl0gPSB0b3VybmFtZW50LnRhYmxlc1tpXVxyXG5cdFx0XHRwID0gcGxheWVyc0J5SURbYV1cclxuXHRcdFx0cSA9IHBsYXllcnNCeUlEW2JdXHJcblx0XHRcdHMgPSBcIlwiXHJcblxyXG5cdFx0XHRzICs9IHRkIGkrMSAjIGlkXHJcblx0XHRcdHMgKz0gdGQgcC5uYW1lLHRhX2xlZnQgIyBuYW1uXHJcblx0XHRcdHMgKz0gdGQgcC5lbG8gIyBlbG9cclxuXHJcblx0XHRcdCMgZnlsbCBpIHNlbmFzdGUgcmVzdWx0YXRlbiBvbSBkZSBmaW5ucyFcclxuXHRcdFx0cyArPSB0ZCBcIiZuYnNwOyAtICZuYnNwO1wiICMgcmVzXHJcblxyXG5cdFx0XHRzICs9IHRkIHEuZWxvICMgZWxvXHJcblx0XHRcdHMgKz0gdGQgcS5uYW1lLHRhX2xlZnQgIyBuYW1uXHJcblx0XHRcdHMgKz0gdGQgcC5lbG8gLSBxLmVsbywgdGFfcmlnaHQgIyBkaWZmXHJcblx0XHRcdHRvdGFsRGlmZiArPSBNYXRoLmFicyBwLmVsbyAtIHEuZWxvXHJcblxyXG5cdFx0XHR0ICs9IHRyIHMsIFwidGFiaW5kZXg9I3tpfVwiXHJcblxyXG5cdFx0IyBmb3IgaSBpbiByYW5nZSBwbGF5ZXJzQnlJRC5sZW5ndGhcclxuXHRcdCMgXHRlY2hvIG1hdHJpeCBpXHJcblxyXG5cdFx0IyBlY2hvICd0b3RhbERpZmYnLHRvdGFsRGlmZlxyXG5cdFx0dCA9IHRyKEBoZWFkZXJzKFIpKSArIHRcclxuXHRcdEBhcHAuaW5uZXJIVE1MID0gdGFibGUgdCwnc3R5bGU9XCJib3JkZXI6bm9uZVwiJ1xyXG5cclxuXHRoYW5kbGVLZXlEb3duIDogKGV2ZW50KSAtPlxyXG5cdFx0IyBlY2hvICdoYW5kbGVLZXlEb3duIFRhYmxlcycsZXZlbnQua2V5XHJcblxyXG5cdFx0aWYgZXZlbnQua2V5IGluIFsnQXJyb3dMZWZ0JywnQXJyb3dSaWdodCddXHJcblx0XHRcdGN1cnJlbnRQYWdlID0gcGFnZVN0YW5kaW5nc1xyXG5cdFx0XHRjdXJyZW50UGFnZS5tYWtlSFRNTCgpXHJcblx0XHRcdGN1cnJlbnRQYWdlLm1vdmVGb2N1cyBjdXJyZW50UGFnZS5jdXJyZW50XHJcblx0XHRcdHJldHVyblxyXG5cclxuXHRcdGluZGV4ID0gZXZlbnQudGFyZ2V0LnRhYkluZGV4XHJcblx0XHRpZiBldmVudC5rZXkgPT0gJ0Fycm93RG93bicgdGhlbiBjdXJyZW50UGFnZS5tb3ZlRm9jdXMgaW5kZXgrMVxyXG5cdFx0aWYgZXZlbnQua2V5ID09ICdBcnJvd1VwJyAgIHRoZW4gY3VycmVudFBhZ2UubW92ZUZvY3VzIGluZGV4LTFcclxuXHRcdGlmIGV2ZW50LmtleSA9PSAnSG9tZScgICAgICB0aGVuIGN1cnJlbnRQYWdlLm1vdmVGb2N1cyAwXHJcblx0XHRpZiBldmVudC5rZXkgPT0gJ0VuZCcgICAgICAgdGhlbiBjdXJyZW50UGFnZS5tb3ZlRm9jdXMgdG91cm5hbWVudC50YWJsZXMubGVuZ3RoIC0gMVxyXG5cclxuXHRcdGlmIGV2ZW50LmtleSA9PSAnRW50ZXInXHJcblx0XHRcdGVjaG8gJ1BhaXInXHJcblx0XHRcdGlmIHRvdXJuYW1lbnQucGFpcigpXHJcblx0XHRcdFx0cGFnZVRhYmxlcy5tYWtlSFRNTCgpXHJcblxyXG5cdFx0aWYgZXZlbnQua2V5IGluIFsnRGVsZXRlJywnMCcsICcgJywgJzEnXVxyXG5cdFx0XHR0YmwgPSB0b3VybmFtZW50LnRhYmxlc1tpbmRleF1cclxuXHRcdFx0cCA9IHBsYXllcnNCeUlEW3RibFswXV1cclxuXHRcdFx0cSA9IHBsYXllcnNCeUlEW3RibFsxXV1cclxuXHRcdFx0ciA9IHAub3BwLmxlbmd0aC0xXHJcblx0XHRcdGNlbGwgPSBldmVudC50YXJnZXQuY2hpbGRyZW5bM11cclxuXHJcblx0XHRcdGlmIGV2ZW50LmtleSA9PSAnRGVsZXRlJ1xyXG5cdFx0XHRcdHAucmVzW3JdID0gXCJcIlxyXG5cdFx0XHRcdHEucmVzW3JdID0gXCJcIlxyXG5cdFx0XHRcdGNlbGwuaW5uZXJIVE1MID0gXCImbmJzcDsgLSAmbmJzcDtcIiAjIHAucmVzdWx0IHIsaW5kZXgtMVxyXG5cdFx0XHRcdGN1cnJlbnRQYWdlLm1vdmVGb2N1cyBpbmRleCArIDFcclxuXHRcdFx0aWYgZXZlbnQua2V5IGluIFwiMCAxXCJcclxuXHRcdFx0XHR0cmFucyA9IHtcIjBcIjpcIjBcIiwgJyAnOlwiMVwiLCBcIjFcIjogXCIyXCJ9XHJcblx0XHRcdFx0c25hcnQgPSB7XCIwXCI6XCIyXCIsICcgJzpcIjFcIiwgXCIxXCI6IFwiMFwifVxyXG5cdFx0XHRcdHAucmVzW3JdID0gdHJhbnNbZXZlbnQua2V5XVxyXG5cdFx0XHRcdHEucmVzW3JdID0gc25hcnRbZXZlbnQua2V5XVxyXG5cdFx0XHRcdGNlbGwuaW5uZXJIVE1MID0ge1wiMFwiOlwiMCAtIDFcIiwgJyAnOlwiwr0gLSDCvVwiLCBcIjFcIjogXCIxIC0gMFwifVtldmVudC5rZXldICMgcC5yZXN1bHQgcixpbmRleC0xXHJcblx0XHRcdFx0Y3VycmVudFBhZ2UubW92ZUZvY3VzIGluZGV4ICsgMVxyXG5cclxuXHJcbmNsYXNzIFBhZ2VTdGFuZGluZ3MgZXh0ZW5kcyBQYWdlXHJcblx0Y29uc3RydWN0b3IgOiAtPiBcclxuXHRcdHN1cGVyKClcclxuXHRcdEBhcHAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCAnYXBwJ1xyXG5cdFx0QGtsYXNzID0gJ1BhZ2VTdGFuZGluZ3MnXHJcblx0XHRAY3VycmVudCA9IDBcclxuXHJcblx0aGVhZGVycyA6IChSKSAtPlxyXG5cdFx0aCA9IFwiXCJcclxuXHRcdCNoICs9IHRoIFwicG9zXCIsJ3N0eWxlPVwiYm9yZGVyOm5vbmVcIidcclxuXHRcdGggKz0gdGggXCJpZFwiLCdzdHlsZT1cImJvcmRlcjpub25lXCInXHJcblx0XHRoICs9IHRoIFwibmFtblwiLCdzdHlsZT1cImJvcmRlcjpub25lXCInXHJcblx0XHRoICs9IHRoIFwiZWxvXCIsJ3N0eWxlPVwiYm9yZGVyOm5vbmVcIidcclxuXHRcdGZvciBpIGluIHJhbmdlIFJcclxuXHRcdFx0aCArPSB0aCBpKzEsJ3N0eWxlPVwiYm9yZGVyOm5vbmVcIidcclxuXHRcdGggKz0gdGggXCJwclwiLCdzdHlsZT1cImJvcmRlcjpub25lXCInXHJcblx0XHRoICs9IHRoIFwicHBcIiwnc3R5bGU9XCJib3JkZXI6bm9uZVwiJ1xyXG5cdFx0aCArPSB0aCBcImJmXCIsJ3N0eWxlPVwiYm9yZGVyOm5vbmVcIidcclxuXHRcdGggKz0gdGggXCIqXCIsJ3N0eWxlPVwiYm9yZGVyOm5vbmVcIidcclxuXHRcdGggKz0gdGggXCJhdmdcIiwnc3R5bGU9XCJib3JkZXI6bm9uZVwiJ1xyXG5cdFx0aFxyXG5cclxuXHRtYWtlSFRNTCA6IC0+XHJcblx0XHRSID0gdG91cm5hbWVudC5yb3VuZCAjIHBsYXllcnNCeVNjb3JlWzBdLm9wcC5sZW5ndGhcclxuXHRcdCMgZWNobyAnUGFnZVN0YW5kaW5ncy5tYWtlSFRNTCcsUlxyXG5cclxuXHRcdHRhX2xlZnQgICA9IFwic3R5bGU9J3RleHQtYWxpZ246bGVmdCdcIlxyXG5cdFx0dGFfcmlnaHQgID0gXCJzdHlsZT0ndGV4dC1hbGlnbjpyaWdodCdcIlxyXG5cdFx0dGFfY2VudGVyID0gXCJzdHlsZT0ndGV4dC1hbGlnbjpjZW50ZXInXCJcclxuXHRcdHRhX2NlbnRlcl9zdHJvbmcgPSBcInN0eWxlPSd0ZXh0LWFsaWduOmNlbnRlcjsgZm9udC13ZWlnaHQ6IGJvbGQ7J1wiXHJcblxyXG5cdFx0cHJzID0gKHAucGVyZm9ybWFuY2UoKSBmb3IgcCBpbiBwbGF5ZXJzQnlJRClcclxuXHRcdGRlY2ltYWxzID0gZmluZE51bWJlck9mRGVjaW1hbHMgcHJzXHJcblxyXG5cdFx0dCA9IFwiXCJcclxuXHRcdGZvciBpIGluIHJhbmdlIHBsYXllcnNCeVNjb3JlLmxlbmd0aFxyXG5cdFx0XHRwID0gcGxheWVyc0J5U2NvcmVbaV1cclxuXHRcdFx0I2lmIGk9PTAgdGhlbiBjdXJyZW50ID0gcC5pZFxyXG5cdFx0XHRzID0gXCJcIlxyXG5cclxuXHRcdFx0I3MgKz0gdGQgaSsxLHRhX3JpZ2h0ICMgcG9zXHJcblx0XHRcdHMgKz0gdGQgcC5pZCsxLHRhX3JpZ2h0ICMgaWRcclxuXHRcdFx0cyArPSB0ZCBwLm5hbWUsdGFfbGVmdCAjIG5hbW5cclxuXHRcdFx0cyArPSB0ZCBwLmVsbyAjIGVsb1xyXG5cclxuXHRcdFx0Zm9yIHIgaW4gcmFuZ2UgUlxyXG5cdFx0XHRcdHMgKz0gcC5yZXN1bHQgcixpICMgcm9uZGVyXHJcblx0XHRcdFx0XHJcblx0XHRcdCMgcHJcclxuXHRcdFx0cHIgPSBwLnBlcmZvcm1hbmNlKClcclxuXHRcdFx0aWYgcHIgPCAzOTk5XHJcblx0XHRcdFx0cyArPSB0ZCBwci50b0ZpeGVkKGRlY2ltYWxzKSAjLHRhX3JpZ2h0XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRzICs9IHRkIFwiXCJcclxuXHJcblx0XHRcdHMgKz0gdGQgcC5wcmV0dHlTY29yZSgpLHRhX3JpZ2h0ICMgcHBcclxuXHJcblx0XHRcdCMgcyArPSB0ZCBcIlwiLCdzdHlsZT1cIndpZHRoOjVweDtib3JkZXItdG9wOm5vbmU7IGJvcmRlci1ib3R0b206bm9uZVwiJyAjIGVtcHR5XHJcblxyXG5cdFx0XHQjIHMgKz0gdGQgcC50YWJsZSArIHAucHJldHR5Q29sKFItMSlbMF0gKyBwLnByZXR0eUNvbDIoUi0xKVswXSx0YV9jZW50ZXJcclxuXHRcdFx0IyBiZlxyXG5cdFx0XHRpZiBwLnRhYmxlXHJcblx0XHRcdFx0YmYgPSBwLnRhYmxlICsge2w6J0InLHI6J1cnfVtwLnByZXR0eUNvbChSLTEpWzFdXVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0YmYgPSBcIlwiXHJcblx0XHRcdHMgKz0gdGQgYmYsIHRhX2NlbnRlcl9zdHJvbmdcclxuXHJcblx0XHRcdCMgZGlmZlxyXG5cdFx0XHQjIGlmIFIgPj0gMSB0aGVuIHMgKz0gdGQgcGxheWVyc0J5SURbcC5vcHBbUi0xXV0uZWxvIC0gcC5lbG8sIHRhX3JpZ2h0IGVsc2UgcyArPSB0ZCBcIlwiLHRhX3JpZ2h0XHJcblxyXG5cdFx0XHQjIGlkOmJmXHJcblx0XHRcdCMgcSA9IHBsYXllcnNCeUlEW2ldXHJcblx0XHRcdCMgaWYgUiA+PSAxIHRoZW4gcyArPSB0ZCBcIiN7aSsxfToje3EudGFibGUgKyB7bDonQicscjonVyd9W3EucHJldHR5Q29sKFItMSlbMV1dfVwiICwgdGFfcmlnaHQgZWxzZSBzICs9IHRkIFwiXCIsdGFfcmlnaHRcclxuXHJcblx0XHRcdCMgcyArPSB0ZCBtYXRyaXggaVxyXG5cdFx0XHQjIGVjaG8gbWF0cml4IGlcclxuXHRcdFx0cyArPSB0ZCBcIlwiICMgKiAocGF1c2UpXHJcblx0XHRcdHMgKz0gdGQgcC5hdmVyYWdlKCkudG9GaXhlZCAxXHJcblx0XHRcdHQgKz0gdHIgcywgXCJ0YWJpbmRleD0je2l9XCJcclxuXHJcblx0XHR0ID0gdHIoQGhlYWRlcnMoUikpICsgdFxyXG5cdFx0QGFwcC5pbm5lckhUTUwgPSB0YWJsZSB0LCdzdHlsZT1cImJvcmRlcjpub25lXCInXHJcblxyXG5cdGhhbmRsZUtleURvd24gOiAoZXZlbnQpIC0+ICMgRW5rZWxyb25kXHJcblx0XHRpZiBldmVudC5rZXkgaW4gWycgJywnQXJyb3dEb3duJywnQXJyb3dVcCddIHRoZW4gZXZlbnQucHJldmVudERlZmF1bHQoKVxyXG5cclxuXHRcdGlmIGV2ZW50LmtleSBpbiBbJ0Fycm93TGVmdCcsJ0Fycm93UmlnaHQnXVxyXG5cdFx0XHRjdXJyZW50UGFnZSA9IHBhZ2VUYWJsZXNcclxuXHRcdFx0Y3VycmVudFBhZ2UubWFrZUhUTUwoKVxyXG5cdFx0XHRjdXJyZW50UGFnZS5tb3ZlRm9jdXMgY3VycmVudFBhZ2UuY3VycmVudFxyXG5cdFx0XHRyZXR1cm4gXHJcblxyXG5cdFx0IyBlY2hvICdoYW5kbGVLZXlEb3duIFN0YW5kaW5ncycsZXZlbnQua2V5XHJcblx0XHRpZiBldmVudCA9PSB1bmRlZmluZWQgdGhlbiByZXR1cm5cclxuXHRcdGluZGV4ID0gZXZlbnQudGFyZ2V0LnRhYkluZGV4ICMgLSAxXHJcblx0XHRwID0gcGxheWVyc0J5U2NvcmVbaW5kZXhdXHJcblx0XHRyID0gcC5vcHAubGVuZ3RoLTFcclxuXHRcdGNlbGwgPSBldmVudC50YXJnZXQuY2hpbGRyZW5bMytyXVxyXG5cclxuXHRcdGlmIGV2ZW50LmtleSA9PSAnRW50ZXInXHJcblx0XHRcdGlmIHRvdXJuYW1lbnQucGFpcigpXHJcblx0XHRcdFx0Y3VycmVudFBhZ2UgPSBwYWdlVGFibGVzXHJcblx0XHRcdFx0cGFnZVRhYmxlcy5tYWtlSFRNTCgpXHJcblxyXG5cdFx0aWYgZXZlbnQua2V5ID09ICdBcnJvd0Rvd24nIHRoZW4gY3VycmVudFBhZ2UubW92ZUZvY3VzIGluZGV4KzFcclxuXHRcdGlmIGV2ZW50LmtleSA9PSAnQXJyb3dVcCcgICB0aGVuIGN1cnJlbnRQYWdlLm1vdmVGb2N1cyBpbmRleC0xXHJcblx0XHRpZiBldmVudC5rZXkgPT0gJ0hvbWUnICAgICAgdGhlbiBjdXJyZW50UGFnZS5tb3ZlRm9jdXMgMFxyXG5cdFx0aWYgZXZlbnQua2V5ID09ICdFbmQnICAgICAgIHRoZW4gY3VycmVudFBhZ2UubW92ZUZvY3VzIHBsYXllcnNCeUlELmxlbmd0aCAtIDFcclxuXHJcblx0XHQjIFPDtmtuaW5nXHJcblx0XHRrZXkgPSBldmVudC5rZXkudG9VcHBlckNhc2UoKVxyXG5cdFx0aWYga2V5ID09IGV2ZW50LmtleSB0aGVuIGRpciA9IC0xIGVsc2UgZGlyID0gMVxyXG5cdFx0aWYga2V5IGluIFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVrDhcOEw5ZcIlxyXG5cdFx0XHRpbmRleCA9IGV2ZW50LnRhcmdldC50YWJJbmRleCAjIC0gMVxyXG5cdFx0XHRuID0gcGxheWVyc0J5U2NvcmUubGVuZ3RoXHJcblx0XHRcdGZvciBpIGluIHJhbmdlIG5cclxuXHRcdFx0XHRpZiBkaXI9PTEgdGhlbiBpeD0oaW5kZXgraSsxKSAlIG4gZWxzZSBpeCA9IChpbmRleC1pLTEpICUlIG5cclxuXHRcdFx0XHRwID0gcGxheWVyc0J5U2NvcmVbaXhdXHJcblx0XHRcdFx0aWYgcC5uYW1lLnN0YXJ0c1dpdGgga2V5XHJcblx0XHRcdFx0XHRjdXJyZW50UGFnZS5tb3ZlRm9jdXMgaXhcclxuXHRcdFx0XHRcdGJyZWFrXHJcblxyXG5jbGFzcyBUb3VybmFtZW50XHJcblx0Y29uc3RydWN0b3IgOiAoZmlsZW5hbWUsIGRhdGEpIC0+XHJcblx0XHRAZmV0Y2hEYXRhIGZpbGVuYW1lLCBkYXRhXHJcblx0XHRwbGF5ZXJzQnlTY29yZSA9IF8uY2xvbmUgcGxheWVyc0J5SURcclxuXHRcdEB0YWJsZXMgPSBbXVxyXG5cdFx0QHJvdW5kID0gMFxyXG5cclxuXHRcdGVjaG8gJ3BsYXllcnNCeVNjb3JlJywgcGxheWVyc0J5U2NvcmVcclxuXHJcblx0cGFpciA6IC0+XHJcblx0XHRmb3IgcCBpbiBwbGF5ZXJzQnlJRFxyXG5cdFx0XHRpZiBub3QgcC5jaGVjaygpIHRoZW4gcmV0dXJuIGZhbHNlXHJcblx0XHRzb2x1dGlvbiA9IEBmaW5kU29sdXRpb24gQG1ha2VFZGdlcyAtMVxyXG5cdFx0QHRhYmxlcyA9IG1ha2VQYWlycyBzb2x1dGlvblxyXG5cclxuXHRcdEByb3VuZCArPSAxXHJcblx0XHRjdXJyZW50UGFnZS5tYWtlSGVhZGVyKClcclxuXHJcblx0XHRlY2hvICd0YWJsZXMnLEB0YWJsZXNcclxuXHRcdCMgcGFyZXQgbWVkIGjDtmdzdCBlbG8gc2l0dGVyIHDDpSBib3JkIDFcclxuXHRcdGlmIEZBSVJQQUlSIFxyXG5cdFx0XHRAdGFibGVzLnNvcnQgKGEsYiktPiBcclxuXHRcdFx0XHRhMCA9IHBsYXllcnNCeUlEW2FbMF1dLmVsb1xyXG5cdFx0XHRcdGExID0gcGxheWVyc0J5SURbYVsxXV0uZWxvXHJcblx0XHRcdFx0YjAgPSBwbGF5ZXJzQnlJRFtiWzBdXS5lbG9cclxuXHRcdFx0XHRiMSA9IHBsYXllcnNCeUlEW2JbMV1dLmVsb1xyXG5cdFx0XHRcdGIwICsgYjEgLSBhMCAtIGExXHJcblx0XHRpZiBTV0lTU1xyXG5cdFx0XHRAdGFibGVzLnNvcnQgKGEsYiktPiBcclxuXHRcdFx0XHRhMCA9IHBsYXllcnNCeUlEW2FbMF1dLnNjb3JlKClcclxuXHRcdFx0XHRhMSA9IHBsYXllcnNCeUlEW2FbMV1dLnNjb3JlKClcclxuXHRcdFx0XHRiMCA9IHBsYXllcnNCeUlEW2JbMF1dLnNjb3JlKClcclxuXHRcdFx0XHRiMSA9IHBsYXllcnNCeUlEW2JbMV1dLnNjb3JlKClcclxuXHRcdFx0XHRiMCArIGIxIC0gYTAgLSBhMVxyXG5cdFx0QHRhYmxlcyA9IEBtYWtlT3BwQ29sUmVzIEB0YWJsZXNcclxuXHRcdFxyXG5cdFx0QHNvcnQoKVxyXG5cdFx0XHJcblx0XHRlY2hvICdwbGF5ZXJzQnlJRCcscGxheWVyc0J5SURcclxuXHRcdGZvciBpIGluIHJhbmdlIHBsYXllcnNCeUlELmxlbmd0aFxyXG5cdFx0XHRlY2hvIG1hdHJpeCBpXHJcblxyXG5cdFx0Y3VycmVudFBhZ2UubWFrZUhUTUwoKVxyXG5cdFx0dHJ1ZVxyXG5cclxuXHRmZXRjaERhdGEgOiAoZmlsZW5hbWUsIGRhdGEpIC0+XHJcblx0XHQjIHJhbmRvbVNlZWQgOTlcclxuXHRcdEBmaWxlbmFtZSA9IGZpbGVuYW1lLnJlcGxhY2VBbGwgXCIudHh0XCIsXCJcIlxyXG5cclxuXHRcdGRhdGEgPSBkYXRhLnNwbGl0ICdcXG4nXHJcblxyXG5cdFx0aGFzaCA9IHt9XHJcblxyXG5cdFx0IyBkZWZhdWx0IHZhbHVlc1xyXG5cdFx0aGFzaC5QTEFZRVJTID0gW11cclxuXHRcdGhhc2guVElUTEUgPSAnJ1xyXG5cdFx0aGFzaC5EQVRFID0gJydcclxuXHRcdGhhc2guUk9VTkQgPSAwXHJcblx0XHRoYXNoLlRQUCA9IDMwXHJcblx0XHRoYXNoLlBQUCA9IDYwXHJcblx0XHRoYXNoLlBBVVNFRCA9IFwiXCJcclxuXHJcblx0XHRmb3IgbGluZSxuciBpbiBkYXRhXHRcclxuXHRcdFx0bGluZSA9IGxpbmUudHJpbSgpXHJcblx0XHRcdGlmIGxpbmUubGVuZ3RoID09IDAgdGhlbiBjb250aW51ZVxyXG5cdFx0XHRhcnIgPSBsaW5lLnNwbGl0ICc9J1xyXG5cdFx0XHRpZiBhcnIubGVuZ3RoID09IDJcclxuXHRcdFx0XHRpZiBhcnJbMF0gbm90IG9mIEtFWVdPUkRTXHJcblx0XHRcdFx0XHRoZWxwVGV4dCA9IChcIiAgICAje2tleX06ICN7dmFsdWV9XCIgZm9yIGtleSx2YWx1ZSBvZiBLRVlXT1JEUykuam9pbiAnXFxuJ1xyXG5cdFx0XHRcdFx0a2V5d29yZCA9IFwiXFxcIiN7YXJyWzBdfVxcXCJcIlxyXG5cdFx0XHRcdFx0YWxlcnQgXCIje2tleXdvcmR9IGluIGxpbmUgI3tucisxfSBpcyBub3Qgb25lIG9mXFxuI3toZWxwVGV4dH1cIlxyXG5cdFx0XHRcdFx0cmV0dXJuXHJcblx0XHRcdFx0aGFzaFthcnJbMF1dID0gYXJyWzFdXHJcblx0XHRcdGVsc2UgXHJcblx0XHRcdFx0aWYgJyEnIG5vdCBpbiBsaW5lXHJcblx0XHRcdFx0XHRhbGVydCBcIiN7bGluZX1cXG4gaW4gbGluZSAje25yKzF9XFxuIG11c3QgbG9vayBsaWtlXFxuICAgIDI4ODIhQ0FSTFNFTiBNYWdudXMgb3JcXG4gICAgMTYwMSFOSUxTU09OIENocmlzdGVyITJ3MFwiXHJcblx0XHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0XHRhcnIgPSBsaW5lLnNwbGl0ICchJ1xyXG5cdFx0XHRcdGlmIG5vdCAvXlxcZHs0fSQvLnRlc3QgYXJyWzBdXHJcblx0XHRcdFx0XHRhbGVydCBcIiN7YXJyWzBdfVxcbiBpbiBsaW5lICN7bnIrMX1cXG4gbXVzdCBoYXZlIGZvdXIgZGlnaXRzXCJcclxuXHRcdFx0XHRcdHJldHVyblxyXG5cdFx0XHRcdGZvciBpIGluIHJhbmdlIDIsYXJyLmxlbmd0aFxyXG5cdFx0XHRcdFx0aXRlbSA9IGFycltpXVxyXG5cdFx0XHRcdFx0aWYgbm90IC9eLT9cXGQrKHd8X3xiKVswLTJdJC8udGVzdCBpdGVtXHJcblx0XHRcdFx0XHRcdGFsZXJ0IFwiI3tpdGVtfVxcbiBpbiBsaW5lICN7bnIrMX1cXG4gbXVzdCBmb2xsb3cgdGhlIGZvcm1hdCA8bnVtYmVyPiA8Y29sb3I+IDxyZXN1bHQ+XFxuICB3aGVyZSBjb2xvciBpcyBvbmUgb2YgdyxiIG9yIF9cXG4gIGFuZCByZXN1bHQgaXMgb25lIG9mIDAsIDEgb3IgMlwiXHJcblx0XHRcdFx0XHRcdHJldHVyblxyXG5cdFx0XHRcdGhhc2guUExBWUVSUy5wdXNoIGFyclxyXG5cdFx0QHBsYXllcnMgPSBbXVxyXG5cdFx0QHRpdGxlID0gaGFzaC5USVRMRVxyXG5cdFx0QGRhdHVtID0gaGFzaC5EQVRFXHJcblx0XHRAcm91bmQgPSBwYXJzZUludCBoYXNoLlJPVU5EXHJcblx0XHRAdHBwID0gcGFyc2VJbnQgaGFzaC5UUFAgIyBUYWJsZXMgUGVyIFBhZ2VcclxuXHRcdEBwcHAgPSBwYXJzZUludCBoYXNoLlBQUCAjIFBsYXllcnMgUGVyIFBhZ2VcclxuXHRcdEBwYXVzZWQgPSBoYXNoLlBBVVNFRCAjIGxpc3Qgb2YgemVybyBiYXNlZCBpZHNcclxuXHJcblx0XHRwbGF5ZXJzID0gaGFzaC5QTEFZRVJTXHJcblx0XHRnLk4gPSBwbGF5ZXJzLmxlbmd0aFxyXG5cclxuXHRcdGlmIG5vdCAoNCA8PSBnLk4gPCAxMDApXHJcblx0XHRcdGFsZXJ0IFwiTnVtYmVyIG9mIHBsYXllcnMgbXVzdCBiZSBiZXR3ZWVuIDQgYW5kIDk5IVwiXHJcblx0XHRcdHJldHVyblxyXG5cclxuXHRcdHBsYXllcnNCeUlEID0gW11cclxuXHRcdGZvciBpIGluIHJhbmdlIGcuTlxyXG5cdFx0XHRwbGF5ZXIgPSBuZXcgUGxheWVyIGlcclxuXHRcdFx0cGxheWVyLnJlYWQgcGxheWVyc1tpXVxyXG5cdFx0XHRwbGF5ZXJzQnlJRC5wdXNoIHBsYXllclxyXG5cclxuXHRcdGlmIEBwYXVzZWQgPT0gXCJcIlxyXG5cdFx0XHRAcGF1c2VkID0gW11cclxuXHRcdGVsc2VcclxuXHRcdFx0QHBhdXNlZCA9IEBwYXVzZWQuc3BsaXQgJyEnXHJcblx0XHRcdGZvciBpZCBpbiBAcGF1c2VkXHJcblx0XHRcdFx0aWYgaWQgIT0gXCJcIiB0aGVuIHBsYXllcnNCeUlEW2lkXS5hY3RpdmUgPSBmYWxzZVxyXG5cclxuXHRcdGcuYXZlcmFnZSA9IDBcclxuXHRcdGZvciBpIGluIHJhbmdlIGcuTlxyXG5cdFx0XHRwbGF5ZXJzQnlJRFtpXS5lbG8gPSBwYXJzZUludCBwbGF5ZXJzQnlJRFtpXS5lbG9cclxuXHRcdFx0Zy5hdmVyYWdlICs9IHBsYXllcnNCeUlEW2ldLmVsb1xyXG5cdFx0Zy5hdmVyYWdlIC89IGcuTlxyXG5cclxuXHRcdHBsYXllcnNCeUlELnNvcnQgKGEsYikgLT4gIFxyXG5cdFx0XHRpZiBhLmVsbyAhPSBiLmVsbyB0aGVuIHJldHVybiBiLmVsbyAtIGEuZWxvXHJcblx0XHRcdGlmIGEubmFtZSA+IGIubmFtZSB0aGVuIDEgZWxzZSAtMVxyXG5cclxuXHRcdGZvciBpIGluIHJhbmdlIGcuTlxyXG5cdFx0XHRwbGF5ZXJzQnlJRFtpXS5pZCA9IGlcclxuXHRcdFxyXG5cdFx0ZWNobyAncGxheWVyc0J5SUQnLCBwbGF5ZXJzQnlJRCBcclxuXHJcblx0XHQjIGV4dHJhY3QgQHBhaXJzIGZyb20gdGhlIGxhc3Qgcm91bmRcclxuXHRcdEBwYWlycyA9IFtdXHJcblx0XHRmb3IgcCBpbiBwbGF5ZXJzQnlJRFxyXG5cdFx0XHRhID0gcC5pZFxyXG5cdFx0XHRiID0gXy5sYXN0IHAub3BwXHJcblx0XHRcdGlmIGEgPCBiIFxyXG5cdFx0XHRcdHBhID0gcGxheWVyc0J5SURbYV1cclxuXHRcdFx0XHRwYiA9IHBsYXllcnNCeUlEW2JdXHJcblx0XHRcdFx0QHBhaXJzLnB1c2ggaWYgMSA9PSBfLmxhc3QgcC5jb2wgIyB3XHJcblx0XHRcdFx0XHRwYS5jaGFpciA9IDIgKiBAcGFpcnMubGVuZ3RoXHJcblx0XHRcdFx0XHRwYi5jaGFpciA9IDIgKiBAcGFpcnMubGVuZ3RoICsgMVxyXG5cdFx0XHRcdFx0W2EsYl1cclxuXHRcdFx0XHRlbHNlIFxyXG5cdFx0XHRcdFx0cGEuY2hhaXIgPSAyICogQHBhaXJzLmxlbmd0aCArIDFcclxuXHRcdFx0XHRcdHBiLmNoYWlyID0gMiAqIEBwYWlycy5sZW5ndGhcclxuXHRcdFx0XHRcdFtiLGFdXHJcblxyXG5cdFx0ZWNobyAnQHBhaXJzJyxAcGFpcnNcclxuXHJcblx0XHQjIEBkdW1wICdmZXRjaCdcclxuXHRcdFxyXG5cdFx0QHZpcmdpbiA9IHRydWVcclxuXHJcblx0b2sgOiAoYSxiKSAtPiBhLmlkICE9IGIuaWQgYW5kIGEuaWQgbm90IGluIGIub3BwIGFuZCBNYXRoLmFicyhhLmJhbGFucygpICsgYi5iYWxhbnMoKSkgPD0gMlxyXG5cclxuXHRtYWtlRWRnZXNfRkFJUlBBSVIgOiAoaUJ5ZSkgLT4gIyBpQnllIMOkciBldHQgaWQgZWxsZXIgLTFcclxuXHRcdGFyciA9IFtdXHJcblx0XHRmb3IgcGEgaW4gcGxheWVyc0J5U2NvcmVcclxuXHRcdFx0YSA9IHBhLmlkXHJcblx0XHRcdGlmIG5vdCBwYS5hY3RpdmUgb3IgYSA9PSBpQnllIHRoZW4gY29udGludWVcclxuXHRcdFx0Zm9yIHBiIGluIHBsYXllcnNCeVNjb3JlXHJcblx0XHRcdFx0YiA9IHBiLmlkXHJcblx0XHRcdFx0aWYgYSA9PSBiIHRoZW4gY29udGludWVcclxuXHRcdFx0XHRpZiBub3QgcGIuYWN0aXZlIG9yIGIgPT0gaUJ5ZSB0aGVuIGNvbnRpbnVlXHJcblx0XHRcdFx0ZGlmZiA9IE1hdGguYWJzIHBhLmVsbyAtIHBiLmVsb1xyXG5cdFx0XHRcdGNvc3QgPSA5OTk5IC0gZGlmZiAqKiAxLjAxXHJcblx0XHRcdFx0aWYgYSA8IGIgdGhlbiBjb250aW51ZVxyXG5cdFx0XHRcdGlmIEBvayBwYSxwYiB0aGVuIGFyci5wdXNoIFthLGIsIGNvc3RdXHJcblx0XHRhcnIuc29ydCAoYSxiKSAtPiBiWzJdIC0gYVsyXSAjIGNvc3RcclxuXHRcdGVjaG8gJ2VkZ2VzJyxhcnJcclxuXHRcdGFyclxyXG5cclxuXHRtYWtlRWRnZXNfU1dJU1MgOiAoaUJ5ZSkgLT4gIyBpQnllIMOkciBldHQgaWQgZWxsZXIgLTFcclxuXHJcblx0XHRAc29ydCgpXHJcblxyXG5cdFx0ZWNobyAnbWFrZUVkZ2VzJyxwbGF5ZXJzQnlTY29yZVxyXG5cclxuXHRcdGhhc2h4ID0ge31cclxuXHRcdGZvciBpIGluIHJhbmdlIHBsYXllcnNCeVNjb3JlLmxlbmd0aFxyXG5cdFx0XHRwID0gcGxheWVyc0J5U2NvcmVbaV1cclxuXHRcdFx0cC5yYW5rID0gaVxyXG5cdFx0XHRwLmdyb3VwID0gcC5zY29yZSgpLnRvRml4ZWQgMVxyXG5cdFx0XHRpZiBwLmdyb3VwIG5vdCBvZiBoYXNoeCB0aGVuIGhhc2h4W3AuZ3JvdXBdID0gMFxyXG5cdFx0XHRoYXNoeFtwLmdyb3VwXSArPSAxXHJcblxyXG5cdFx0ZWNobyAnaGFzaHgnLGhhc2h4XHJcblx0XHRmb3IgcCBpbiBwbGF5ZXJzQnlJRFxyXG5cdFx0XHRwLmdyb3VwU2l6ZSA9IGhhc2h4W3AuZ3JvdXBdXHJcblxyXG5cdFx0ZWNobyAncGxheWVyc0J5U2NvcmUnLHBsYXllcnNCeVNjb3JlXHJcblx0XHRlY2hvICdwbGF5ZXJzQnlJRCcscGxheWVyc0J5SURcclxuXHJcblx0XHRhcnIgPSBbXVxyXG5cdFx0Zm9yIHBhIGluIHBsYXllcnNCeUlEXHJcblx0XHRcdGEgPSBwYS5pZFxyXG5cdFx0XHRpZiBub3QgcGEuYWN0aXZlIG9yIGEgPT0gaUJ5ZSB0aGVuIGNvbnRpbnVlXHJcblx0XHRcdGZvciBwYiBpbiBwbGF5ZXJzQnlJRFxyXG5cdFx0XHRcdGIgPSBwYi5pZFxyXG5cdFx0XHRcdGlmIGIgPD0gYSB0aGVuIGNvbnRpbnVlXHJcblx0XHRcdFx0aWYgbm90IHBiLmFjdGl2ZSBvciBiID09IGlCeWUgdGhlbiBjb250aW51ZVxyXG5cdFx0XHRcdGlmIG5vdCBAb2sgcGEscGIgdGhlbiBjb250aW51ZVxyXG5cclxuXHRcdFx0XHRkMCA9IE1hdGguYWJzIHBhLnNjb3JlKCkgLSBwYi5zY29yZSgpXHJcblx0XHRcdFx0ZDEgPSBNYXRoLmFicyBwYS5iYWxhbnMoKSArIHBiLmJhbGFucygpXHJcblx0XHRcdFx0aWYgcGEuZ3JvdXAgPT0gcGIuZ3JvdXAgXHJcblx0XHRcdFx0XHRkMiA9IE1hdGguYWJzIHBhLmdyb3VwU2l6ZS8yIC0gTWF0aC5hYnMgcGEucmFuayAtIHBiLnJhbmtcclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRkMiA9IE1hdGguYWJzIHBhLnJhbmsgLSBwYi5yYW5rXHJcblxyXG5cdFx0XHRcdGRpZmYgPSAxMDAwMCAqIGQwICsgMTAwICogZDEgKyBkMiAqKiAxLjAxXHJcblx0XHRcdFx0ZWNobyBcImRpZmYgZsO2ciAje2F9ICN7Yn06IHBhZz0je3BhLmdyb3VwfSBwYmc9I3twYi5ncm91cH0gcGFncz0je3BhLmdyb3VwU2l6ZX0gcGJncz0je3BiLmdyb3VwU2l6ZX0gIHBhcj0je3BhLnJhbmt9IHBicj0je3BiLnJhbmt9IGQwPSN7ZDB9IGQxPSN7ZDF9IGQyPSN7ZDJ9IGRpZmY9I3tkaWZmfSAje3BhLm5hbWV9IHZzICN7cGIubmFtZX1cIlxyXG5cclxuXHRcdFx0XHRjb3N0ID0gOTk5OTkgLSBkaWZmXHJcblx0XHRcdFx0YXJyLnB1c2ggW2EsIGIsIGNvc3RdXHJcblxyXG5cdFx0ZWNobyAnZWRnZXMnLGFyclxyXG5cdFx0YXJyXHJcblxyXG5cdG1ha2VFZGdlcyA6IChpQnllKSAtPiAjIGlCeWUgw6RyIGV0dCBpZCBlbGxlciAtMVxyXG5cdFx0aWYgU1dJU1MgdGhlbiByZXR1cm4gbWFrZUVkZ2VzX1NXSVNTIGlCeWVcclxuXHRcdGlmIEZBSVJQQUlSIHRoZW4gcmV0dXJuIG1ha2VFZGdlc19GQUlSUEFJUiBpQnllXHJcblxyXG5cdGZpbmRTb2x1dGlvbiA6IChlZGdlcykgLT5cclxuXHRcdGVkbW9uZHMgPSBuZXcgRWRtb25kcyBlZGdlc1xyXG5cdFx0ZWRtb25kcy5tYXhXZWlnaHRNYXRjaGluZyBlZGdlc1xyXG5cclxuXHRzb3J0IDogLT4gcGxheWVyc0J5U2NvcmUuc29ydCAoYSxiKSAtPlxyXG5cdFx0aWYgU1dJU1MgdGhlbiByZXR1cm4gYi5zY29yZSgpIC0gYS5zY29yZSgpXHJcblx0XHRpZiBGQUlSUEFJUiB0aGVuIHJldHVybiBiLnBlcmZvcm1hbmNlKCkgLSBhLnBlcmZvcm1hbmNlKClcclxuXHJcblx0aGFuZGxlQ29sIDogKHBpLHBhLGZsYWcpIC0+XHJcblx0XHRpZiBwaS5jb2wubGVuZ3RoID09IDBcclxuXHRcdFx0aWYgZmxhZ1xyXG5cdFx0XHRcdHBpLmNvbC5wdXNoIC0xXHJcblx0XHRcdFx0cGEuY29sLnB1c2ggMVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0cGkuY29sLnB1c2ggMVxyXG5cdFx0XHRcdHBhLmNvbC5wdXNoIC0xXHJcblx0XHRlbHNlXHJcblx0XHRcdGlmIHBpLmJhbGFucygpID4gcGEuYmFsYW5zKClcclxuXHRcdFx0XHRwaS5jb2wucHVzaCAtMVxyXG5cdFx0XHRcdHBhLmNvbC5wdXNoIDFcclxuXHRcdFx0ZWxzZSBpZiBwaS5iYWxhbnMoKSA8IHBhLmJhbGFucygpXHJcblx0XHRcdFx0cGkuY29sLnB1c2ggMVxyXG5cdFx0XHRcdHBhLmNvbC5wdXNoIC0xXHJcblx0XHRcdGVsc2UgIyBzYW1tYSBiYWxhbnNcclxuXHRcdFx0XHRmb3VuZERpZmYgPSBmYWxzZVxyXG5cdFx0XHRcdGZvciBqIGluIHJhbmdlIHBpLmNvbC5sZW5ndGgtMSwtMSwtMVxyXG5cdFx0XHRcdFx0aWYgcGkuY29sW2pdICE9IHBhLmNvbFtqXVxyXG5cdFx0XHRcdFx0XHRmb3VuZERpZmYgPSB0cnVlXHJcblx0XHRcdFx0XHRcdHBpLmNvbC5wdXNoIC1waS5jb2xbal1cclxuXHRcdFx0XHRcdFx0cGEuY29sLnB1c2ggLXBhLmNvbFtqXVxyXG5cdFx0XHRcdFx0XHRicmVha1xyXG5cdFx0XHRcdGlmIG5vdCBmb3VuZERpZmZcclxuXHRcdFx0XHRcdGlmIGZsYWcgXHJcblx0XHRcdFx0XHRcdHBpLmNvbC5wdXNoIC0xXHJcblx0XHRcdFx0XHRcdHBhLmNvbC5wdXNoIDFcclxuXHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0cGkuY29sLnB1c2ggMVxyXG5cdFx0XHRcdFx0XHRwYS5jb2wucHVzaCAtMVxyXG5cclxuXHRoYW5kbGVSZXMgOiAocGkscGEpIC0+XHJcblx0XHR6ID0gcmFuZG9tKClcclxuXHRcdFtzaSxzYV0gPSBbMSwxXVxyXG5cdFx0aWYgeiA8IDAuNDUgdGhlbiBbc2ksc2FdID0gWzIsMF1cclxuXHRcdGlmIHogPiAwLjU1IHRoZW4gW3NpLHNhXSA9IFswLDJdXHJcblx0XHRwaS5yZXMucHVzaCBzaS50b1N0cmluZygpXHJcblx0XHRwYS5yZXMucHVzaCBzYS50b1N0cmluZygpXHJcblxyXG5cdCMgdXBwZGF0ZXJhciBvcHAgb2NoIGNvbFxyXG5cdG1ha2VPcHBDb2xSZXMgOiAocGFpcnMsIGZsYWc9ZmFsc2UpIC0+XHJcblx0XHRib3JkID0gMFxyXG5cdFx0cmVzID0gW11cclxuXHRcdGZvciBwYWlyIGluIHBhaXJzXHJcblx0XHRcdGEgPSBwYWlyWzBdXHJcblx0XHRcdGIgPSBwYWlyWzFdXHJcblxyXG5cdFx0XHRwYSA9IHBsYXllcnNCeUlEW2FdXHJcblx0XHRcdHBiID0gcGxheWVyc0J5SURbYl1cclxuXHJcblx0XHRcdGJvcmQgKz0gMVxyXG5cdFx0XHRwYS50YWJsZSA9IGJvcmRcclxuXHRcdFx0cGIudGFibGUgPSBib3JkXHJcblxyXG5cdFx0XHRwYS5vcHAucHVzaCBiXHJcblx0XHRcdHBiLm9wcC5wdXNoIGFcclxuXHJcblx0XHRcdEBoYW5kbGVDb2wgcGEscGIsIGJvcmQgJSAyID09IDBcclxuXHJcblx0XHRcdCMgdmlkIGxpa2EgZsOkcmd2w6RyZGVuLCBhbHRlcm5lcmFcclxuXHRcdFx0biA9IHBhLmNvbC5sZW5ndGhcclxuXHRcdFx0aWYgcGEuY29sW24tMV0gPT0gMVxyXG5cdFx0XHRcdHJlcy5wdXNoIFthLGJdXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRyZXMucHVzaCBbYixhXVxyXG5cdFx0cmVzXHJcblx0XHRcdFxyXG5kYXRhID0gXCJcIlwiXHJcblRJVExFPVNlbmlvciBTdG9ja2hvbG1cclxuREFURT0yMDI1LTAxLTE5XHJcblJPVU5EPTBcclxuVFBQPTMwXHJcblBQUD02MFxyXG5QQVVTRUQ9XHJcblxyXG4xODI1IUpPSEFOU1NPTiBMZW5uYXJ0XHJcbjE2OTchQkrDllJLREFITCBHw7ZyYW5cclxuMTY4NCFTSUxJTlMgUGV0ZXJpc1xyXG4xNjgxIVNUT0xPViBMZW9uaWRcclxuMTY0NCFQRVRURVJTU09OIExhcnMtw4VrZVxyXG4xNTk4IUlTUkFFTCBEYW5cclxuMTU5OCFBSUtJTyBPbm5pXHJcbjE1ODMhUEVSU1NPTiBLamVsbFxyXG4xNTYxIUxJTEpFU1RSw5ZNIFRvclxyXG4xNTU5IUxFSFZPTkVOIEpvdWtvXHJcbjE1MzkhQU5ERVJTU09OIExhcnMgT3dlXHJcbjE1MzUhw4VCRVJHIExhcnMtRXJpa1xyXG4xNTMyIUFOVE9OU1NPTiBHw7ZyZ2VuXHJcbjE0MDAhU1RSw5ZNQsOEQ0sgSGVucmlrXHJcblwiXCJcIlxyXG5cclxucGFnZVN0YW5kaW5ncyA9IG5ldyBQYWdlU3RhbmRpbmdzKClcclxucGFnZVRhYmxlcyA9IG5ldyBQYWdlVGFibGVzKCkgXHJcblxyXG50b3VybmFtZW50ID0gbmV3IFRvdXJuYW1lbnQgXCJkZW1vXCIsIGRhdGFcclxuY3VycmVudFBhZ2UgPSBwYWdlU3RhbmRpbmdzXHJcbmN1cnJlbnRQYWdlLm1ha2VIZWFkZXIoKVxyXG5jdXJyZW50UGFnZS5tYWtlSFRNTCgpXHJcblxyXG5jdXJyZW50UGFnZS5tb3ZlRm9jdXMgMFxyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIgJ2tleWRvd24nLCAoZXZlbnQpIC0+XHJcblx0IyBlY2hvICdrZXlkb3duJyxjdXJyZW50UGFnZS5rbGFzc1xyXG5cdGN1cnJlbnRQYWdlLmhhbmRsZUtleURvd24gZXZlbnQiXX0=
//# sourceURL=c:\github\FairPair2\coffee\sketch.coffee