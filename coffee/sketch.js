// Generated by CoffeeScript 2.7.0
  // ½ •
var BYE, KEYWORDS, PAUSE, Page, PageStandings, PageTables, Player, Tournament, currentPage, data, echo, findNumberOfDecimals, g, header, inverse, makePairs, matrix, pageStandings, pageTables, playersByID, playersByScore, pr, random, range, seed, span, sum, sumNumbers, table, td, th, tournament, tr, xs,
  indexOf = [].indexOf,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

import {
  Edmonds
} from './blossom.js';

range = _.range;

echo = console.log;

BYE = -1;

PAUSE = -2;

KEYWORDS = {};

KEYWORDS.TITLE = 'text';

KEYWORDS.DATE = 'text';

KEYWORDS.ROUND = 'integer';

KEYWORDS.PAUSED = '!-separated integers';

KEYWORDS.TPP = 'integer (Tables Per Page, default: 30)';

KEYWORDS.PPP = 'integer (Players Per Page, default: 60)';

g = {};

// Dessa två listor pekar båda på samma data. De är dock olika sorterade
playersByID = []; // ELO

playersByScore = []; // Performance

tournament = null;

currentPage = null;

span = function(s, attrs = "") {
  return `<span ${attrs}>${s}</span>`;
};

table = function(s, attrs = "") {
  return `<table ${attrs}>\n${s}</table>`;
};

tr = function(s, attrs = "") {
  return `<tr ${attrs}>${s}</tr>\n`;
};

td = function(s, attrs = "") {
  return `<td ${attrs}>${s}</td>`;
};

th = function(s, attrs = "") {
  return `<th ${attrs}>${s}</th>`;
};

seed = 0;

random = function() {
  return (((Math.sin(seed++) / 2 + 0.5) * 10000) % 100) / 100;
};

header = document.getElementById('header');

makePairs = function(solution) {
  var j, k, len, ref, res;
  res = [];
  ref = range(solution.length);
  for (k = 0, len = ref.length; k < len; k++) {
    j = ref[k];
    if (j < solution[j]) {
      res.push([j, solution[j]]);
    }
  }
  return res;
};

findNumberOfDecimals = function(lst) {
  var best, i, ibest, item, k, len, ref, unik;
  best = 0;
  ref = range(6);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    unik = _.uniq((function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = lst.length; l < len1; l++) {
        item = lst[l];
        results.push(item.toFixed(i));
      }
      return results;
    })());
    if (unik.length > best) {
      [best, ibest] = [unik.length, i];
    }
  }
  return ibest;
};

console.assert(0 === findNumberOfDecimals([1234, 1235]));

console.assert(0 === findNumberOfDecimals([1234.146, 1234.146]));

console.assert(0 === findNumberOfDecimals([1235.123, 1236.123]));

console.assert(1 === findNumberOfDecimals([1234, 1234.4]));

console.assert(3 === findNumberOfDecimals([1234.146, 1234.147]));

export var handleFile = function(filename, data) {
  echo('handleFile', filename, data);
  tournament = new Tournament(filename, data);
  pageStandings.makeHTML();
  return pageTables.makeHTML();
};

// for control in document.querySelectorAll '[tabindex]'
// 	control.onkeydown = currentPage.handleKeyDown
sum = function(s) {
  var item, k, len, res;
  res = 0;
  for (k = 0, len = s.length; k < len; k++) {
    item = s[k];
    res += parseFloat(item);
  }
  return res;
};

sumNumbers = function(arr) {
  var item, k, len, res;
  res = 0;
  for (k = 0, len = arr.length; k < len; k++) {
    item = arr[k];
    res += item;
  }
  return res;
};

inverse = function(s) {
  var ch, k, len, res;
  res = [];
  for (k = 0, len = s.length; k < len; k++) {
    ch = s[k];
    res.push("210"[parseInt(ch)]);
  }
  return res;
};

console.assert(["2", "2"], inverse(["0", "0"]));

console.assert(["1", "1"], inverse(["1", "1"]));

console.assert(["0", "0"], inverse(["2", "2"]));

xs = function(ratings, own_rating) {
  var rating;
  return sumNumbers((function() {
    var k, len, results;
    results = [];
    for (k = 0, len = ratings.length; k < len; k++) {
      rating = ratings[k];
      results.push(1 / (1 + 10 ** ((rating - own_rating) / 400)));
    }
    return results;
  })());
};

pr = function(rs, s, lo = 0, hi = 4000, r = (lo + hi) / 2) {
  if (hi - lo < 0.001) {
    return r;
  } else if (s > xs(rs, r)) {
    return pr(rs, s, r, hi);
  } else {
    return pr(rs, s, lo, r);
  }
};

// echo 'pr', pr [1900,2100], 1
Player = class Player {
  constructor(elo, name, opp1 = [], col1 = [], res1 = []) {
    this.elo = elo;
    this.name = name;
    this.opp = opp1;
    this.col = col1;
    this.res = res1;
    this.active = true;
    this.error = false;
  }

  // @opp är en lista med heltal
  // @col är en lista med -1 och 1
  // @res är en lista med strängar "0", "1" eller "2"
  // ["2","0"]   => 1.0 pp
  check() { // Kontrollerar att resultaten är konsistenta
    var a, b, q, r;
    return true;
    r = this.opp.length - 1;
    if (r === -1) {
      return true;
    }
    q = playersByID[this.opp[r]];
    if (this.res.length - 1 < r) {
      echo(`Resultat saknas för ${this.name}`);
      return false;
    }
    if (q.res.length - 1 < r) {
      echo(`Resultat saknas för ${q.name}`);
      return false;
    }
    a = this.res[r] / 2;
    b = q.res[r] / 2;
    if (a + b === 1) {
      return true;
    }
    echo(`Felaktigt resultat för ${this.name} mot ${q.name}: ${a} - ${b}`);
    return false;
  }

  balans() {
    return sum(this.col);
  }

  read(player) {
    var arr, col, k, len, ocr, ocrs, results;
    this.elo = parseInt(player[0]);
    this.name = player[1];
    this.opp = [];
    this.col = [];
    this.res = [];
    if (player.length < 3) {
      return;
    }
    ocrs = player.slice(2);
    results = [];
    for (k = 0, len = ocrs.length; k < len; k++) {
      ocr = ocrs[k];
      if (indexOf.call(ocr, 'w') >= 0) {
        col = 'w';
      }
      if (indexOf.call(ocr, 'b') >= 0) {
        col = 'b';
      }
      // if '_' in ocr then col='_'
      arr = ocr.split(col);
      this.opp.push(parseInt(arr[0]));
      this.col.push({
        w: 1,
        b: -1
      }[col]);
      if (arr.length === 2 && arr[1].length === 1) {
        results.push(this.res.push(arr[1]));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  write() { // 1234!Christer!12w0!23b1!14w2   Elo:1234 Name:Christer opponent:23 color:b result:1
    var i, ocr, r, res;
    res = [];
    res.push(this.elo);
    res.push(this.name);
    r = this.opp.length;
    if (r === 0) {
      return res.join(SEPARATOR);
    }
    ocr = (function() {
      var k, len, ref, results;
      ref = range(r);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        results.push(`${this.opp[i]}${this.col[i]}${i < r ? this.res[i] : ''}`);
      }
      return results;
    }).call(this);
    res.push(ocr.join(SEPARATOR));
    return res.join(SEPARATOR);
  }

  score() {
    var ch, i, k, l, len, len1, ref, ref1, summa;
    summa = 0;
    if (this.opp.length === 0) {
      return 0;
    }
    ref = range(this.opp.length - 1);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = this.res[i];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        ch = ref1[l];
        summa += parseInt(ch);
      }
    }
    return summa / 2;
  }

  average() {
    var i, k, len, n, opp, p, ref, summa;
    summa = 0;
    n = this.opp.length - 1;
    if (n === -1) {
      return 0;
    }
    ref = range(n);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      opp = this.opp[i];
      p = playersByID[opp];
      summa += p.elo;
    }
    if (n === 0) {
      return 0;
    } else {
      return summa / n;
    }
  }

  prettyScore() {
    return this.score().toFixed(1).replace('.5', '½').replace('.0', '&nbsp;').replace("0½", "½&nbsp;");
  }

  performance_rating(ratings, score) {
    var hi, lo, rating;
    lo = 0;
    hi = 4000;
    while (hi - lo > 0.0000001) {
      rating = (lo + hi) / 2;
      if (score > xs(ratings, rating)) {
        lo = rating;
      } else {
        hi = rating;
      }
    }
    return rating;
  }

  // Använd två extremvärden då man har 0% eller 100%
  extrapolate(a0, b0, elos) {
    var a, b;
    a = this.performance_rating(elos, a0);
    b = this.performance_rating(elos, b0);
    return b + b - a;
  }

  performance() {
    var elos, k, len, n, pp, r, ref;
    pp = this.score();
    elos = [];
    if (this.opp.length === 0) {
      return 0;
    }
    ref = range(this.opp.length - 1);
    for (k = 0, len = ref.length; k < len; k++) {
      r = ref[k];
      // if @opp[r] == BYE then continue
      // if @opp[r] == PAUSE then continue
      elos.push(playersByID[this.opp[r]].elo);
    }
    n = elos.length;
    if (n === 1) {
      if (pp === 0) {
        return this.extrapolate(0.50, 0.25, elos);
      }
      if (pp === n) {
        return this.extrapolate(0.50, 0.75, elos);
      }
    } else {
      if (pp === 0) {
        return this.extrapolate(1, 0.5, elos);
      }
      if (pp === n) {
        return this.extrapolate(n - 1, n - 0.5, elos);
      }
    }
    return this.performance_rating(elos, pp);
  }

  prettyRes(r) {
    var ch;
    if (this.res[r] === void 0) {
      return "";
    }
    return ((function() {
      var k, len, ref, results;
      ref = this.res[r];
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        ch = ref[k];
        results.push("0½1"[ch]);
      }
      return results;
    }).call(this)).join(""); // "12" => "½1"
  }

  prettyCol(r) {
    if (this.col[r] === 1) {
      return "ul";
    } else {
      return "ur"; // 1 => "black"
    }
  }

  prettyCol2(r) {
    if (this.col[r] === 1) {
      return "lr";
    } else {
      return "ll"; // 1 => "white"
    }
  }

  result(r, index) {
    var s, t;
    s = span(this.opp[r] + 1, "class=" + this.prettyCol(r));
    t = span(this.prettyRes(r), "class=" + this.prettyCol2(r));
    return td(s + t);
  }

};

matrix = function(i) {
  var k, len, pi, r, ref, res;
  res = Array(playersByID.length).fill('•');
  res[i] = '*';
  if (i === 0) {
    res[0] = 'H';
  }
  if (i === playersByID.length - 1) {
    res[i] = 'L';
  }
  pi = playersByID[i];
  ref = range(pi.opp.length);
  for (k = 0, len = ref.length; k < len; k++) {
    r = ref[k];
    res[pi.opp[r]] = "123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[r];
  }
  return res.join(" ");
};

Page = class Page {
  constructor() {}

  hide() {
    return this.app.style.display = 'none';
  }

  show() {
    return this.app.style.display = 'block';
  }

  makeHeader() {
    var isoDate, s;
    isoDate = new Date().toLocaleString('sv-se', {
      hour12: false
    }).replace(',', '');
    s = "";
    s += td(`Rond ${tournament.round}`, 'style="border:none; width:33%; text-align:left"');
    s += td(tournament.title, 'style="border:none; width:33%; text-align:center"');
    s += td(isoDate, 'style="border:none; width:33%; text-align:right"');
    header = document.getElementById('header');
    return header.innerHTML = table(tr(s), 'style="width: 100%; font-weight: bold"');
  }

  moveFocus(next) {
    var focusableArray, n;
    this.current = next;
    focusableArray = document.querySelectorAll('[tabindex]');
    n = focusableArray.length;
    if (this.current <= -1) {
      this.current = 0;
    }
    if (this.current >= n) {
      this.current = n - 1;
    }
    return focusableArray[this.current].focus();
  }

};

PageTables = class PageTables extends Page {
  constructor() {
    super();
    this.app = document.getElementById('app');
    this.klass = 'PageTables';
    this.current = 0;
  }

  headers() {
    var h;
    h = "";
    h += th("b", 'style="border:none"');
    h += th("vit", 'style="border:none"');
    h += th("elo", 'style="border:none"');
    h += th("result", 'style="border:none"');
    h += th("elo", 'style="border:none"');
    h += th("svart", 'style="border:none"');
    h += th("diff", 'style="border:none"');
    return h;
  }

  makeHTML() {
    var R, a, b, i, k, len, p, q, ref, s, t, ta_left, ta_right, totalDiff;
    R = tournament.round; // playersByScore[0].opp.length
    // echo 'PageTables.makeHTML',R
    ta_left = "style='text-align:left'";
    ta_right = "style='text-align:right'";
    t = "";
    totalDiff = 0;
    ref = range(tournament.tables.length);
    // playersByScore.length
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      [a, b] = tournament.tables[i];
      p = playersByScore[a];
      q = playersByScore[b];
      s = "";
      s += td(i + 1); // id
      s += td(p.name, ta_left); // namn
      s += td(p.elo); // elo
      
      // fyll i senaste resultaten om de finns!
      s += td("&nbsp; - &nbsp;"); // res
      s += td(q.elo); // elo
      s += td(q.name, ta_left); // namn
      s += td(p.elo - q.elo, ta_right); // diff
      totalDiff += Math.abs(p.elo - q.elo);
      t += tr(s, `tabindex=${i}`);
    }
    // echo 'totalDiff',totalDiff
    t = tr(this.headers(R)) + t;
    return this.app.innerHTML = table(t, 'style="border:none"');
  }

  
    // # Eftersom båda players + tables är tabbade samtidigt, måste players ignoreras här.
  // focusableArray = document.querySelectorAll('[tabindex]')
  // # focusableArray = Array.from(focusable) #.slice playersByID.length,focusable.length
  // # echo 'PageTables.moveFocus',focusableArray.length,next

    // if next <= -1 then next = 0
  // if next >= focusableArray.length then next = focusableArray.length - 1
  // newIndex = next #%% focusableArray.length

    // # newIndex = next %% focusableArray.length
  // # echo 'Tables.moveFocus',next,focusableArray.length,newIndex
  // @current = newIndex
  // focusableArray[newIndex].focus()
  handleKeyDown(event) {
    var cell, index, p, q, r, ref, ref1, ref2, snart, tbl, trans;
    // echo 'handleKeyDown Tables',event.key
    if ((ref = event.key) === 'ArrowLeft' || ref === 'ArrowRight') {
      currentPage.hide();
      currentPage = pageStandings;
      currentPage.makeHTML();
      currentPage.show();
      currentPage.moveFocus(currentPage.current);
      return;
    }
    index = event.target.tabIndex;
    if (event.key === 'ArrowDown') {
      currentPage.moveFocus(index + 1);
    }
    if (event.key === 'ArrowUp') {
      currentPage.moveFocus(index - 1);
    }
    if (event.key === 'Home') {
      currentPage.moveFocus(0);
    }
    if (event.key === 'End') {
      currentPage.moveFocus(tournament.tables.length - 1);
    }
    if (event.key === 'Enter') {
      echo('Pair');
      if (tournament.pair()) {
        // currentPage.hide()
        // currentPage = pageTables
        pageTables.makeHTML();
        pageStandings.makeHTML();
      }
    }
    // currentPage.show()
    if ((ref1 = event.key) === 'Delete' || ref1 === '0' || ref1 === ' ' || ref1 === '1') {
      tbl = tournament.tables[index];
      p = playersByID[tbl[0]];
      q = playersByID[tbl[1]];
      r = p.opp.length - 1;
      cell = event.target.children[3];
      if (event.key === 'Delete') {
        p.res[r] = "";
        q.res[r] = "";
        cell.innerHTML = "&nbsp; - &nbsp;"; // p.result r,index-1
        currentPage.moveFocus(index + 1);
      }
      if (ref2 = event.key, indexOf.call("0 1", ref2) >= 0) {
        trans = {
          "0": "0",
          ' ': "1",
          "1": "2"
        };
        snart = {
          "0": "2",
          ' ': "1",
          "1": "0"
        };
        p.res[r] = trans[event.key];
        q.res[r] = snart[event.key];
        cell.innerHTML = {
          "0": "0 - 1",
          ' ': "½ - ½",
          "1": "1 - 0"
        }[event.key];
        return currentPage.moveFocus(index + 1);
      }
    }
  }

};

PageStandings = class PageStandings extends Page {
  constructor() {
    super();
    this.app = document.getElementById('app');
    this.klass = 'PageStandings';
    this.current = 0;
  }

  headers(R) {
    var h, i, k, len, ref;
    h = "";
    //h += th "pos",'style="border:none"'
    h += th("id", 'style="border:none"');
    h += th("namn", 'style="border:none"');
    h += th("elo", 'style="border:none"');
    ref = range(R);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      h += th(i + 1, 'style="border:none"');
    }
    h += th("pr", 'style="border:none"');
    h += th("pp", 'style="border:none"');
    h += th("bf", 'style="border:none"');
    h += th("*", 'style="border:none"');
    h += th("avg", 'style="border:none"');
    return h;
  }

  makeHTML() {
    var R, bf, decimals, i, k, l, len, len1, p, prs, r, ref, ref1, s, t, ta_center, ta_center_strong, ta_left, ta_right;
    R = tournament.round; // playersByScore[0].opp.length
    // echo 'PageStandings.makeHTML',R
    ta_left = "style='text-align:left'";
    ta_right = "style='text-align:right'";
    ta_center = "style='text-align:center'";
    ta_center_strong = "style='text-align:center; font-weight: bold;'";
    prs = (function() {
      var k, len, results;
      results = [];
      for (k = 0, len = playersByID.length; k < len; k++) {
        p = playersByID[k];
        results.push(p.performance());
      }
      return results;
    })();
    decimals = findNumberOfDecimals(prs);
    t = "";
    ref = range(playersByScore.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      p = playersByScore[i];
      //if i==0 then current = p.id
      s = "";
      //s += td i+1,ta_right # pos
      s += td(p.id + 1, ta_right); // id
      s += td(p.name, ta_left); // namn
      s += td(p.elo); // elo
      ref1 = range(R);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        r = ref1[l];
        s += p.result(r, i); // ronder
      }
      
      // pr
      pr = p.performance();
      if (pr < 3999) {
        s += td(pr.toFixed(decimals)); //,ta_right
      } else {
        s += td("");
      }
      s += td(p.prettyScore(), ta_right); // pp
      
      // s += td "",'style="width:5px;border-top:none; border-bottom:none"' # empty

      // s += td p.table + p.prettyCol(R-1)[0] + p.prettyCol2(R-1)[0],ta_center
      // bf
      if (p.table) {
        bf = p.table + {
          l: 'B',
          r: 'W'
        }[p.prettyCol(R - 1)[1]];
      } else {
        bf = "";
      }
      s += td(bf, ta_center_strong);
      // diff
      // if R >= 1 then s += td playersByID[p.opp[R-1]].elo - p.elo, ta_right else s += td "",ta_right

      // id:bf
      // q = playersByID[i]
      // if R >= 1 then s += td "#{i+1}:#{q.table + {l:'B',r:'W'}[q.prettyCol(R-1)[1]]}" , ta_right else s += td "",ta_right

      // s += td matrix i
      //echo matrix i
      s += td(""); // * (pause)
      s += td(p.average().toFixed(1));
      t += tr(s, `tabindex=${i}`);
    }
    t = tr(this.headers(R)) + t;
    return this.app.innerHTML = table(t, 'style="border:none"');
  }

  handleKeyDown(event) { // Enkelrond
    var cell, dir, i, index, ix, k, key, len, n, p, r, ref, ref1, ref2, results;
    if ((ref = event.key) === ' ' || ref === 'ArrowDown' || ref === 'ArrowUp') {
      event.preventDefault();
    }
    if ((ref1 = event.key) === 'ArrowLeft' || ref1 === 'ArrowRight') {
      currentPage.hide();
      currentPage = pageTables;
      currentPage.makeHTML();
      currentPage.show();
      currentPage.moveFocus(currentPage.current);
      return;
    }
    
    // echo 'handleKeyDown Standings',event.key
    if (event === void 0) {
      return;
    }
    index = event.target.tabIndex; // - 1
    p = playersByScore[index];
    r = p.opp.length - 1;
    cell = event.target.children[3 + r];
    if (event.key === 'Enter') {
      if (tournament.pair()) {
        currentPage.hide();
        currentPage = pageTables;
        pageTables.makeHTML();
        // pageStandings.makeHTML()
        currentPage.show();
      }
    }
    if (event.key === 'ArrowDown') {
      currentPage.moveFocus(index + 1);
    }
    if (event.key === 'ArrowUp') {
      currentPage.moveFocus(index - 1);
    }
    if (event.key === 'Home') {
      currentPage.moveFocus(0);
    }
    if (event.key === 'End') {
      currentPage.moveFocus(playersByID.length - 1);
    }
    // Sökning
    key = event.key.toUpperCase();
    if (key === event.key) {
      dir = -1;
    } else {
      dir = 1;
    }
    if (indexOf.call("ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ", key) >= 0) {
      index = event.target.tabIndex; // - 1
      n = playersByScore.length;
      ref2 = range(n);
      results = [];
      for (k = 0, len = ref2.length; k < len; k++) {
        i = ref2[k];
        if (dir === 1) {
          ix = (index + i + 1) % n;
        } else {
          ix = modulo(index - i - 1, n);
        }
        p = playersByScore[ix];
        if (p.name.startsWith(key)) {
          currentPage.moveFocus(ix);
          break;
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  }

};

Tournament = class Tournament {
  constructor(filename, data) {
    this.fetchData(filename, data);
    playersByScore = _.clone(playersByID);
    this.tables = [];
    this.round = 0;
    echo('playersByScore', playersByScore);
  }

  pair() {
    var k, len, p, solution;
    for (k = 0, len = playersByID.length; k < len; k++) {
      p = playersByID[k];
      if (!p.check()) {
        return false;
      }
    }
    solution = this.findSolution(this.makeEdges(-1));
    this.tables = makePairs(solution);
    this.round += 1;
    currentPage.makeHeader();
    echo('tables', this.tables);
    // paret med högst elo sitter på bord 1
    this.tables.sort(function(a, b) {
      var a0, a1, b0, b1;
      a0 = playersByID[a[0]].elo;
      a1 = playersByID[a[1]].elo;
      b0 = playersByID[b[0]].elo;
      b1 = playersByID[b[1]].elo;
      return b0 + b1 - a0 - a1;
    });
    this.tables = this.makeOppColRes(this.tables);
    this.sort();
    currentPage.makeHTML();
    // for control in document.querySelectorAll '[tabindex]'
    // 	control.onkeydown = currentPage.handleKeyDown
    return true;
  }

  fetchData(filename, data) {
    var a, arr, b, hash, helpText, i, id, item, k, key, keyword, l, len, len1, len2, len3, len4, len5, len6, line, m, nr, o, p, pa, pb, player, players, ref, ref1, ref2, ref3, ref4, ref5, u, v, value, w;
    // randomSeed 99
    this.filename = filename.replaceAll(".txt", "");
    data = data.split('\n');
    hash = {};
    // default values
    hash.PLAYERS = [];
    hash.TITLE = '';
    hash.DATE = '';
    hash.ROUND = 0;
    hash.TPP = 30;
    hash.PPP = 60;
    hash.PAUSED = "";
    for (nr = k = 0, len = data.length; k < len; nr = ++k) {
      line = data[nr];
      line = line.trim();
      if (line.length === 0) {
        continue;
      }
      arr = line.split('=');
      if (arr.length === 2) {
        if (!(arr[0] in KEYWORDS)) {
          helpText = ((function() {
            var results;
            results = [];
            for (key in KEYWORDS) {
              value = KEYWORDS[key];
              results.push(`    ${key}: ${value}`);
            }
            return results;
          })()).join('\n');
          keyword = `\"${arr[0]}\"`;
          alert(`${keyword} in line ${nr + 1} is not one of\n${helpText}`);
          return;
        }
        hash[arr[0]] = arr[1];
      } else {
        if (indexOf.call(line, '!') < 0) {
          alert(`${line}\n in line ${nr + 1}\n must look like\n    2882!CARLSEN Magnus or\n    1601!NILSSON Christer!2w0`);
          return;
        }
        arr = line.split('!');
        if (!/^\d{4}$/.test(arr[0])) {
          alert(`${arr[0]}\n in line ${nr + 1}\n must have four digits`);
          return;
        }
        ref = range(2, arr.length);
        for (l = 0, len1 = ref.length; l < len1; l++) {
          i = ref[l];
          item = arr[i];
          if (!/^-?\d+(w|_|b)[0-2]$/.test(item)) {
            alert(`${item}\n in line ${nr + 1}\n must follow the format <number> <color> <result>\n  where color is one of w,b or _\n  and result is one of 0, 1 or 2`);
            return;
          }
        }
        hash.PLAYERS.push(arr);
      }
    }
    this.players = [];
    this.title = hash.TITLE;
    this.datum = hash.DATE;
    this.round = parseInt(hash.ROUND);
    this.tpp = parseInt(hash.TPP); // Tables Per Page
    this.ppp = parseInt(hash.PPP); // Players Per Page
    this.paused = hash.PAUSED; // list of zero based ids
    players = hash.PLAYERS;
    g.N = players.length;
    if (!((4 <= (ref1 = g.N) && ref1 < 100))) {
      alert("Number of players must be between 4 and 99!");
      return;
    }
    playersByID = [];
    ref2 = range(g.N);
    for (m = 0, len2 = ref2.length; m < len2; m++) {
      i = ref2[m];
      player = new Player(i);
      player.read(players[i]);
      playersByID.push(player);
    }
    if (this.paused === "") {
      this.paused = [];
    } else {
      this.paused = this.paused.split('!');
      ref3 = this.paused;
      for (o = 0, len3 = ref3.length; o < len3; o++) {
        id = ref3[o];
        if (id !== "") {
          playersByID[id].active = false;
        }
      }
    }
    g.average = 0;
    ref4 = range(g.N);
    for (u = 0, len4 = ref4.length; u < len4; u++) {
      i = ref4[u];
      playersByID[i].elo = parseInt(playersByID[i].elo);
      g.average += playersByID[i].elo;
    }
    g.average /= g.N;
    // console.log 'average',g.average
    playersByID.sort(function(a, b) {
      if (a.elo !== b.elo) {
        return b.elo - a.elo;
      }
      if (a.name > b.name) {
        return 1;
      } else {
        return -1;
      }
    });
    ref5 = range(g.N);
    for (v = 0, len5 = ref5.length; v < len5; v++) {
      i = ref5[v];
      playersByID[i].id = i;
    }
    echo('playersByID', playersByID);
    
    // @playersByName = _.sortBy @playersByID, (player) -> player.name
    // echo 'playersByName', @playersByName

    // extract @pairs from the last round
    this.pairs = [];
    for (w = 0, len6 = playersByID.length; w < len6; w++) {
      p = playersByID[w];
      a = p.id;
      b = _.last(p.opp);
      if (a < b) {
        pa = playersByID[a];
        pb = playersByID[b];
        this.pairs.push(1 === _.last(p.col) ? (pa.chair = 2 * this.pairs.length, pb.chair = 2 * this.pairs.length + 1, [a, b]) : (pa.chair = 2 * this.pairs.length + 1, pb.chair = 2 * this.pairs.length, [b, a])); // w
      }
    }
    echo('@pairs', this.pairs);
    // @dump 'fetch'
    return this.virgin = true;
  }

  ok(a, b) {
    var ref;
    return a.id !== b.id && (ref = a.id, indexOf.call(b.opp, ref) < 0) && Math.abs(a.balans() + b.balans()) <= 2;
  }

  makeEdges(iBye) { // iBye är ett id eller -1
    var a, arr, b, cost, diff, k, l, len, len1, pa, pb;
    arr = [];
    for (k = 0, len = playersByScore.length; k < len; k++) {
      pa = playersByScore[k];
      a = pa.id;
      if (!pa.active || a === iBye) {
        continue;
      }
      for (l = 0, len1 = playersByScore.length; l < len1; l++) {
        pb = playersByScore[l];
        b = pb.id;
        if (a === b) {
          continue;
        }
        if (!pb.active || b === iBye) {
          continue;
        }
        diff = Math.abs(pa.elo - pb.elo);
        cost = 9999 - diff ** 1.01;
        if (a < b) {
          continue;
        }
        if (this.ok(pa, pb)) {
          arr.push([a, b, cost]);
        }
      }
    }
    arr.sort(function(a, b) {
      return b[2] - a[2];
    });
    return arr;
  }

  findSolution(edges) {
    var edmonds;
    edmonds = new Edmonds(edges);
    return edmonds.maxWeightMatching(edges);
  }

  sort() {
    return playersByScore.sort(function(a, b) {
      return b.performance() - a.performance();
    });
  }

  // info : -> 
  // 	playersByScore[current].info()
  handleCol(pi, pa, flag) {
    var foundDiff, j, k, len, ref;
    if (pi.col.length === 0) {
      if (flag) {
        pi.col.push(-1);
        return pa.col.push(1);
      } else {
        pi.col.push(1);
        return pa.col.push(-1);
      }
    } else {
      if (pi.balans() > pa.balans()) {
        pi.col.push(-1);
        return pa.col.push(1);
      } else if (pi.balans() < pa.balans()) {
        pi.col.push(1);
        return pa.col.push(-1); // samma balans
      } else {
        foundDiff = false;
        ref = range(pi.col.length - 1, -1, -1);
        for (k = 0, len = ref.length; k < len; k++) {
          j = ref[k];
          if (pi.col[j] !== pa.col[j]) {
            foundDiff = true;
            pi.col.push(-pi.col[j]);
            pa.col.push(-pa.col[j]);
            break;
          }
        }
        if (!foundDiff) {
          if (flag) {
            pi.col.push(-1);
            return pa.col.push(1);
          } else {
            pi.col.push(1);
            return pa.col.push(-1);
          }
        }
      }
    }
  }

  handleRes(pi, pa) {
    var sa, si, z;
    z = random();
    [si, sa] = [1, 1];
    if (z < 0.45) {
      [si, sa] = [2, 0];
    }
    if (z > 0.55) {
      [si, sa] = [0, 2];
    }
    pi.res.push(si.toString());
    return pa.res.push(sa.toString());
  }

  // uppdaterar opp och col
  makeOppColRes(pairs, flag = false) {
    var a, b, bord, k, len, n, pa, pair, pb, res;
    bord = 0;
    res = [];
    for (k = 0, len = pairs.length; k < len; k++) {
      pair = pairs[k];
      a = pair[0];
      b = pair[1];
      pa = playersByScore[a];
      pb = playersByScore[b];
      bord += 1;
      pa.table = bord;
      pb.table = bord;
      pa.opp.push(b);
      pb.opp.push(a);
      this.handleCol(pa, pb, bord % 2 === 0);
      // vid lika färgvärden, alternera
      n = pa.col.length;
      if (pa.col[n - 1] === 1) {
        res.push([a, b]);
      } else {
        res.push([b, a]);
      }
    }
    return res;
  }

};

data = `TITLE=Senior Stockholm
DATE=2025-01-19
ROUND=0
TPP=30
PPP=60
PAUSED=

1825!JOHANSSON Lennart
1697!BJÖRKDAHL Göran
1684!SILINS Peteris
1681!STOLOV Leonid
1644!PETTERSSON Lars-Åke
1598!ISRAEL Dan
1598!AIKIO Onni
1583!PERSSON Kjell
1561!LILJESTRÖM Tor
1559!LEHVONEN Jouko
1539!ANDERSSON Lars Owe
1535!ÅBERG Lars-Erik
1532!ANTONSSON Görgen
1400!STRÖMBÄCK Henrik`;

pageStandings = new PageStandings();

pageTables = new PageTables();

tournament = new Tournament("demo", data);

currentPage = pageStandings;

currentPage.makeHeader();

currentPage.makeHTML();

currentPage.moveFocus(0);

window.addEventListener('keydown', function(event) {
  // echo 'keydown',currentPage.klass
  return currentPage.handleKeyDown(event);
});

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\FairPair2\coffee\sketch.coffee