// Generated by CoffeeScript 2.7.0
  // ½ •
var BYE, PAUSE, PPR, Player, Tournament, add, antal, app, bold, boldify, echo, i, input, k, l, len, len1, matrix, player, playersByELO, random, range, ref, ref1, seed, solution, sum, sumNumbers, table, td, th, tournament, tr,
  indexOf = [].indexOf;

import {
  Edmonds
} from './blossom.js';

PPR = 1; // Partier Per Rond och spelare

BYE = -1;

PAUSE = -2;

table = function(s, attrs = "") {
  return `<table ${attrs}>\n${s}</table>`;
};

tr = function(s, attrs = "") {
  return `<tr ${attrs}>${s}</tr>\n`;
};

td = function(s, attrs = "") {
  return `<td ${attrs}>${s}</td>`;
};

th = function(s, attrs = "") {
  return `<th ${attrs}>${s}</th>`;
};

input = function(s, attrs = "") {
  return `<input ${attrs}>${s}</input>`;
};

bold = function(s) {
  return `<b>${s}</b>`;
};

boldify = function(s) {
  if (indexOf.call(s, 'b') >= 0) {
    return bold(s);
  } else {
    return s;
  }
};

seed = 0;

random = function() {
  return (((Math.sin(seed++) / 2 + 0.5) * 10000) % 100) / 100;
};

sum = function(s) {
  var item, k, len, res;
  res = 0;
  for (k = 0, len = s.length; k < len; k++) {
    item = s[k];
    res += parseFloat(item);
  }
  return res;
};

sumNumbers = function(arr) {
  var item, k, len, res;
  res = 0;
  for (k = 0, len = arr.length; k < len; k++) {
    item = arr[k];
    res += item;
  }
  return res;
};

playersByELO = [];

Player = class Player {
  constructor(elo1, name1, opp1, col1, res1) {
    this.elo = elo1;
    this.name = name1;
    this.opp = opp1;
    this.col = col1;
    this.res = res1;
    this.active = true;
  }

  // @opp är en lista med heltal
  // @col är en lista med -1 och 1
  // @res håller ihop partierna i en sträng per rond och spelare
  // Detta för att hantera dubbelrond
  // Enkelrond:  ["2","0"]   => 1.0 pp
  // Dubbelrond: ["22","01"] => 2.5 pp
  balans() {
    return sum(this.col);
  }

  score() {
    var ch, k, l, len, len1, ref, res, summa;
    summa = 0;
    ref = this.res;
    for (k = 0, len = ref.length; k < len; k++) {
      res = ref[k];
      for (l = 0, len1 = res.length; l < len1; l++) {
        ch = res[l];
        summa += parseInt(ch);
      }
    }
    return summa / 2;
  }

  expected_score(ratings, own_rating) {
    var rating;
    return sumNumbers((function() {
      var k, len, results;
      results = [];
      for (k = 0, len = ratings.length; k < len; k++) {
        rating = ratings[k];
        results.push(1 / (1 + 10 ** ((rating - own_rating) / 400)));
      }
      return results;
    })());
  }

  performance_rating(ratings, score) {
    var hi, lo, rating;
    lo = 0;
    hi = 4000;
    while (hi - lo > 0.001) {
      rating = (lo + hi) / 2;
      if (score > this.expected_score(ratings, rating)) {
        lo = rating;
      } else {
        hi = rating;
      }
    }
    return rating;
  }

  performance() {
    var k, len, r, ratings, ref, total;
    total = this.score();
    ratings = [];
    ref = range(this.res.length);
    for (k = 0, len = ref.length; k < len; k++) {
      r = ref[k];
      // if @opp[r] == BYE then continue
      // if @opp[r] == PAUSE then continue
      ratings.push(playersByELO[this.opp[r]].elo);
    }
    return this.performance_rating(ratings, total);
  }

  enhanced_performance() {
    var k, len, r, ratings, ref, total;
    total = this.score() + 0.5; // fiktiv remi
    ratings = [tournament.average];
    ref = range(this.res.length);
    for (k = 0, len = ref.length; k < len; k++) {
      r = ref[k];
      // if @opp[r] == BYE then continue
      // if @opp[r] == PAUSE then continue
      ratings.push(playersByELO[this.opp[r]].elo);
    }
    return this.performance_rating(ratings, total);
  }

  prettyRes(r) {
    var ch;
    return ((function() {
      var k, len, ref, results;
      ref = this.res[r];
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        ch = ref[k];
        results.push("0½1"[ch]);
      }
      return results;
    }).call(this)).join(""); // "12" => "½1"
  }

  prettyCol(r) {
    if (this.col[r] === 1) {
      return "b";
    } else {
      return "w"; // "12" => "½1"
    }
  }

  result(r) {
    if (this.res[r]) {
      return `${this.opp[r] + 1}${this.prettyCol(r)}${this.prettyRes(r)}`;
    } else {
      return `${this.opp[r] + 1}${this.prettyCol(r)}`;
    }
  }

};

matrix = function(i) {
  var k, len, pi, r, ref, res;
  res = Array(playersByELO.length).fill('•');
  res[i] = '*';
  if (i === 0) {
    res[0] = 'H';
  }
  if (i === playersByELO.length - 1) {
    res[i] = 'L';
  }
  pi = playersByELO[i];
  ref = range(pi.opp.length);
  for (k = 0, len = ref.length; k < len; k++) {
    r = ref[k];
    res[pi.opp[r]] = "123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[r];
  }
  return res.join(" ");
};

add = function(elo, name) {
  var col, opp, res;
  opp = [];
  col = [];
  res = [];
  return playersByELO.push(new Player(elo, name, opp, col, res));
};

range = _.range;

echo = console.log;

Tournament = class Tournament {
  constructor(players) {
    this.playersByScore = _.clone(players);
    echo('playersByScore', this.playersByScore);
    this.average = this.calc_average();
    echo('average', this.average);
  }

  ok(a, b) {
    var ref;
    return a.id !== b.id && (ref = a.id, indexOf.call(b.opp, ref) < 0) && Math.abs(a.balans() + b.balans()) <= 2;
  }

  calc_average() {
    var k, len, p, ref, res;
    res = 0;
    ref = this.playersByScore;
    for (k = 0, len = ref.length; k < len; k++) {
      p = ref[k];
      res += p.elo;
    }
    return Math.round(res / this.playersByScore.length);
  }

  makeEdges(iBye) { // iBye är ett id eller -1
    var a, arr, b, cost, diff, k, l, len, len1, pa, pb, ref, ref1;
    arr = [];
    ref = this.playersByScore;
    for (k = 0, len = ref.length; k < len; k++) {
      pa = ref[k];
      a = pa.id;
      if (!pa.active || a === iBye) {
        continue;
      }
      ref1 = this.playersByScore;
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        pb = ref1[l];
        b = pb.id;
        if (a === b) {
          continue;
        }
        if (!pb.active || b === iBye) {
          continue;
        }
        diff = Math.abs(pa.elo - pb.elo);
        cost = 9999 - diff ** 1.01;
        //cost = 999999 - diff ** 2
        if (a < b) {
          continue;
        }
        if (this.ok(pa, pb)) {
          arr.push([a, b, cost]);
        }
      }
    }
    arr.sort(function(a, b) {
      return b[2] - a[2];
    });
    echo(arr);
    return arr;
  }

  findSolution(edges) {
    var edmonds;
    edmonds = new Edmonds(edges);
    return edmonds.maxWeightMatching(edges);
  }

  // sort : -> @playersByScore.sort (a,b)-> b.score() - a.score()
  // sort : -> @playersByScore.sort (a,b)-> b.performance() - a.performance()
  sort() {
    return this.playersByScore.sort(function(a, b) {
      return b.enhanced_performance() - a.enhanced_performance();
    });
  }

  show() {
    var R, center, game, h, i, k, l, len, len1, len2, m, p, r, ref, ref1, ref2, right, s, t, txt;
    R = this.playersByScore[0].opp.length;
    t = "";
    right = 'style="text-align:right"';
    center = 'style="text-align:center"';
    ref = range(this.playersByScore.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      p = this.playersByScore[i];
      s = "";
      s += td(i + 1, center);
      s += td(p.id + 1, center);
      ref1 = range(R);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        r = ref1[l];
        game = p.result(r);
        txt = game.replace('w', '•').replace('b', '•');
        if (r === R - 1) {
          if (PPR === 2) {
            txt += input("", 'type="text" maxlength="2" style="width:16px" oninput="moveToNext(this)"'); //,right
          }
          if (PPR === 1) {
            txt += input("", 'type="text" maxlength="1" style="width:8px" oninput="moveToNext(this)"'); //,right
          }
        }
        if (indexOf.call(game, 'b') >= 0) {
          s += td(bold(txt), right);
        } else {
          s += td(txt, right);
        }
      }
      // else

      // s += td p.score(),right
      // s += td p.performance().toFixed(1),right
      s += td(p.enhanced_performance().toFixed(1), right);
      s += td(p.elo);
      s += td(p.name);
      s += td(boldify(p.table.toString() + p.prettyCol(R - 1)), center);
      // s += td matrix i
      t += tr(s);
    }
    h = "";
    h += th("pos");
    h += th("#");
    ref2 = range(R);
    for (m = 0, len2 = ref2.length; m < len2; m++) {
      i = ref2[m];
      h += th(i + 1);
    }
    h += th("EPR");
    h += th("elo");
    h += th("namn");
    h += th("bd");
    // h += th "1 2 3 4 5 6 7 8 9 0 1 2 3 4" # matris
    t = tr(h) + t;
    return table(t, 'style="border:1px solid black"');
  }

  handleCol(pi, pa) {
    var foundDiff, j, k, len, ref;
    if (pi.col.length === 0) {
      pi.col.push(-1);
      return pa.col.push(1);
    } else {
      if (pi.balans() > pa.balans()) {
        pi.col.push(-1);
        return pa.col.push(1);
      } else if (pi.balans() < pa.balans()) {
        pi.col.push(1);
        return pa.col.push(-1); // samma balans
      } else {
        foundDiff = false;
        ref = range(pi.col.length - 1, -1, -1);
        for (k = 0, len = ref.length; k < len; k++) {
          j = ref[k];
          if (pi.col[j] !== pa.col[j]) {
            foundDiff = true;
            pi.col.push(-pi.col[j]);
            pa.col.push(-pa.col[j]);
            break;
          }
        }
        if (!foundDiff) {
          pi.col.push(-1);
          return pa.col.push(1);
        }
      }
    }
  }

  handleRes(pi, pa) {
    var k, len, ppr, ref, sa, si, z;
    si = "";
    sa = "";
    ref = range(PPR);
    for (k = 0, len = ref.length; k < len; k++) {
      ppr = ref[k];
      z = random();
      if (z < 0.4) {
        si += "2";
        sa += "0";
      } else if (z > 0.6) {
        si += "0";
        sa += "2";
      } else {
        si += "1";
        sa += "1";
      }
    }
    pi.res.push(si);
    return pa.res.push(sa);
  }

  makeOppColRes(pairs, flag) {
    var a, bord, i, k, len, pa, pi, ref, results;
    bord = 0;
    ref = range(pairs.length);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      a = pairs[i];
      if (i < a) {
        pi = this.playersByScore[i];
        pa = this.playersByScore[a];
        bord += 1;
        pi.table = bord;
        pa.table = bord;
        pi.opp.push(a);
        pa.opp.push(i);
        this.handleCol(pi, pa);
        if (flag) {
          results.push(this.handleRes(pi, pa));
        } else {
          results.push(void 0);
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

add(1598, "AIKIO Onni");

add(1539, "ANDERSSON Lars Owe");

add(1532, "ANTONSSON Görgen");

add(1697, "BJÖRKDAHL Göran");

add(1598, "ISRAEL Dan");

add(1825, "JOHANSSON Lennart");

add(1559, "LEHVONEN Jouko");

add(1561, "LILJESTRÖM Tor");

add(1583, "PERSSON Kjell");

add(1644, "PETTERSSON Lars-Åke");

add(1684, "SILINS Peteris");

add(1681, "STOLOV Leonid");

add(1400, "STRÖMBÄCK Henrik");

add(1535, "ÅBERG Lars-Erik");

playersByELO.sort(function(a, b) {
  return b.elo - a.elo;
});

ref = range(playersByELO.length);
for (k = 0, len = ref.length; k < len; k++) {
  i = ref[k];
  player = playersByELO[i];
  player.id = i; // zero based internally
}

echo(playersByELO);

tournament = new Tournament(playersByELO);

antal = 13;

ref1 = range(antal);
for (l = 0, len1 = ref1.length; l < len1; l++) {
  i = ref1[l];
  solution = tournament.findSolution(tournament.makeEdges(-1));
  echo(solution);
  tournament.makeOppColRes(solution, i < antal - 1);
}

tournament.sort();

app = document.getElementById('app');

app.innerHTML = tournament.show();

// echo app.innerHTML

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\FairPair2\coffee\sketch.coffee