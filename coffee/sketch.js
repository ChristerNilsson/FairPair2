// Generated by CoffeeScript 2.7.0
  // ½ •

// 0 Förlust (0.0)
  // = Remi    (0.5)
  // 1 Vinst   (1.0)

// + Ospelad vinst
  // - Ospelad förlust
  // ? Ospelad uppskjutet, använd elodiff för att beräkna väntevärdet

// _ innebär att resultat saknas
var BYE, FIRST, KEYWORDS, PAUSE, Page, PageStandings, PageTables, Player, SEPARATOR, Tournament, backa, currentPage, data, echo, findNumberOfDecimals, g, header, inverse, isoDate, makePairs, pageStandings, pageTables, playersByID, playersByScore, pr, range, span, sum, sumNumbers, table, td, th, tournament, tr, xs,
  indexOf = [].indexOf,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

import {
  Edmonds
} from './blossom.js';

range = _.range;

echo = console.log;

// https://arxiv.org/html/2112.10522v2 Swiss using Blossom
BYE = -1;

PAUSE = -2;

SEPARATOR = '!';

FIRST = 1;

KEYWORDS = {};

KEYWORDS.TITLE = 'text';

KEYWORDS.DATE = 'text';

KEYWORDS.TYPE = 'FairPair or Swiss';

KEYWORDS.ROUND = 'integer';

KEYWORDS.ROUNDS = 'integer';

KEYWORDS.PAUSED = '!-separated integers';

g = {};

// Dessa två listor pekar båda på samma data. De är dock olika sorterade
playersByID = []; // ELO

playersByScore = []; // Performance

tournament = null;

currentPage = null;

span = function(s, attrs = "") {
  return `<span ${attrs}>${s}</span>`;
};

table = function(s, attrs = "") {
  return `<table ${attrs}>\n${s}</table>`;
};

tr = function(s, attrs = "") {
  return `<tr ${attrs}>${s}</tr>\n`;
};

td = function(s, attrs = "") {
  return `<td ${attrs}>${s}</td>`;
};

th = function(s, attrs = "") {
  return `<th ${attrs}>${s}</th>`;
};

header = document.getElementById('header');

isoDate = function() {
  return new Date().toLocaleString('sv-se', {
    hour12: false
  }).replace(',', '').replace(':', 'h').substring(0, 16);
};

backa = function(s) {
  return s.substring(0, s.length - 1);
};

console.assert("ab" === backa("abc"));

console.assert("a" === backa("ab"));

console.assert("" === backa("a"));

console.assert("" === backa(""));

makePairs = function(solution) {
  var j, k, len, ref, result;
  result = [];
  ref = range(solution.length);
  for (k = 0, len = ref.length; k < len; k++) {
    j = ref[k];
    if (j < solution[j]) {
      result.push([j, solution[j]]);
    }
  }
  return result;
};

findNumberOfDecimals = function(lst) {
  var best, i, ibest, item, k, len, ref, unik;
  best = 0;
  ref = range(6);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    unik = _.uniq((function() {
      var l, len1, results1;
      results1 = [];
      for (l = 0, len1 = lst.length; l < len1; l++) {
        item = lst[l];
        results1.push(item.toFixed(i));
      }
      return results1;
    })());
    if (unik.length > best) {
      [best, ibest] = [unik.length, i];
    }
  }
  return ibest;
};

console.assert(0 === findNumberOfDecimals([1234, 1235]));

console.assert(0 === findNumberOfDecimals([1234.146, 1234.146]));

console.assert(0 === findNumberOfDecimals([1235.123, 1236.123]));

console.assert(1 === findNumberOfDecimals([1234, 1234.4]));

console.assert(3 === findNumberOfDecimals([1234.146, 1234.147]));

export var handleFile = function(filename, data) {
  echo('handleFile', filename);
  echo(data);
  tournament = new Tournament(filename, data);
  pageStandings.makeHTML();
  return pageStandings.makeHeader();
};

sum = function(s) {
  var item, k, len, result;
  result = 0;
  for (k = 0, len = s.length; k < len; k++) {
    item = s[k];
    result += parseFloat(item);
  }
  return result;
};

sumNumbers = function(arr) {
  var item, k, len, result;
  result = 0;
  for (k = 0, len = arr.length; k < len; k++) {
    item = arr[k];
    result += item;
  }
  return result;
};

inverse = function(s) {
  var ch, hash, k, len, result;
  hash = {
    '0': '1',
    '=': '=',
    '1': '0',
    '+': '+',
    '-': '-',
    '-': '+'
  };
  result = "";
  for (k = 0, len = s.length; k < len; k++) {
    ch = s[k];
    result += hash[s];
  }
  return result;
};

console.assert("0=1+-", inverse("1=0-+"));

xs = function(ratings, own_rating) {
  var rating;
  return sumNumbers((function() {
    var k, len, results1;
    results1 = [];
    for (k = 0, len = ratings.length; k < len; k++) {
      rating = ratings[k];
      results1.push(1 / (1 + 10 ** ((rating - own_rating) / 400)));
    }
    return results1;
  })());
};

pr = function(rs, s, lo = 0, hi = 4000, r = (lo + hi) / 2) {
  if (hi - lo < 0.001) {
    return r;
  } else if (s > xs(rs, r)) {
    return pr(rs, s, r, hi);
  } else {
    return pr(rs, s, lo, r);
  }
};

// echo 'pr', pr [1900,2100], 1
Player = class Player {
  constructor(elo, name, opp1 = [], col1 = "", res = "") {
    this.elo = elo;
    this.name = name;
    this.opp = opp1;
    this.col = col1;
    this.res = res;
    this.active = true;
    this.error = false;
    this.candidate = false;
  }

  // @opp är en lista med heltal
  // @col är en sträng med w eller b, ett tecken för varje rond
  // @res är en sträng med 0=1+-?  # + och - innebär att partiet ej spelats
  check() { // Kontrollera att opponent, färger och resultat är konsistenta
    var a, b, colors, k, len, p, q, r, ref, ref1, ref2, results;
    colors = 'bw wb'.split(' ');
    results = '01 10 == +- -+ ?? __'.split(' ');
    ref = range(this.opp.length);
    for (k = 0, len = ref.length; k < len; k++) {
      r = ref[k];
      if (this.opp[r] < 0) {
        continue; // frirond eller inaktiv
      }
      p = this;
      q = playersByID[this.opp[r]];
      if (p.res.length - 1 < r) {
        return `Resultat saknas för ${p.name}`;
      }
      if (q.res.length - 1 < r) {
        return `Resultat saknas för ${q.name}`;
      }
      a = p.opp[r];
      b = q.opp[r];
      if (b !== p.id || a !== q.id) {
        return `Opponenter stämmer ej för ${p.name} och ${q.name}`;
      }
      a = p.col[r];
      b = q.col[r];
      if (ref1 = a + b, indexOf.call(colors, ref1) < 0) {
        return `Felaktiga färger för ${p.name} mot ${q.name}: ${a} vs ${b}`;
      }
      a = p.res[r];
      b = q.res[r];
      if (ref2 = a + b, indexOf.call(results, ref2) < 0) {
        return `Felaktigt resultat för ${p.name} mot ${q.name}: ${a} vs ${b}`;
      }
    }
    return "";
  }

  balans() {
    var k, len, n, r, ref, ref1, result;
    result = 0;
    n = this.col.length;
    ref = range(n);
    for (k = 0, len = ref.length; k < len; k++) {
      r = ref[k];
      if (ref1 = this.res[r], indexOf.call('0=1?', ref1) >= 0) { // ignorera + och - 
        if (this.col[r] === 'w') {
          result += 1;
        }
        if (this.col[r] === 'b') {
          result -= 1;
        }
      }
    }
    return result;
  }

  // det interna och externa formatet bör överensstämma maximalt
  read(player) {
    var arr, col, k, len, ocr, ocrs, results1;
    this.elo = parseInt(player[0]);
    this.name = player[1];
    if (player.length < 3) {
      return;
    }
    ocrs = player.slice(2);
    this.opp = [];
    this.col = "";
    this.res = "";
    results1 = [];
    for (k = 0, len = ocrs.length; k < len; k++) {
      ocr = ocrs[k];
      if (indexOf.call(ocr, 'w') >= 0) {
        col = 'w';
      }
      if (indexOf.call(ocr, 'b') >= 0) {
        col = 'b';
      }
      this.col += col;
      arr = ocr.split(col);
      this.opp.push(parseInt(arr[0]) - FIRST); // opponenten
      if (arr.length === 2) {
        results1.push(this.res += arr[1]);
      } else {
        results1.push(void 0);
      }
    }
    return results1;
  }

  write() { // 1631!Christer!12w0!23b=!14w1   Elo:1631 Name:Christer opponent:23 color:b result:remi
    var i, k, len, ocr, r, ref, result, s;
    result = [];
    result.push(this.elo);
    result.push(this.name);
    r = this.opp.length;
    if (r === 0) {
      return result.join(SEPARATOR);
    }
    //echo @opp,@col,@res
    ocr = [];
    ref = range(r);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      s = "";
      if (this.opp[i] < 0) {
        s += this.opp[i];
      } else {
        s += this.opp[i] + FIRST;
      }
      s += this.col[i];
      s += this.res[i];
      //echo 's',s
      ocr.push(s);
    }
    result.push(ocr.join(SEPARATOR));
    return result.join(SEPARATOR);
  }

  score() {
    var ch, hash, i, k, l, len, len1, ref, ref1, summa;
    hash = {
      '0': 0,
      '=': 0.5,
      '1': 1,
      '+': 1,
      '-': 0,
      '?': 0.0
    };
    summa = 0;
    if (this.opp.length === 0) {
      return 0;
    }
    ref = range(tournament.round - 1);
    // @res.length - 1
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = this.res[i];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        ch = ref1[l];
        summa += hash[ch];
      }
    }
    return summa;
  }

  average() {
    var i, k, len, n, opp, p, ref, result;
    result = [];
    // n = @opp.length - 1
    n = tournament.round - 1;
    if (n === -1) {
      return 0;
    }
    ref = range(n);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      opp = this.opp[i];
      if (opp >= 0) {
        p = playersByID[opp];
        result.push(p.elo);
      }
    }
    n = result.length;
    if (n === 0) {
      return 0;
    }
    return sum(result) / n;
  }

  prettyScore() {
    return this.score().toFixed(1); // .replace('.5','=').replace('.0','&nbsp;').replace("0=","=&nbsp;")
  }

  performance_rating(ratings, score) {
    var hi, lo, rating;
    lo = 0;
    hi = 4000;
    while (hi - lo > 0.0000001) {
      rating = (lo + hi) / 2;
      if (score > xs(ratings, rating)) {
        lo = rating;
      } else {
        hi = rating;
      }
    }
    return rating;
  }

  // Använd två extremvärden då man har 0% eller 100%
  extrapolate(a0, b0, elos) {
    var a, b;
    a = this.performance_rating(elos, a0);
    b = this.performance_rating(elos, b0);
    return b + b - a;
  }

  performance() {
    var elos, hash, k, len, n, pp, q, r, ref, ref1;
    hash = {
      '0': 0,
      '=': 0.5,
      '1': 1,
      '+': 1,
      '-': 0 //, '?':0.5}
    };
    elos = [];
    if (this.res.length === 0) {
      return 0;
    }
    pp = 0;
    ref = range(tournament.round - 1);
    // @res.length
    for (k = 0, len = ref.length; k < len; k++) {
      r = ref[k];
      // if @opp[r] == BYE then continue
      // if @opp[r] == PAUSE then continue
      if (this.opp[r] >= 0) {
        // @res[r] kan vara underscore, vilket ska ignoreras
        q = playersByID[this.opp[r]];
        if (this.res[r] === "?") {
          elos.push(q.elo);
          pp += xs([q.elo], this.elo);
        } else if (ref1 = this.res[r], indexOf.call("0=1+-", ref1) >= 0) {
          elos.push(q.elo);
          pp += hash[this.res[r]];
        }
      } else {
        elos.push(this.elo);
        pp += hash[this.res[r]];
      }
    }
    // echo 'performance',pp,elos
    n = elos.length;
    if (n === 1) {
      if (pp === 0) {
        return this.extrapolate(0.50, 0.25, elos);
      }
      if (pp === n) {
        return this.extrapolate(0.50, 0.75, elos);
      }
    } else {
      if (pp === 0) {
        return this.extrapolate(1, 0.5, elos);
      }
      if (pp === n) {
        return this.extrapolate(n - 1, n - 0.5, elos);
      }
    }
    return this.performance_rating(elos, pp);
  }

  prettyRes(r) {
    if (this.res[r] === void 0) {
      return "";
    } else {
      return this.res[r];
    }
  }

  prettyCol(r) {
    if (this.col[r] === 'b') {
      return "ul";
    } else {
      return "ur"; // 1 => "black"
    }
  }

  prettyCol2(r) {
    if (this.col[r] === 'w') {
      return "lr";
    } else {
      return "ll"; // 1 => "white"
    }
  }

  prettyOpp(r) {
    var opp;
    opp = this.opp[r];
    if (opp === -2) {
      return '*';
    }
    if (opp === -1) {
      return 'F';
    }
    return opp + 1;
  }

  result(r, index) {
    var s, t;
    s = span(this.prettyOpp(r), "class=" + this.prettyCol(r));
    t = span(this.prettyRes(r), "class=" + this.prettyCol2(r));
    return td(s + t);
  }

};

Page = class Page {
  constructor() {}

  makeHeader() {
    var s;
    s = "";
    s += td(`Rond ${tournament.round} av ${tournament.rounds}`, 'style="border:none; width:33%; text-align:left"');
    s += td(tournament.type, 'style="border:none; width:33%; text-align:center"');
    s += td(tournament.title + ' ' + isoDate(), 'style="border:none; width:33%; text-align:right"');
    header = document.getElementById('header');
    return header.innerHTML = table(tr(s), 'style="width: 100%; font-weight: bold"');
  }

  moveFocus(next) {
    var focusableArray, n;
    this.current = next;
    focusableArray = document.querySelectorAll('[tabindex]');
    n = focusableArray.length;
    if (this.current <= -1) {
      this.current = 0;
    }
    if (this.current >= n) {
      this.current = n - 1;
    }
    return focusableArray[this.current].focus();
  }

};

PageTables = class PageTables extends Page {
  constructor() {
    super();
    this.app = document.getElementById('app');
    this.klass = 'PageTables';
    this.current = 0;
  }

  headers() {
    var h;
    h = "";
    h += th("b", 'style="border:none"');
    h += th("vit", 'style="border:none"');
    h += th("elo", 'style="border:none"');
    h += th("result", 'style="border:none"');
    h += th("elo", 'style="border:none"');
    h += th("svart", 'style="border:none"');
    h += th("diff", 'style="border:none"');
    return h;
  }

  makeHTML() {
    var R, a, b, i, k, len, p, q, ref, s, t, ta_left, ta_right, totalDiff;
    R = tournament.round; // playersByScore[0].opp.length
    // echo 'PageTables.makeHTML',R
    ta_left = "style='text-align:left'";
    ta_right = "style='text-align:right'";
    t = "";
    totalDiff = 0;
    ref = range(tournament.tables.length);
    // playersByScore.length
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      [a, b] = tournament.tables[i];
      p = playersByID[a];
      q = playersByID[b];
      s = "";
      s += td(i + 1); // id
      s += td(p.name, ta_left); // namn
      s += td(p.elo); // elo
      
      // fyll i senaste resultaten om de finns!
      s += td("&nbsp; - &nbsp;"); // res
      s += td(q.elo); // elo
      s += td(q.name, ta_left); // namn
      s += td(p.elo - q.elo, ta_right); // diff
      totalDiff += Math.abs(p.elo - q.elo);
      t += tr(s, `tabindex=${i}`);
    }
    // for i in range playersByID.length
    // 	echo matrix i

    // echo 'totalDiff',totalDiff
    t = tr(this.headers(R)) + t;
    this.app.innerHTML = table(t, 'style="border:none"');
    return this.moveFocus(0);
  }

  handleKeyDown(event) {
    var cell, index, p, q, r, ref, ref1, ref2, snart, tbl, trans;
    // echo 'handleKeyDown Tables',event.key
    if ((ref = event.key) === 'ArrowLeft' || ref === 'ArrowRight') {
      currentPage = pageStandings;
      currentPage.makeHTML();
      currentPage.moveFocus(currentPage.current);
      return;
    }
    index = event.target.tabIndex;
    if (event.key === 'ArrowDown') {
      currentPage.moveFocus(index + 1);
    }
    if (event.key === 'ArrowUp') {
      currentPage.moveFocus(index - 1);
    }
    if (event.key === 'Home') {
      currentPage.moveFocus(0);
    }
    if (event.key === 'End') {
      currentPage.moveFocus(tournament.tables.length - 1);
    }
    if (event.key === 'Enter') {
      echo('Pair');
      if (tournament.pair()) {
        pageTables.makeHTML();
      }
    }
    if ((ref1 = event.key, indexOf.call('0 1+-?', ref1) >= 0) || event.key === 'Delete') {
      tbl = tournament.tables[index];
      p = playersByID[tbl[0]];
      q = playersByID[tbl[1]];
      r = p.opp.length; // -1
      cell = event.target.children[3];
      if (event.key === 'Delete') {
        p.res = p.res.substring(0, r - 1); // KOLLAS!
        q.res = q.res.substring(0, r - 1);
        cell.innerHTML = "&nbsp; - &nbsp;"; // p.result r,index-1
        currentPage.moveFocus(index + 1);
      }
      if (ref2 = event.key, indexOf.call("0 1+-?", ref2) >= 0) {
        trans = {
          "0": "0",
          ' ': "=",
          "1": "1",
          '+': "+",
          "-": "-",
          "?": "?"
        };
        snart = {
          "0": "1",
          ' ': "=",
          "1": "0",
          '+': "-",
          "-": "+",
          "?": "?"
        };
        // if p.res.length < p.opp.length
        // 	if r > 0 then p.res += trans[event.key]
        // 	if r > 0 then q.res += snart[event.key]
        // else
        if (r > 0) {
          p.res = backa(p.res) + trans[event.key];
        }
        if (r > 0) {
          q.res = backa(q.res) + snart[event.key];
        }
        cell.innerHTML = {
          "0": "0 - 1",
          ' ': "½ - ½",
          "1": "1 - 0",
          "+": "+ - -",
          "-": "- - +",
          "?": "uppsk"
        }[event.key];
        return currentPage.moveFocus(index + 1);
      }
    }
  }

};

PageStandings = class PageStandings extends Page {
  constructor() {
    super();
    this.app = document.getElementById('app');
    this.klass = 'PageStandings';
    this.current = 0;
  }

  headers(R) {
    var h, i, k, len, ref;
    h = "";
    //h += th "pos",'style="border:none"'
    h += th("id", 'style="border:none"');
    h += th("namn", 'style="border:none"');
    h += th("elo", 'style="border:none"');
    ref = range(R);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      h += th(i + 1, 'style="border:none"');
    }
    h += th("pr", 'style="border:none"');
    h += th("pp", 'style="border:none"');
    h += th("bf", 'style="border:none"');
    h += th("*", 'style="border:none"');
    h += th("medel", 'style="border:none"');
    return h;
  }

  makeHTML() {
    var R, bf, decimals, i, k, l, len, len1, p, prs, r, ref, ref1, s, t, ta_center, ta_center_strong, ta_left, ta_right;
    R = tournament.round; // playersByScore[0].opp.length
    // echo 'PageStandings.makeHTML',R
    ta_left = "style='text-align:left'";
    ta_right = "style='text-align:right'";
    ta_center = "style='text-align:center'";
    ta_center_strong = "style='text-align:center; font-weight: bold;'";
    prs = (function() {
      var k, len, results1;
      results1 = [];
      for (k = 0, len = playersByID.length; k < len; k++) {
        p = playersByID[k];
        results1.push(p.performance());
      }
      return results1;
    })();
    decimals = findNumberOfDecimals(prs);
    t = "";
    ref = range(playersByScore.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      p = playersByScore[i];
      //if i==0 then current = p.id
      s = "";
      //s += td i+1,ta_right # pos
      s += td(p.id + 1, ta_right); // id
      s += td(p.name, ta_left); // namn
      s += td(p.elo); // elo
      ref1 = range(R);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        r = ref1[l];
        s += p.result(r, i); // ronder
      }
      
      // pr
      pr = p.performance();
      if (pr < 3999) {
        s += td(pr.toFixed(decimals)); //,ta_right
      } else {
        s += td("");
      }
      s += td(p.prettyScore(), ta_right); // pp
      
      // s += td "",'style="width:5px;border-top:none; border-bottom:none"' # empty

      // s += td p.table + p.prettyCol(R-1)[0] + p.prettyCol2(R-1)[0],ta_center
      // bf
      if (p.table) {
        bf = p.table + {
          l: 'B',
          r: 'W'
        }[p.prettyCol(R - 1)[1]];
      } else {
        bf = "";
      }
      s += td(bf, ta_center_strong);
      // diff
      // if R >= 1 then s += td playersByID[p.opp[R-1]].elo - p.elo, ta_right else s += td "",ta_right

      // id:bf
      // q = playersByID[i]
      // if R >= 1 then s += td "#{i+1}:#{q.table + {l:'B',r:'W'}[q.prettyCol(R-1)[1]]}" , ta_right else s += td "",ta_right

      // s += td matrix i
      // echo matrix i
      s += td(p.active ? "*" : "");
      s += td(p.average().toFixed(1));
      t += tr(s, `tabindex=${i}`);
    }
    t = tr(this.headers(R)) + t;
    this.app.innerHTML = table(t, 'style="border:none"');
    return this.moveFocus(0);
  }

  handleKeyDown(event) { // Enkelrond
    var active, cell, dir, i, index, ix, k, key, l, len, len1, n, p, r, ref, ref1, results1;
    if (event.ctrlKey && event.shiftKey && event.key.toLowerCase() === "i") {
      event.preventDefault();
      return;
    }
    echo('handleKeyDown', event.key);
    // if event.key in [' ','ArrowDown','ArrowUp'] then event.preventDefault()
    if ((ref = event.key) === 'ArrowLeft' || ref === 'ArrowRight') {
      currentPage = pageTables;
      currentPage.makeHTML();
      currentPage.moveFocus(currentPage.current);
      return;
    }
    
    // echo 'handleKeyDown Standings',event.key
    if (event === void 0) {
      return;
    }
    index = event.target.tabIndex; // - 1
    p = playersByScore[index];
    r = p.opp.length - 1;
    cell = event.target.children[3 + r];
    if (event.key === 'Pause') {
      p.active = !p.active;
      echo('Pause', p.active);
      cell = event.target.children[r + 7];
      cell.innerHTML = p.active ? '*' : '';
      return;
    }
    if (event.key === '*') {
      echo('* detected');
      active = playersByID[0].active;
      for (k = 0, len = playersByID.length; k < len; k++) {
        p = playersByID[k];
        p.active = !active;
      }
      pageStandings.makeHTML();
    }
    if (event.key === 'Enter') {
      echo('paused', tournament.paused);
      if (tournament.pair()) {
        currentPage = pageTables;
        pageTables.makeHTML();
      }
    }
    if (event.key === 'ArrowDown') {
      currentPage.moveFocus(index + 1);
    }
    if (event.key === 'ArrowUp') {
      currentPage.moveFocus(index - 1);
    }
    if (event.key === 'Home') {
      currentPage.moveFocus(0);
    }
    if (event.key === 'End') {
      currentPage.moveFocus(playersByID.length - 1);
    }
    // Sökning
    key = event.key.toUpperCase();
    if (key === event.key) {
      dir = -1;
    } else {
      dir = 1;
    }
    if (indexOf.call("ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ", key) >= 0) {
      index = event.target.tabIndex; // - 1
      n = playersByScore.length;
      ref1 = range(n);
      results1 = [];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        i = ref1[l];
        if (dir === 1) {
          ix = (index + i + 1) % n;
        } else {
          ix = modulo(index - i - 1, n);
        }
        p = playersByScore[ix];
        if (p.name.startsWith(key)) {
          currentPage.moveFocus(ix);
          break;
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    }
  }

};

Tournament = class Tournament {
  constructor(filename, data) {
    this.round = 0;
    this.type = 'FairPair';
    this.fetchData(filename, data);
    playersByScore = _.clone(playersByID);
    this.tables = [];
    echo('playersByScore', playersByScore);
  }

  makePaused() {
    var p;
    return ((function() {
      var k, len, results1;
      results1 = [];
      for (k = 0, len = playersByID.length; k < len; k++) {
        p = playersByID[k];
        if (!p.active) {
          results1.push(p.id + 1);
        }
      }
      return results1;
    })()).join(SEPARATOR); // (12!34)
  }

  makePlayers() {
    var p, players;
    players = (function() {
      var k, len, results1;
      results1 = [];
      for (k = 0, len = playersByID.length; k < len; k++) {
        p = playersByID[k];
        results1.push(p.write());
      }
      return results1;
    })();
    return players.join("\n");
  }

  makeTournament() {
    var result;
    result = [];
    result.push("TITLE:" + this.title);
    result.push("DATE:" + this.date);
    result.push("TYPE:" + this.type);
    result.push("ROUND:" + this.round);
    result.push("ROUNDS:" + this.rounds);
    result.push("PAUSED:" + this.makePaused());
    result.push("");
    result.push(this.makePlayers());
    return result.join('\n');
  }

  downloadFile(txt, filename) {
    var a, blob, url;
    // filename = filename.substring 0,@title.length
    echo('downloadFile', filename);
    blob = new Blob([txt], {
      type: 'text/plain'
    });
    url = URL.createObjectURL(blob);
    a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    return URL.revokeObjectURL(url);
  }

  handleBye() {
    var antal, candidate, k, len, p;
    antal = 0;
    candidate = null;
    for (k = 0, len = playersByScore.length; k < len; k++) {
      p = playersByScore[k];
      echo('handleBye', p);
      p.candidate = false;
      if (p.active) {
        antal++;
        if (indexOf.call(p.opp, -1) < 0) {
          candidate = p;
        }
      }
    }
    
    // antal = playersByID.length - @paused.length
    // @paused.length troligen ej satt.
    echo('handleBye', antal);
    if (antal % 2 === 1) {
      echo('udda antal spelare');
      if (candidate === null) {
        return echo('frirondskandidat saknas!');
      } else {
        candidate.candidate = true;
        candidate.opp.push(BYE);
        candidate.col += '_';
        candidate.res += '1';
        return echo("frirondskandidat = " + candidate.name);
      }
    } else {
      return candidate = null;
    }
  }

  pair() {
    var a, abal, arr, b, bbal, c, d, i, k, l, len, len1, len2, len3, len4, m, message, o, p, ref, ref1, ref2, solution, u;
    this.handleBye();
    for (k = 0, len = playersByID.length; k < len; k++) {
      p = playersByID[k];
      message = p.check();
      if (message !== "") {
        alert(message);
        return false;
      }
    }
    this.virgin = false;
    // @downloadFile @makeTournament(), "#{@title}-R#{@round}-#{isoDate()}.txt"
    echo("");
    echo(`Lottning av rond ${this.round} =====================================================`);
    document.title = `Round ${this.round + 1}`;
    solution = this.findSolution(this.makeEdges(-1));
    this.tables = makePairs(solution);
    this.round += 1;
    currentPage.makeHeader();
    echo('tables', this.tables);
    // spelaren med högst PR sitter på bord 1. Vid lika avgör bordens lägre spelare
    if (this.type === 'FairPair') {
      arr = [];
      echo(this.tables);
      ref = this.tables;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        [c, d] = ref[l];
        a = playersByID[c].performance();
        b = playersByID[d].performance();
        abal = playersByID[c].balans();
        bbal = playersByID[d].balans();
        echo('balans', Math.round(a), Math.round(b), abal + bbal);
        arr.push([Math.max(a, b), Math.min(a, b), c, d]);
      }
      arr.sort(function(a, b) {
        if (b[0] === a[0]) {
          return b[1] - a[1];
        } else {
          return b[0] - a[0];
        }
      });
      this.tables = (function() {
        var len2, m, results1;
        results1 = [];
        for (m = 0, len2 = arr.length; m < len2; m++) {
          [a, b, c, d] = arr[m];
          results1.push([c, d]);
        }
        return results1;
      })();
    }
    if (this.type === 'Swiss') {
      arr = [];
      ref1 = this.tables;
      for (m = 0, len2 = ref1.length; m < len2; m++) {
        [c, d] = ref1[m];
        a = playersByID[c].score();
        b = playersByID[d].score();
        arr.push([Math.max(a, b), Math.min(a, b), c, d]);
      }
      arr.sort(function(a, b) {
        if (b[0] === a[0]) {
          return b[1] - a[1];
        } else {
          return b[0] - a[0];
        }
      });
      this.tables = (function() {
        var len3, o, results1;
        results1 = [];
        for (o = 0, len3 = arr.length; o < len3; o++) {
          [a, b, c, d] = arr[o];
          results1.push([c, d]);
        }
        return results1;
      })();
    }
    for (o = 0, len3 = playersByID.length; o < len3; o++) {
      p = playersByID[o];
      if (!p.active) {
        p.opp.push(PAUSE);
        p.col += '_';
        p.res += '0';
      }
    }
    this.tables = this.makeOppColRes(this.tables);
    this.sort();
    echo('playersByID', playersByID);
    ref2 = range(playersByID.length);
    for (u = 0, len4 = ref2.length; u < len4; u++) {
      i = ref2[u];
      echo(this.matrix(i));
    }
    currentPage.makeHTML();
    this.downloadFile(this.makeTournament(), `${this.title}-R${this.round}-${isoDate()}.txt`);
    return true;
  }

  fetchData(filename, data) {
    var a, arr, b, hash, helpText, i, i1, id, item, k, key, keyword, l, len, len1, len10, len2, len3, len4, len5, len6, len7, len8, len9, line, m, message, nr, o, p, pa, pb, player, players, ref, ref1, ref2, ref3, ref4, ref5, ref6, u, v, value, w, x, y, z;
    this.filename = filename.replaceAll(".txt", "");
    data = data.split('\n');
    hash = {};
    // default values
    hash.PLAYERS = [];
    hash.TITLE = '';
    hash.DATE = '';
    hash.TYPE = 'FairPair'; // or Swiss
    hash.ROUND = 0;
    hash.ROUNDS = 10;
    hash.PAUSED = "";
// Läs in parametrarna först
    for (nr = k = 0, len = data.length; k < len; nr = ++k) {
      line = data[nr];
      line = line.trim();
      if (line.length === 0) {
        continue;
      }
      arr = line.split(':');
      if (arr.length === 2) {
        if (!(arr[0] in KEYWORDS)) {
          helpText = ((function() {
            var results1;
            results1 = [];
            for (key in KEYWORDS) {
              value = KEYWORDS[key];
              results1.push(`    ${key}: ${value}`);
            }
            return results1;
          })()).join('\n');
          keyword = `\"${arr[0]}\"`;
          alert(`${keyword} in line ${nr + 1} is not one of\n${helpText}`);
          return;
        }
        hash[arr[0]] = arr[1];
      }
    }
    this.title = hash.TITLE;
    this.date = hash.DATE;
    this.type = hash.TYPE;
    echo(this.type);
    this.round = parseInt(hash.ROUND);
    this.rounds = parseInt(hash.ROUNDS);
    this.paused = hash.PAUSED; // list of one based ids

    // Läs därefter in spelarna
    for (nr = l = 0, len1 = data.length; l < len1; nr = ++l) {
      line = data[nr];
      line = line.trim();
      if (line.length === 0) {
        continue;
      }
      arr = line.split(':');
      if (arr.length === 1) {
        if (indexOf.call(line, '!') < 0) {
          alert(`${line}\n in line ${nr + 1}\n must look like\n    2882!CARLSEN Magnus or\n    1601!NILSSON Christer!2w0`);
          return;
        }
        arr = line.split('!');
        arr[1] = arr[1].trim(); // namnet
        ref = range(2, arr.length);
        for (m = 0, len2 = ref.length; m < len2; m++) {
          i = ref[m];
          arr[i] = arr[i].replaceAll(' ', '');
        }
        if (!/^\d{4}$/.test(arr[0])) {
          alert(`${arr[0]}\n in line ${nr + 1}\n must have four digits`);
          return;
        }
        ref1 = range(2, arr.length);
        for (o = 0, len3 = ref1.length; o < len3; o++) {
          i = ref1[o];
          item = arr[i];
          echo('item', item);
          if (!/^-?\d+(w|b)[_0=1+-\?]$/.test(item)) {
            alert(`${item}\n in line ${nr + 1}\n must follow the format <number> <color> <result>\n  where color is in wb\n  and result is in 0=1+-?`);
            return;
          }
        }
        hash.PLAYERS.push(arr.slice(0, this.round + 2));
      }
    }
    this.players = [];
    players = hash.PLAYERS;
    g.N = players.length;
    if (!((4 <= (ref2 = g.N) && ref2 < 100))) {
      alert("Number of players must be between 4 and 99!");
      return;
    }
    playersByID = [];
    ref3 = range(g.N);
    for (u = 0, len4 = ref3.length; u < len4; u++) {
      i = ref3[u];
      player = new Player(i);
      echo(players[i]);
      player.read(players[i]);
      playersByID.push(player);
    }
    if (this.paused === "") {
      this.paused = [];
    } else {
      for (v = 0, len5 = playersByID.length; v < len5; v++) {
        p = playersByID[v];
        p.active = true;
      }
      this.paused = this.paused.split('!');
      ref4 = this.paused;
      for (w = 0, len6 = ref4.length; w < len6; w++) {
        id = ref4[w];
        if (id !== "") {
          playersByID[id - 1].active = false;
        }
      }
    }
    g.average = 0;
    ref5 = range(g.N);
    for (x = 0, len7 = ref5.length; x < len7; x++) {
      i = ref5[x];
      playersByID[i].elo = parseInt(playersByID[i].elo);
      g.average += playersByID[i].elo;
    }
    g.average /= g.N;
    playersByID.sort(function(a, b) {
      if (a.elo !== b.elo) {
        return b.elo - a.elo;
      }
      if (a.name > b.name) {
        return 1;
      } else {
        return -1;
      }
    });
    ref6 = range(g.N);
    for (y = 0, len8 = ref6.length; y < len8; y++) {
      i = ref6[y];
      playersByID[i].id = i;
    }
    for (z = 0, len9 = playersByID.length; z < len9; z++) {
      p = playersByID[z];
      message = p.check();
      if (message !== "") {
        alert(message);
      }
    }
    echo('playersByID', playersByID);
    
    // extract @pairs from the last round
    this.pairs = [];
    for (i1 = 0, len10 = playersByID.length; i1 < len10; i1++) {
      p = playersByID[i1];
      a = p.id;
      b = _.last(p.opp);
      if (a < b) {
        pa = playersByID[a];
        pb = playersByID[b];
        this.pairs.push('w' === p.col[p.col.length - 1] ? (pa.chair = 2 * this.pairs.length, pb.chair = 2 * this.pairs.length + 1, [a, b]) : (pa.chair = 2 * this.pairs.length + 1, pb.chair = 2 * this.pairs.length, [b, a]));
      }
    }
    echo('@pairs', this.pairs);
    // @dump 'fetch'
    this.virgin = true;
    return true;
  }

  ok(pa, pb) {
    var ref;
    return pa.id !== pb.id && (ref = pa.id, indexOf.call(pb.opp, ref) < 0) && Math.abs(pa.balans() + pb.balans()) <= 2; // 1 riskerar tappa två ronder i slutet och ge större elodiffar.
  }

  makeEdges_FAIRPAIR(iBye) { // iBye är ett id eller -1
    var a, arr, b, cost, diff, k, l, len, len1, pa, pb;
    arr = [];
    for (k = 0, len = playersByScore.length; k < len; k++) {
      pa = playersByScore[k];
      echo('FAIRPAIR', pa);
      a = pa.id;
      if (pa.active === false) {
        continue;
      }
      if (pa.candidate === true) {
        continue;
      }
      for (l = 0, len1 = playersByScore.length; l < len1; l++) {
        pb = playersByScore[l];
        b = pb.id;
        if (a === b) {
          continue;
        }
        if (pb.active === false) {
          continue;
        }
        if (pb.candidate === true) {
          continue;
        }
        diff = Math.abs(pa.elo - pb.elo);
        cost = 9999 - diff ** 1.01;
        if (a < b) {
          continue;
        }
        if (this.ok(pa, pb)) {
          arr.push([a, b, cost]);
        }
      }
    }
    arr.sort(function(a, b) {
      return b[2] - a[2];
    });
    echo('edges', arr);
    return arr;
  }

  makeEdges_SWISS(iBye) { // iBye är ett id eller -1
    var a, arr, b, cost, d0, d1, d2, diff, hashx, i, k, l, len, len1, len2, len3, m, o, p, pa, pb, ref;
    this.sort();
    echo('makeEdges', playersByScore);
    hashx = {};
    ref = range(playersByScore.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      p = playersByScore[i];
      p.rank = i;
      p.group = p.score().toFixed(1);
      if (!(p.group in hashx)) {
        hashx[p.group] = 0;
      }
      hashx[p.group] += 1;
    }
    echo('hashx', hashx);
    for (l = 0, len1 = playersByID.length; l < len1; l++) {
      p = playersByID[l];
      p.groupSize = hashx[p.group];
    }
    echo('playersByScore', playersByScore);
    echo('playersByID', playersByID);
    arr = [];
    for (m = 0, len2 = playersByID.length; m < len2; m++) {
      pa = playersByID[m];
      a = pa.id;
      if (!pa.active || a === iBye) {
        continue;
      }
      for (o = 0, len3 = playersByID.length; o < len3; o++) {
        pb = playersByID[o];
        b = pb.id;
        if (b <= a) {
          continue;
        }
        if (!pb.active || b === iBye) {
          continue;
        }
        if (!this.ok(pa, pb)) {
          continue;
        }
        d0 = Math.abs(pa.score() - pb.score());
        d1 = Math.abs(pa.balans() + pb.balans());
        if (pa.group === pb.group) {
          d2 = Math.abs(pa.groupSize / 2 - Math.abs(pa.rank - pb.rank));
        } else {
          d2 = Math.abs(pa.rank - pb.rank);
        }
        diff = 10000 * d0 + 100 * d1 + d2 ** 1.01;
        // diff = 10000 * d0 + d1 + 100 * d2 # ** 1.01
        //echo "#{a} #{b}: pag=#{pa.group} pbg=#{pb.group} pags=#{pa.groupSize} pbgs=#{pb.groupSize}  par=#{pa.rank} pbr=#{pb.rank} d0=#{d0} d1=#{d1} d2=#{d2} diff=#{diff} #{pa.name} vs #{pb.name}"
        cost = 99999 - diff; // ** 1.01
        arr.push([a, b, cost]);
      }
    }
    echo('edges', arr);
    return arr;
  }

  matrix(i) {
    var k, len, n, pi, r, ref, result;
    n = playersByID.length;
    result = Array(n).fill('•');
    result[i] = '*';
    if (i === 0) {
      result[0] = 'H';
    }
    if (i === n - 1) {
      result[i] = 'L';
    }
    pi = playersByID[i];
    ref = range(pi.opp.length);
    for (k = 0, len = ref.length; k < len; k++) {
      r = ref[k];
      result[pi.opp[r]] = "123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[r];
    }
    if (n > 120) {
      return result.join("");
    }
    if (n > 70) {
      return result.join(" ");
    }
    if (n > 40) {
      return result.join("  ");
    }
    return result.join("   ");
  }

  makeEdges(iBye) { // iBye är ett id eller -1
    if (this.type === 'Swiss') {
      return this.makeEdges_SWISS(iBye);
    }
    if (this.type === 'FairPair') {
      return this.makeEdges_FAIRPAIR(iBye);
    }
  }

  findSolution(edges) {
    var edmonds;
    edmonds = new Edmonds(edges);
    return edmonds.maxWeightMatching(edges);
  }

  sort() {
    return playersByScore.sort((a, b) => {
      var diff;
      if (this.type === 'Swiss') {
        diff = b.score() - a.score();
      }
      if (this.type === 'FairPair') {
        diff = b.performance() - a.performance();
      }
      if (diff === 0) {
        return b.elo - a.elo;
      } else {
        return diff;
      }
    });
  }

  handleCol(pi, pa, flag) {
    var foundDiff, j, k, len, otherCol, ref;
    if (pi.col.length === 0) {
      if (flag) {
        pi.col += 'b';
        return pa.col += 'w';
      } else {
        pi.col += 'w';
        return pa.col += 'b';
      }
    } else {
      if (pi.balans() > pa.balans()) {
        pi.col += "b";
        return pa.col += "w";
      } else if (pi.balans() < pa.balans()) {
        pi.col += 'w';
        return pa.col += 'b'; // samma balans
      } else {
        otherCol = {
          'w': 'b',
          'b': 'w'
        };
        foundDiff = false;
        ref = range(pi.col.length - 1, -1, -1);
        for (k = 0, len = ref.length; k < len; k++) {
          j = ref[k];
          if (pi.col[j] !== pa.col[j]) {
            foundDiff = true;
            pi.col += otherCol[pi.col[j]];
            pa.col += otherCol[pa.col[j]];
            break;
          }
        }
        if (!foundDiff) {
          if (flag) {
            pi.col += "b";
            return pa.col += "w";
          } else {
            pi.col += 'w';
            return pa.col += 'b';
          }
        }
      }
    }
  }

  // uppdaterar opp, col samt res+="_"
  makeOppColRes(pairs, flag = false) {
    var a, b, bord, k, len, n, pa, pair, pb, result;
    bord = 0;
    result = [];
    echo(pairs);
    for (k = 0, len = pairs.length; k < len; k++) {
      pair = pairs[k];
      a = pair[0];
      b = pair[1];
      pa = playersByID[a];
      pb = playersByID[b];
      bord += 1;
      pa.table = bord;
      pb.table = bord;
      pa.opp.push(b);
      pb.opp.push(a);
      this.handleCol(pa, pb, bord % 2 === 1);
      pa.res += '_';
      pb.res += '_';
      // vid lika färgvärden, alternera
      n = pa.col.length;
      if (pa.col[n - 1] === 'w') {
        result.push([a, b]);
      }
      if (pa.col[n - 1] === 'b') {
        result.push([b, a]);
      }
    }
    return result;
  }

};

data = `TITLE:Demo
DATE:2025-01-19
TYPE:FairPair
ROUND:0
ROUNDS:4
PAUSED:

1825!JOHANSSON Lennart
1697!BJÖRKDAHL Göran
1684!SILINS Peteris
1681!STOLOV Leonid
1650!Christer Nilsson
1644!PETTERSSON Lars-Åke
1598!AIKIO Onni
1598!ISRAEL Dan
1583!PERSSON Kjell
1561!LILJESTRÖM Tor
1559!LEHVONEN Jouko
1539!ANDERSSON Lars Owe
1535!ÅBERG Lars-Erik
1532!ANTONSSON Görgen
1400!STRÖMBÄCK Henrik
`;

`PAUSED:1!2!3!4
1825!JOHANSSON Lennart  ! 8 b 1
1697!BJÖRKDAHL Göran    ! 9 w =
1684!SILINS Peteris     !10 w 0
1681!STOLOV Leonid      !11 b 1
1644!PETTERSSON Lars-Åke!12 b =
1598!AIKIO Onni         !13 w 0
1598!ISRAEL Dan         !14 w 1

1583!PERSSON Kjell      ! 1 w 0
1561!LILJESTRÖM Tor     ! 2 b =
1559!LEHVONEN Jouko     ! 3 b 1
1539!ANDERSSON Lars Owe ! 4 w 0
1535!ÅBERG Lars-Erik    ! 5 w =
1532!ANTONSSON Görgen   ! 6 b 1
1400!STRÖMBÄCK Henrik   ! 7 b 0`;

pageStandings = new PageStandings();

pageTables = new PageTables();

tournament = new Tournament("demo", data);

currentPage = pageStandings;

currentPage.makeHeader();

currentPage.makeHTML();

currentPage.moveFocus(0);

window.addEventListener('keydown', function(event) {
  return currentPage.handleKeyDown(event);
});

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\FairPair2\coffee\sketch.coffee