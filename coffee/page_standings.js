// Generated by CoffeeScript 2.7.0
var boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } },
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

import {
  g,
  print,
  range,
  scalex,
  scaley
} from './globals.js';

import {
  Page
} from './page.js';

import {
  Button,
  spread
} from './button.js';

import {
  Lista
} from './lista.js';

export var Standings = class Standings extends Page {
  constructor() {
    super();
    this.handleResult = this.handleResult.bind(this);
    this.t = g.tournament;
    // @buttons.ArrowLeft  = new Button '', '', () => g.setState g.ACTIVE
    // @buttons.ArrowRight = new Button '', '', () => g.setState g.TABLES
    // @buttons.s.active = false
    this.buttons.p = new Button('Pair', 'P = Perform pairing now', () => {
      return this.t.lotta();
    });
    this.buttons.K0 = new Button('0', '0 = White Loss', () => {
      return this.handleResult('0');
    });
    this.buttons[' '] = new Button('½', 'space = Draw', () => {
      return this.handleResult(' ');
    });
    this.buttons.K1 = new Button('1', '1 = White Win', () => {
      return this.handleResult('1');
    });
    this.buttons.Delete = new Button('Delete', 'delete = Remove result', () => {
      return this.handleDelete();
    });
    this.buttons.r = new Button('Random', 'R = Random results', () => {
      return this.randomResult();
    });
  }

  handleResult(key) {
    var a, b, ch, index, pa, pb;
    boundMethodCheck(this, Standings);
    [a, b] = this.t.pairs[this.lista.currentRow];
    pa = this.t.playersByID[a];
    pb = this.t.playersByID[b];
    index = '0 1'.indexOf(key);
    ch = "012"[index];
    if (pa.res.length === pa.col.length) {
      if (ch !== _.last(pa.res)) {
        this.lista.errors.push(this.lista.currentRow);
      }
    } else {
      if (pa.res.length < pa.col.length) {
        pa.res += "012"[index];
      }
      if (pb.res.length < pb.col.length) {
        pb.res += "210"[index];
      }
    }
    this.lista.currentRow = modulo(this.lista.currentRow + 1, this.t.pairs.length);
    return this.setActive();
  }

  setLista() {
    var header, rheader;
    rheader = _.map(range(1, this.t.round + 1), function(i) {
      return ` ${i % 10} `;
    });
    rheader = rheader.join('');
    header = "";
    header += g.txtT("Pos", 3, RIGHT);
    header += ' ' + g.txtT("Id", 3, RIGHT);
    header += ' ' + g.txtT("Elo", 4, RIGHT);
    header += ' ' + g.txtT("Name", 25, LEFT);
    header += '' + g.txtT(rheader, 3 * this.round, LEFT);
    header += ' ' + g.txtT("EPR", 7, RIGHT);
    header += ' ' + g.txtT("PP", 7, RIGHT);
    this.playersByPerformance = _.clone(this.t.playersByID.slice(0, g.N));
    this.playersByPerformance = this.playersByPerformance.sort((a, b) => {
      return b.enhanced_performance() - a.enhanced_performance();
    });
    // array = (p.performance().toFixed(1) for p in @playersByPerformance)
    // dubletter = _.uniq(_.filter(array, (value, index, array) => _.indexOf(array, value) != _.lastIndexOf(array, value)));
    this.lista = new Lista(this.playersByPerformance, header, this.buttons, (p, index, pos) => { // returnera strängen som ska skrivas ut. Dessutom ritas lightbulbs här.
      var j, len, r, ref, s, x;
      this.y_bulb = (5 + index) * g.ZOOM[g.state];
      textAlign(LEFT);
      fill('black');
      s = "";
      s += g.txtT((1 + pos).toString(), 3, RIGHT);
      s += ' ' + g.txtT((1 + p.id).toString(), 3, RIGHT);
      s += ' ' + g.txtT(p.elo.toString(), 4, RIGHT);
      s += ' ' + g.txtT(p.name, 25, LEFT);
      s += ' ' + g.txtT('', 3 * (this.t.round - 1), CENTER);
      s += ' ' + g.txtT(p.enhanced_performance().toFixed(1), 8, RIGHT);
      s += ' ' + g.txtT((p.score(this.t.round) / 2).toFixed(1), 6, RIGHT);
      ref = range(g.tournament.round - 1);
      //- 1
      for (j = 0, len = ref.length; j < len; j++) {
        r = ref[j];
        x = g.ZOOM[g.state] * (24.2 + 1.8 * r);
        this.lightbulb(p.id, p.col[r], x, this.y_bulb, p.res.slice(r, r + 1), p.opp[r]);
      }
      return s;
    });
    this.lista.paintYellowRow = false;
    return spread(this.buttons, 10, this.y, this.h);
  }

  // mouseMoved : =>
  // 	r = round ((mouseX / g.ZOOM[g.state] - 24.2) / 1.8)
  // 	iy = @lista.offset + round mouseY / g.ZOOM[g.state] - 5
  // 	if 0 <= iy < @playersByPerformance.length and 0 <= r < g.tournament.round - 1
  // 		pa = @playersByPerformance[iy]
  // 		b = pa.opp[r]

    // 		if b == g.BYE 
  // 			s = ""
  // 			s +=       g.txtT '',                      3,  RIGHT
  // 			s += ' ' + g.txtT '',                      3,  RIGHT
  // 			s += ' ' + g.txtT '',                      4,  RIGHT
  // 			s += ' ' + g.txtT 'has a bye',            25,  LEFT
  // 			s += ' ' + g.txtT '',       3 * (@t.round-1),  LEFT
  // 			s += ' ' + g.txtT "#{pa.elo.toFixed(1)}",        7, RIGHT
  // 			g.help = s

    // 		if b == g.PAUSE
  // 			s = ""
  // 			s +=       g.txtT '',                      3,  RIGHT
  // 			s += ' ' + g.txtT '',                      3,  RIGHT
  // 			s += ' ' + g.txtT '',                      4,  RIGHT
  // 			s += ' ' + g.txtT 'has a pause',          25,  LEFT
  // 			s += ' ' + g.txtT '',       3 * (@t.round-1),  LEFT
  // 			s += ' ' + g.txtT "0.0",                         7, RIGHT
  // 			g.help = s

    // 		if b >= 0				
  // 			pb = @t.playersByID[b]
  // 			chg = 1234 #pa.calcRound r

    // 			s = ""
  // 			s +=       g.txtT '',                      3,  RIGHT
  // 			s += ' ' + g.txtT (1+pb.id).toString(),    3,  RIGHT
  // 			s += ' ' + g.txtT pb.elo.toString(),       4,  RIGHT
  // 			s += ' ' + g.txtT pb.name,                25,  LEFT
  // 			s += ' ' + g.txtT '',       3 * (@t.round-1),  LEFT
  // 			s += ' ' + g.txtT chg.toFixed(1), 7,  RIGHT
  // 			if pa.res[r] == '1' then s += " = 0.5 * (#{g.txtT pb.elo, 7, RIGHT})"
  // 			if pa.res[r] == '2' then s += " = #{g.txtT pb.elo, 7, RIGHT}"

    // 			g.help = pa.explanation r
  // 	else
  // 		g.help = ""
  mouseWheel(event) {
    return this.lista.mouseWheel(event);
  }

  mousePressed(event) {
    return this.lista.mousePressed(event);
  }

  keyPressed(event) {
    return this.buttons[key].click();
  }

  draw() {
    var button, key, ref;
    fill('white');
    this.showHeader(this.t.round - 1);
    this.lista.draw();
    ref = this.buttons;
    for (key in ref) {
      button = ref[key];
      button.draw();
    }
    textAlign(LEFT);
    return text(g.help, 10, 3 * g.ZOOM[g.state]);
  }

  show(s, x, y, bg, fg) {
    // fill bg
    // rect x, y, 1.6 * g.ZOOM[g.state], 0.9 * g.ZOOM[g.state]
    // fill fg
    return this.txt(s, x, y + 1, CENTER);
  }

  lightbulb(id, color, x, y, result, opponent) {
    var s;
    push();
    rectMode(CENTER);
    s = 1 + opponent;
    if (opponent === g.PAUSE) {
      this.show(" P ", x, y, "gray", 'yellow');
    }
    if (opponent === g.BYE) {
      this.show("BYE", x, y, "green", 'yellow');
    }
    if (opponent >= 0) {
      result = '012'.indexOf(result);
      this.show(1 + opponent, x, y, 'red gray green'.split(' ')[result], {
        b: 'black',
        ' ': 'yellow',
        w: 'white'
      }[color]);
    }
    return pop();
  }

  make(res, header) {
    var i, id, j, k, l, len, len1, len2, len3, m, p, player, r, ref, ref1, ref2, ref3, s;
    if (this.t.pairs.length === 0) {
      res.push("This ROUND can't be paired! (Too many rounds)");
    }
    res.push("STANDINGS" + header);
    res.push("");
    header = "";
    header += g.txtT("Pos", 3, RIGHT);
    header += ' ' + g.txtT('Id', 3, RIGHT);
    header += ' ' + g.txtT("Elo", 4, RIGHT);
    header += ' ' + g.txtT("Name", 25, LEFT);
    ref = range(this.t.round);
    for (j = 0, len = ref.length; j < len; j++) {
      r = ref[j];
      header += g.txtT(`${r + 1}`, 6, RIGHT);
    }
    header += ' ' + g.txtT("EPR", 7, RIGHT);
    header += ' ' + g.txtT("PP", 7, RIGHT);
    header += ' ' + g.txtT(" ELOS", 7, LEFT);
    ref1 = this.playersByPerformance;
    for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
      player = ref1[i];
      if (i % this.t.ppp === 0) {
        res.push(header);
      }
      s = "";
      s += g.txtT((1 + i).toString(), 3, RIGHT);
      s += ' ' + g.txtT((1 + player.id).toString(), 3, RIGHT);
      s += ' ' + g.txtT(player.elo.toString(), 4, RIGHT);
      s += ' ' + g.txtT(player.name, 25, LEFT);
      s += ' ';
      ref2 = range(this.t.round);
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        r = ref2[l];
        if (player.opp[r] === -2) {
          s += '    P ';
        }
        if (player.opp[r] === -1) {
          s += '   BYE';
        }
        if (player.opp[r] >= 0) {
          s += g.txtT(`${1 + player.opp[r]}${g.RINGS[player.col[r][0]]}${"0½1"[player.res[r]]}`, 6, RIGHT);
        }
      }
      p = player;
      s += ' ' + g.txtT(p.enhanced_performance().toFixed(1), 8, RIGHT);
      s += ' ' + g.txtT((p.score(this.t.round + 1) / 2).toFixed(1), 6, RIGHT);
      ref3 = range(this.t.round);
      for (m = 0, len3 = ref3.length; m < len3; m++) {
        r = ref3[m];
        id = p.opp[r];
        s += " " + this.t.playersByID[id].elo;
      }
      s += " " + g.average.toFixed(0);
      res.push(s);
      if (i % this.t.ppp === this.t.ppp - 1) {
        res.push("\f");
      }
    }
    return res.push("\f");
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\FairPair2\coffee\page_standings.coffee