// Generated by CoffeeScript 2.7.0
var compare,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } },
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

import {
  g,
  print,
  range,
  scalex,
  scaley
} from './globals.js';

import {
  Page
} from './page.js';

import {
  Button,
  spread
} from './button.js';

import {
  Lista
} from './lista.js';

compare = function(pa, pb) {
  var a, b;
  a = pa.name[0];
  b = pb.name[0];
  if (a > b) {
    return 0;
  }
  if (a === b) {
    return 1;
  }
  if (a < b) {
    return 2;
  }
};

export var Tables = class Tables extends Page {
  constructor() {
    super();
    // @buttons.t.active = false
    this.setLista = this.setLista.bind(this);
    this.handleResult = this.handleResult.bind(this);
    // @buttons.ArrowLeft  = new Button '', '', () => g.setState g.STANDINGS
    // @buttons.ArrowRight = new Button '', '', () => g.setState g.NAMES
    this.buttons.p = new Button('Pair', 'P = Perform pairing now', () => {
      return this.t.lotta();
    });
    this.buttons.K0 = new Button('0', '0 = White Loss', () => {
      return this.handleResult('0');
    });
    this.buttons[' '] = new Button('Â½', 'space = Draw', () => {
      return this.handleResult(' ');
    });
    this.buttons.K1 = new Button('1', '1 = White Win', () => {
      return this.handleResult('1');
    });
    this.buttons.Delete = new Button('Delete', 'delete = Remove result', () => {
      return this.handleDelete();
    });
    this.buttons.r = new Button('Random', 'R = Random results', () => {
      return this.randomResult();
    });
  }

  setLista() {
    var header;
    boundMethodCheck(this, Tables);
    // print 'Lista', g.tournament.pairs.length
    header = "";
    header += g.txtT('Tbl', 3, RIGHT);
    header += ' ' + g.txtT('Elo', 4, RIGHT);
    header += ' ' + g.txtT('White', 25, LEFT);
    header += ' ' + g.txtT('Result', 7, CENTER);
    header += ' ' + g.txtT('Black', 25, LEFT);
    header += ' ' + g.txtT('Elo', 4, RIGHT);
    this.lista = new Lista(this.t.pairs, header, this.buttons, (pair, index, pos) => {
      var a, b, both, nr, pa, pb, s;
      [a, b] = pair;
      pa = this.t.playersByID[a];
      pb = this.t.playersByID[b];
      both = pa.res.length === pa.col.length ? g.prBoth(_.last(pa.res)) : "   -   ";
      nr = index + 1;
      s = "";
      s += g.txtT((pos + 1).toString(), 3, RIGHT);
      s += ' ' + g.txtT(pa.elo.toString(), 4, RIGHT);
      s += ' ' + g.txtT(pa.name, 25, LEFT);
      s += ' ' + g.txtT(both, 7, CENTER);
      s += ' ' + g.txtT(pb.name, 25, LEFT);
      s += ' ' + g.txtT(pb.elo.toString(), 4, RIGHT);
      return s;
    });
    this.lista.errors = [];
    spread(this.buttons, 10, this.y, this.h);
    return this.setActive();
  }

  mouseWheel(event) {
    return this.lista.mouseWheel(event);
  }

  mousePressed(event) {
    return this.lista.mousePressed(event);
  }

  keyPressed(event, key) {
    return this.buttons[key].click();
  }

  draw() {
    var button, key, ref;
    fill('white');
    this.showHeader(this.t.round);
    ref = this.buttons;
    for (key in ref) {
      button = ref[key];
      button.draw();
    }
    return this.lista.draw();
  }

  elo_probabilities(diff) {
    if (random() < 0.1) {
      return 1; // draw
    }
    if (random() > g.F(diff)) {
      return 0;
    } else {
      return 2;
    }
  }

  setActive() {
    this.buttons.p.active = g.calcMissing() === 0;
    if (g.pages[g.ACTIVE]) {
      return g.pages[g.ACTIVE].buttons.p.active = this.buttons.p.active;
    }
  }

  handleResult(key) {
    var a, b, ch, index, pa, pb;
    boundMethodCheck(this, Tables);
    [a, b] = this.t.pairs[this.lista.currentRow];
    pa = this.t.playersByID[a];
    pb = this.t.playersByID[b];
    index = '0 1'.indexOf(key);
    ch = "012"[index];
    if (pa.res.length === pa.col.length) {
      if (ch !== _.last(pa.res)) {
        this.lista.errors.push(this.lista.currentRow);
      }
    } else {
      if (pa.res.length < pa.col.length) {
        pa.res += "012"[index];
      }
      if (pb.res.length < pb.col.length) {
        pb.res += "210"[index];
      }
    }
    this.lista.currentRow = modulo(this.lista.currentRow + 1, this.t.pairs.length);
    return this.setActive();
  }

  randomResult() {
    var a, b, j, len, pa, pb, ref, res;
    ref = this.t.pairs;
    for (j = 0, len = ref.length; j < len; j++) {
      [a, b] = ref[j];
      pa = this.t.playersByID[a];
      pb = this.t.playersByID[b];
      res = this.elo_probabilities(pa.elo - pb.elo);
      if (pa.res.length < pa.col.length) {
        pa.res += res;
        pb.res += 2 - res;
      }
    }
    return this.setActive();
  }

  handleDelete() {
    var a, b, e, i, pa, pb;
    i = this.lista.currentRow;
    [a, b] = this.t.pairs[i];
    pa = this.t.playersByID[a];
    pb = this.t.playersByID[b];
    this.lista.errors = (function() {
      var j, len, ref, results;
      ref = this.lista.errors;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        e = ref[j];
        if (e !== i) {
          results.push(e);
        }
      }
      return results;
    }).call(this);
    if (pa.res.length === pb.res.length) {
      [a, b] = this.t.pairs[i];
      pa = this.t.playersByID[a];
      pb = this.t.playersByID[b];
      pa.res = pa.res.substring(0, pa.res.length - 1);
      pb.res = pb.res.substring(0, pb.res.length - 1);
    }
    this.lista.currentRow = modulo(this.lista.currentRow + 1, this.t.pairs.length);
    return this.setActive();
  }

  make(res, header) {
    var a, b, i, j, len, pa, pb, ref, results;
    res.push("TABLES" + header);
    res.push("");
    ref = range(this.t.pairs.length);
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      [a, b] = this.t.pairs[i];
      if (i % this.t.tpp === 0) {
        res.push(`Table      ${g.RINGS.w}`.padEnd(25) + _.pad("", 28 + 10) + `${g.RINGS.b}`);
      }
      pa = this.t.playersByID[a];
      pb = this.t.playersByID[b];
      res.push("");
      res.push(_.pad(i + 1, 6) + pa.elo + ' ' + g.txtT(pa.name, 25, LEFT) + ' ' + _.pad("|____| - |____|", 20) + ' ' + pb.elo + ' ' + g.txtT(pb.name, 25, LEFT));
      if (i % this.t.tpp === this.t.tpp - 1) {
        results.push(res.push("\f"));
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\FairPair2\coffee\page_tables.coffee